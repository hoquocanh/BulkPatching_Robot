<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20191218 17:44:21.825" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1" name="Test Resources" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources">
<suite id="s1-s1-s1" name="Test Suites" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites">
<suite id="s1-s1-s1-s1" name="4. Exit Bulk Patchings Screen" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\4. Exit Bulk Patchings Screen">
<suite id="s1-s1-s1-s1-s1" name="4.2. Check confirmation when number of patches on End B are less than End A" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\4. Exit Bulk Patchings Screen\4.2. Check confirmation when number of patches on End B are less than End A.robot">
<test id="s1-s1-s1-s1-s1-t1" name="Exit_Bulk_02_01_01_Verify that imVision X shall create a confirm port if any port in End A / End B list is in the local controller, and the port is un-patched after selecting Exit button when there is a 24-port Legacy Copper">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191218 17:44:22.266" endtime="20191218 17:44:22.267"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191218 17:44:22.267" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191218 17:44:23.725" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191218 17:44:22.267" endtime="20191218 17:44:23.726"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:22.266" endtime="20191218 17:44:23.727"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191218 17:44:23.732" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191218 17:44:23.730" endtime="20191218 17:44:23.733"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191218 17:44:23.736" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191218 17:44:23.734" endtime="20191218 17:44:27.468"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191218 17:44:27.468" endtime="20191218 17:44:28.621"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191218 17:44:29.622" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191218 17:44:28.621" endtime="20191218 17:44:29.623"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191218 17:44:29.664" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191218 17:44:29.627" endtime="20191218 17:44:29.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191218 17:44:29.665" endtime="20191218 17:44:29.665"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191218 17:44:29.685" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191218 17:44:29.666" endtime="20191218 17:44:29.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191218 17:44:29.686" endtime="20191218 17:44:29.687"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191218 17:44:29.706" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191218 17:44:29.687" endtime="20191218 17:44:29.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191218 17:44:29.707" endtime="20191218 17:44:29.707"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:29.624" endtime="20191218 17:44:29.708"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191218 17:44:29.725" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191218 17:44:29.710" endtime="20191218 17:44:29.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191218 17:44:29.727" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191218 17:44:29.727" endtime="20191218 17:44:29.802"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191218 17:44:30.805" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191218 17:44:29.803" endtime="20191218 17:44:30.806"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:29.802" endtime="20191218 17:44:30.807"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:29.727" endtime="20191218 17:44:30.808"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:29.726" endtime="20191218 17:44:30.809"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:29.709" endtime="20191218 17:44:30.810"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:29.708" endtime="20191218 17:44:30.811"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:23.729" endtime="20191218 17:44:30.812"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:22.265" endtime="20191218 17:44:30.813"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191218 17:44:30.818" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191218 17:44:30.816" endtime="20191218 17:44:30.898"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191218 17:44:31.900" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191218 17:44:30.899" endtime="20191218 17:44:31.900"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:30.898" endtime="20191218 17:44:31.901"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:30.815" endtime="20191218 17:44:31.902"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20191218 17:44:31.906" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20191218 17:44:31.905" endtime="20191218 17:44:31.907"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20191218 17:44:31.909" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20191218 17:44:31.908" endtime="20191218 17:44:31.909"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191218 17:44:31.915" level="INFO">Length is 12</msg>
<msg timestamp="20191218 17:44:31.916" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191218 17:44:31.915" endtime="20191218 17:44:31.916"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191218 17:44:31.924" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:31.923" endtime="20191218 17:44:31.925"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:31.918" endtime="20191218 17:44:31.925"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:31.917" endtime="20191218 17:44:31.925"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:31.917" endtime="20191218 17:44:31.926"></status>
</kw>
<msg timestamp="20191218 17:44:31.927" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191218 17:44:31.913" endtime="20191218 17:44:31.928"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191218 17:44:31.929" level="INFO">1</msg>
<status status="PASS" starttime="20191218 17:44:31.929" endtime="20191218 17:44:31.930"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191218 17:44:31.932" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191218 17:44:31.931" endtime="20191218 17:44:31.932"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191218 17:44:31.934" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191218 17:44:31.933" endtime="20191218 17:44:31.934"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191218 17:44:31.958" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191218 17:44:31.936" endtime="20191218 17:44:31.958"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191218 17:44:33.960" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:31.959" endtime="20191218 17:44:33.960"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191218 17:44:33.961" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:33.960" endtime="20191218 17:44:33.961"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:31.935" endtime="20191218 17:44:33.961"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:31.911" endtime="20191218 17:44:33.962"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:31.911" endtime="20191218 17:44:33.962"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191218 17:44:33.964" level="INFO">Length is 12</msg>
<msg timestamp="20191218 17:44:33.964" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191218 17:44:33.963" endtime="20191218 17:44:33.964"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191218 17:44:33.967" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:33.966" endtime="20191218 17:44:33.967"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:33.965" endtime="20191218 17:44:33.967"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:33.964" endtime="20191218 17:44:33.967"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:33.964" endtime="20191218 17:44:33.967"></status>
</kw>
<msg timestamp="20191218 17:44:33.968" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191218 17:44:33.963" endtime="20191218 17:44:33.968"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191218 17:44:33.968" level="INFO">1</msg>
<status status="PASS" starttime="20191218 17:44:33.968" endtime="20191218 17:44:33.969"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191218 17:44:33.969" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191218 17:44:33.969" endtime="20191218 17:44:33.969"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191218 17:44:33.970" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191218 17:44:33.970" endtime="20191218 17:44:33.970"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191218 17:44:34.007" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191218 17:44:33.971" endtime="20191218 17:44:34.008"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191218 17:44:36.009" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:34.008" endtime="20191218 17:44:36.010"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191218 17:44:36.016" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:36.011" endtime="20191218 17:44:36.017"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:33.971" endtime="20191218 17:44:36.018"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:33.962" endtime="20191218 17:44:36.019"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:33.962" endtime="20191218 17:44:36.020"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191218 17:44:36.027" level="INFO">Length is 12</msg>
<msg timestamp="20191218 17:44:36.028" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191218 17:44:36.026" endtime="20191218 17:44:36.028"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191218 17:44:36.040" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:36.039" endtime="20191218 17:44:36.040"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:36.032" endtime="20191218 17:44:36.041"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:36.030" endtime="20191218 17:44:36.041"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:36.029" endtime="20191218 17:44:36.042"></status>
</kw>
<msg timestamp="20191218 17:44:36.044" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191218 17:44:36.024" endtime="20191218 17:44:36.045"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191218 17:44:36.049" level="INFO">1</msg>
<status status="PASS" starttime="20191218 17:44:36.046" endtime="20191218 17:44:36.049"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191218 17:44:36.051" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191218 17:44:36.050" endtime="20191218 17:44:36.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191218 17:44:36.052" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191218 17:44:36.052" endtime="20191218 17:44:36.053"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191218 17:44:36.074" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191218 17:44:36.054" endtime="20191218 17:44:36.074"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191218 17:44:38.076" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:36.075" endtime="20191218 17:44:38.076"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191218 17:44:38.077" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:38.077" endtime="20191218 17:44:38.077"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:36.053" endtime="20191218 17:44:38.078"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:36.022" endtime="20191218 17:44:38.078"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:36.021" endtime="20191218 17:44:38.078"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:31.910" endtime="20191218 17:44:38.078"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:31.903" endtime="20191218 17:44:38.078"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="Bulk Patching Page">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20191218 17:44:38.080" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20191218 17:44:38.079" endtime="20191218 17:44:38.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191218 17:44:38.094" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191218 17:44:38.081" endtime="20191218 17:44:38.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191218 17:44:38.096" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20191218 17:44:38.096" endtime="20191218 17:44:38.137"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191218 17:44:39.139" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191218 17:44:38.138" endtime="20191218 17:44:39.139"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:38.137" endtime="20191218 17:44:39.139"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:38.095" endtime="20191218 17:44:39.140"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:38.095" endtime="20191218 17:44:39.140"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:38.081" endtime="20191218 17:44:39.140"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:38.080" endtime="20191218 17:44:39.140"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191218 17:44:40.142" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191218 17:44:39.141" endtime="20191218 17:44:40.143"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:39.141" endtime="20191218 17:44:40.144"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:38.079" endtime="20191218 17:44:40.145"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="Virtual Panel definitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20191218 17:44:40.151" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20191218 17:44:40.150" endtime="20191218 17:44:40.152"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20191218 17:44:40.155" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20191218 17:44:40.153" endtime="20191218 17:44:40.155"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191218 17:44:40.164" level="INFO">Length is 12</msg>
<msg timestamp="20191218 17:44:40.165" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191218 17:44:40.163" endtime="20191218 17:44:40.165"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191218 17:44:40.176" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:40.175" endtime="20191218 17:44:40.177"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:40.169" endtime="20191218 17:44:40.177"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:40.167" endtime="20191218 17:44:40.178"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:40.166" endtime="20191218 17:44:40.178"></status>
</kw>
<msg timestamp="20191218 17:44:40.181" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191218 17:44:40.161" endtime="20191218 17:44:40.181"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191218 17:44:40.183" level="INFO">1</msg>
<status status="PASS" starttime="20191218 17:44:40.182" endtime="20191218 17:44:40.184"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191218 17:44:40.187" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191218 17:44:40.185" endtime="20191218 17:44:40.187"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191218 17:44:40.189" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191218 17:44:40.188" endtime="20191218 17:44:40.189"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191218 17:44:40.215" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191218 17:44:40.190" endtime="20191218 17:44:40.215"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191218 17:44:42.217" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:40.216" endtime="20191218 17:44:42.218"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191218 17:44:42.222" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:42.220" endtime="20191218 17:44:42.223"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:40.189" endtime="20191218 17:44:42.224"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:40.158" endtime="20191218 17:44:42.225"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:40.157" endtime="20191218 17:44:42.225"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191218 17:44:42.233" level="INFO">Length is 12</msg>
<msg timestamp="20191218 17:44:42.233" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191218 17:44:42.232" endtime="20191218 17:44:42.234"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191218 17:44:42.245" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:42.244" endtime="20191218 17:44:42.246"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:42.238" endtime="20191218 17:44:42.246"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:42.236" endtime="20191218 17:44:42.247"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:42.235" endtime="20191218 17:44:42.247"></status>
</kw>
<msg timestamp="20191218 17:44:42.250" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191218 17:44:42.229" endtime="20191218 17:44:42.250"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191218 17:44:42.253" level="INFO">1</msg>
<status status="PASS" starttime="20191218 17:44:42.251" endtime="20191218 17:44:42.253"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191218 17:44:42.257" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191218 17:44:42.255" endtime="20191218 17:44:42.257"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191218 17:44:42.258" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191218 17:44:42.257" endtime="20191218 17:44:42.258"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191218 17:44:42.276" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191218 17:44:42.259" endtime="20191218 17:44:42.276"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191218 17:44:44.278" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:42.277" endtime="20191218 17:44:44.279"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191218 17:44:44.282" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:44.280" endtime="20191218 17:44:44.283"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:42.259" endtime="20191218 17:44:44.284"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:42.227" endtime="20191218 17:44:44.285"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:42.226" endtime="20191218 17:44:44.285"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191218 17:44:44.293" level="INFO">Length is 12</msg>
<msg timestamp="20191218 17:44:44.294" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191218 17:44:44.292" endtime="20191218 17:44:44.294"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191218 17:44:44.300" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:44.300" endtime="20191218 17:44:44.301"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:44.297" endtime="20191218 17:44:44.301"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:44.296" endtime="20191218 17:44:44.301"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:44.295" endtime="20191218 17:44:44.302"></status>
</kw>
<msg timestamp="20191218 17:44:44.303" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191218 17:44:44.290" endtime="20191218 17:44:44.303"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191218 17:44:44.304" level="INFO">1</msg>
<status status="PASS" starttime="20191218 17:44:44.304" endtime="20191218 17:44:44.305"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191218 17:44:44.306" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191218 17:44:44.305" endtime="20191218 17:44:44.306"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191218 17:44:44.307" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191218 17:44:44.307" endtime="20191218 17:44:44.308"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191218 17:44:44.324" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191218 17:44:44.309" endtime="20191218 17:44:44.324"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191218 17:44:46.327" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:44.325" endtime="20191218 17:44:46.328"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191218 17:44:46.332" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:46.330" endtime="20191218 17:44:46.332"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:44.308" endtime="20191218 17:44:46.333"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:44.288" endtime="20191218 17:44:46.334"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:44.287" endtime="20191218 17:44:46.335"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:40.156" endtime="20191218 17:44:46.336"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:40.147" endtime="20191218 17:44:46.337"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;6&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191218 17:44:46.344" level="INFO">Length is 12</msg>
<msg timestamp="20191218 17:44:46.345" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191218 17:44:46.343" endtime="20191218 17:44:46.346"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191218 17:44:46.356" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:46.355" endtime="20191218 17:44:46.357"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:46.349" endtime="20191218 17:44:46.357"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:46.347" endtime="20191218 17:44:46.358"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:46.346" endtime="20191218 17:44:46.358"></status>
</kw>
<msg timestamp="20191218 17:44:46.361" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191218 17:44:46.340" endtime="20191218 17:44:46.361"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191218 17:44:46.364" level="INFO">1</msg>
<status status="PASS" starttime="20191218 17:44:46.362" endtime="20191218 17:44:46.364"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191218 17:44:46.367" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191218 17:44:46.365" endtime="20191218 17:44:46.367"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191218 17:44:46.368" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191218 17:44:46.368" endtime="20191218 17:44:46.368"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191218 17:44:46.380" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191218 17:44:46.370" endtime="20191218 17:44:46.380"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191218 17:44:48.383" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:46.381" endtime="20191218 17:44:48.384"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191218 17:44:48.387" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:48.385" endtime="20191218 17:44:48.387"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:46.369" endtime="20191218 17:44:48.388"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:46.339" endtime="20191218 17:44:48.389"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191218 17:44:48.394" level="INFO">Length is 12</msg>
<msg timestamp="20191218 17:44:48.395" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191218 17:44:48.393" endtime="20191218 17:44:48.395"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191218 17:44:48.404" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:48.403" endtime="20191218 17:44:48.404"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:48.398" endtime="20191218 17:44:48.405"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:48.397" endtime="20191218 17:44:48.405"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:48.396" endtime="20191218 17:44:48.406"></status>
</kw>
<msg timestamp="20191218 17:44:48.407" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191218 17:44:48.392" endtime="20191218 17:44:48.407"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191218 17:44:48.408" level="INFO">1</msg>
<status status="PASS" starttime="20191218 17:44:48.407" endtime="20191218 17:44:48.408"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191218 17:44:48.409" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191218 17:44:48.408" endtime="20191218 17:44:48.409"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191218 17:44:48.410" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191218 17:44:48.409" endtime="20191218 17:44:48.410"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191218 17:44:48.426" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191218 17:44:48.411" endtime="20191218 17:44:48.427"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191218 17:44:50.429" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:48.427" endtime="20191218 17:44:50.430"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191218 17:44:50.433" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:50.431" endtime="20191218 17:44:50.434"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:48.410" endtime="20191218 17:44:50.435"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:48.390" endtime="20191218 17:44:50.436"></status>
</kw>
<kw name="And Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191218 17:44:50.466" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191218 17:44:50.442" endtime="20191218 17:44:50.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191218 17:44:50.470" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191218 17:44:50.469" endtime="20191218 17:44:50.520"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191218 17:44:51.523" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191218 17:44:50.521" endtime="20191218 17:44:51.524"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:50.521" endtime="20191218 17:44:51.525"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:50.468" endtime="20191218 17:44:51.526"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:50.467" endtime="20191218 17:44:51.527"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:50.439" endtime="20191218 17:44:51.528"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191218 17:44:52.534" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191218 17:44:51.531" endtime="20191218 17:44:52.535"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:51.529" endtime="20191218 17:44:52.536"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:50.438" endtime="20191218 17:44:52.537"></status>
</kw>
<kw name="And Go To Confirm Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnConfirm}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191218 17:44:52.581" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191218 17:44:52.543" endtime="20191218 17:44:52.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191218 17:44:52.584" level="INFO">Clicking element '//div[@id='confirms' and @style='visibility: visible;']//input[@type='submit']'.</msg>
<status status="PASS" starttime="20191218 17:44:52.584" endtime="20191218 17:44:52.640"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191218 17:44:53.643" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191218 17:44:52.641" endtime="20191218 17:44:53.644"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:52.640" endtime="20191218 17:44:53.645"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:52.583" endtime="20191218 17:44:53.646"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:52.582" endtime="20191218 17:44:53.647"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:52.541" endtime="20191218 17:44:53.648"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:52.538" endtime="20191218 17:44:53.649"></status>
</kw>
<kw name="Then Check The Number of Confirm is &quot;2&quot;" library="General definitions">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Value Should Be</arg>
<arg>${btnConfirm}</arg>
<arg>value</arg>
<arg>${confirm number}</arg>
</arguments>
<kw name="Element Attribute Value Should Be" library="SeleniumLibrary">
<doc>Verifies element identified by ``locator`` contains expected attribute value.</doc>
<arguments>
<arg>${btnConfirm}</arg>
<arg>value</arg>
<arg>${confirm number}</arg>
</arguments>
<msg timestamp="20191218 17:44:53.705" level="INFO">Element '//div[@id='confirms' and @style='visibility: visible;']//input[@type='submit']' attribute 'value' contains value '2'.</msg>
<status status="PASS" starttime="20191218 17:44:53.654" endtime="20191218 17:44:53.706"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.652" endtime="20191218 17:44:53.706"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.650" endtime="20191218 17:44:53.707"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot; &quot;appeared&quot; in Confirm list" library="Confirm definitions">
<doc>This keyword is used to check the information of Copper panel displaying in Confirm list screen</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191218 17:44:53.712" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191218 17:44:53.711" endtime="20191218 17:44:53.713"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191218 17:44:53.716" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191218 17:44:53.714" endtime="20191218 17:44:53.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${portID} &lt; 10</arg>
<arg>Catenate</arg>
<arg>SEPARATOR=${SPACE}${SPACE}</arg>
<arg>-Port</arg>
<arg>${portID}</arg>
<arg>ELSE</arg>
<arg>Catenate</arg>
<arg>SEPARATOR=${SPACE}</arg>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${SPACE}${SPACE}</arg>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<status status="PASS" starttime="20191218 17:44:53.719" endtime="20191218 17:44:53.719"></status>
</kw>
<msg timestamp="20191218 17:44:53.720" level="INFO">${input port} = -Port  4</msg>
<status status="PASS" starttime="20191218 17:44:53.717" endtime="20191218 17:44:53.720"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191218 17:44:53.721" level="INFO">${input port information} = Rack 1-Panel 1-Port  4</msg>
<status status="PASS" starttime="20191218 17:44:53.721" endtime="20191218 17:44:53.722"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic confirm port position}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191218 17:44:53.723" level="INFO">${xPath syntax1} = //input[@value='Rack 1-Panel 1-Port  4 ']</msg>
<status status="PASS" starttime="20191218 17:44:53.722" endtime="20191218 17:44:53.723"></status>
</kw>
<kw name="Number of Confirm Pages" library="Confirm definitions">
<assign>
<var>${number of confirm page}</var>
</assign>
<kw name="Get Element Attribute" library="SeleniumLibrary">
<doc>Returns the value of ``attribute`` from the element ``locator``.</doc>
<arguments>
<arg>${btnConfirm}</arg>
<arg>value</arg>
</arguments>
<assign>
<var>${confirm number}</var>
</assign>
<msg timestamp="20191218 17:44:53.748" level="INFO">${confirm number} = 2</msg>
<status status="PASS" starttime="20191218 17:44:53.725" endtime="20191218 17:44:53.748"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${confirm number}</arg>
</arguments>
<assign>
<var>${int confirm number}</var>
</assign>
<msg timestamp="20191218 17:44:53.749" level="INFO">${int confirm number} = 2</msg>
<status status="PASS" starttime="20191218 17:44:53.749" endtime="20191218 17:44:53.749"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int((${int confirm number}/7)+1)</arg>
</arguments>
<assign>
<var>${int page number}</var>
</assign>
<msg timestamp="20191218 17:44:53.751" level="INFO">${int page number} = 1</msg>
<status status="PASS" starttime="20191218 17:44:53.749" endtime="20191218 17:44:53.751"></status>
</kw>
<msg timestamp="20191218 17:44:53.751" level="INFO">${number of confirm page} = 1</msg>
<status status="PASS" starttime="20191218 17:44:53.724" endtime="20191218 17:44:53.751"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191218 17:44:53.751" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191218 17:44:53.751" endtime="20191218 17:44:53.751"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of confirm page} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191218 17:44:53.766" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191218 17:44:53.752" endtime="20191218 17:44:53.766"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191218 17:44:53.768" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:53.767" endtime="20191218 17:44:53.768"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.752" endtime="20191218 17:44:53.768"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.751" endtime="20191218 17:44:53.768"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191218 17:44:53.769" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191218 17:44:53.769" endtime="20191218 17:44:53.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191218 17:44:53.771" endtime="20191218 17:44:53.771"></status>
</kw>
<msg timestamp="20191218 17:44:53.771" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191218 17:44:53.770" endtime="20191218 17:44:53.772"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20191218 17:44:53.773" endtime="20191218 17:44:53.773"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.772" endtime="20191218 17:44:53.773"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.709" endtime="20191218 17:44:53.774"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot; &quot;appeared&quot; in Confirm list" library="Confirm definitions">
<doc>This keyword is used to check the information of Copper panel displaying in Confirm list screen</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191218 17:44:53.775" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191218 17:44:53.775" endtime="20191218 17:44:53.776"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191218 17:44:53.776" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191218 17:44:53.776" endtime="20191218 17:44:53.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${portID} &lt; 10</arg>
<arg>Catenate</arg>
<arg>SEPARATOR=${SPACE}${SPACE}</arg>
<arg>-Port</arg>
<arg>${portID}</arg>
<arg>ELSE</arg>
<arg>Catenate</arg>
<arg>SEPARATOR=${SPACE}</arg>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${SPACE}${SPACE}</arg>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<status status="PASS" starttime="20191218 17:44:53.777" endtime="20191218 17:44:53.778"></status>
</kw>
<msg timestamp="20191218 17:44:53.778" level="INFO">${input port} = -Port  3</msg>
<status status="PASS" starttime="20191218 17:44:53.777" endtime="20191218 17:44:53.778"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191218 17:44:53.779" level="INFO">${input port information} = Rack 1-Panel 1-Port  3</msg>
<status status="PASS" starttime="20191218 17:44:53.778" endtime="20191218 17:44:53.779"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic confirm port position}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191218 17:44:53.779" level="INFO">${xPath syntax1} = //input[@value='Rack 1-Panel 1-Port  3 ']</msg>
<status status="PASS" starttime="20191218 17:44:53.779" endtime="20191218 17:44:53.780"></status>
</kw>
<kw name="Number of Confirm Pages" library="Confirm definitions">
<assign>
<var>${number of confirm page}</var>
</assign>
<kw name="Get Element Attribute" library="SeleniumLibrary">
<doc>Returns the value of ``attribute`` from the element ``locator``.</doc>
<arguments>
<arg>${btnConfirm}</arg>
<arg>value</arg>
</arguments>
<assign>
<var>${confirm number}</var>
</assign>
<msg timestamp="20191218 17:44:53.791" level="INFO">${confirm number} = 2</msg>
<status status="PASS" starttime="20191218 17:44:53.780" endtime="20191218 17:44:53.792"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${confirm number}</arg>
</arguments>
<assign>
<var>${int confirm number}</var>
</assign>
<msg timestamp="20191218 17:44:53.792" level="INFO">${int confirm number} = 2</msg>
<status status="PASS" starttime="20191218 17:44:53.792" endtime="20191218 17:44:53.793"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int((${int confirm number}/7)+1)</arg>
</arguments>
<assign>
<var>${int page number}</var>
</assign>
<msg timestamp="20191218 17:44:53.793" level="INFO">${int page number} = 1</msg>
<status status="PASS" starttime="20191218 17:44:53.793" endtime="20191218 17:44:53.793"></status>
</kw>
<msg timestamp="20191218 17:44:53.794" level="INFO">${number of confirm page} = 1</msg>
<status status="PASS" starttime="20191218 17:44:53.780" endtime="20191218 17:44:53.794"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191218 17:44:53.794" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191218 17:44:53.794" endtime="20191218 17:44:53.794"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of confirm page} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191218 17:44:53.806" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191218 17:44:53.795" endtime="20191218 17:44:53.806"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191218 17:44:53.807" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:53.806" endtime="20191218 17:44:53.807"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.795" endtime="20191218 17:44:53.807"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.795" endtime="20191218 17:44:53.807"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191218 17:44:53.808" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191218 17:44:53.807" endtime="20191218 17:44:53.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191218 17:44:53.809" endtime="20191218 17:44:53.809"></status>
</kw>
<msg timestamp="20191218 17:44:53.809" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191218 17:44:53.808" endtime="20191218 17:44:53.809"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20191218 17:44:53.810" endtime="20191218 17:44:53.811"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.810" endtime="20191218 17:44:53.811"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.774" endtime="20191218 17:44:53.811"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191218 17:44:53.813" level="INFO">Length is 12</msg>
<msg timestamp="20191218 17:44:53.813" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191218 17:44:53.812" endtime="20191218 17:44:53.813"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191218 17:44:53.815" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:53.815" endtime="20191218 17:44:53.815"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.814" endtime="20191218 17:44:53.816"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.813" endtime="20191218 17:44:53.816"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.813" endtime="20191218 17:44:53.816"></status>
</kw>
<msg timestamp="20191218 17:44:53.816" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191218 17:44:53.812" endtime="20191218 17:44:53.817"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191218 17:44:53.817" level="INFO">1</msg>
<status status="PASS" starttime="20191218 17:44:53.817" endtime="20191218 17:44:53.817"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191218 17:44:53.818" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191218 17:44:53.817" endtime="20191218 17:44:53.818"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191218 17:44:53.818" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191218 17:44:53.818" endtime="20191218 17:44:53.819"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191218 17:44:53.854" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191218 17:44:53.819" endtime="20191218 17:44:53.854"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191218 17:44:55.856" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:53.855" endtime="20191218 17:44:55.857"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191218 17:44:55.860" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:55.858" endtime="20191218 17:44:55.861"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.819" endtime="20191218 17:44:55.862"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:53.811" endtime="20191218 17:44:55.863"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;5&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191218 17:44:55.870" level="INFO">Length is 12</msg>
<msg timestamp="20191218 17:44:55.871" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191218 17:44:55.869" endtime="20191218 17:44:55.871"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191218 17:44:55.881" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:55.880" endtime="20191218 17:44:55.882"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:55.874" endtime="20191218 17:44:55.882"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:55.873" endtime="20191218 17:44:55.883"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:55.872" endtime="20191218 17:44:55.884"></status>
</kw>
<msg timestamp="20191218 17:44:55.886" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191218 17:44:55.867" endtime="20191218 17:44:55.886"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191218 17:44:55.889" level="INFO">1</msg>
<status status="PASS" starttime="20191218 17:44:55.888" endtime="20191218 17:44:55.889"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191218 17:44:55.892" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191218 17:44:55.890" endtime="20191218 17:44:55.892"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191218 17:44:55.895" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191218 17:44:55.894" endtime="20191218 17:44:55.895"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191218 17:44:55.941" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191218 17:44:55.899" endtime="20191218 17:44:55.941"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191218 17:44:57.943" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:55.942" endtime="20191218 17:44:57.944"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191218 17:44:57.948" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:57.945" endtime="20191218 17:44:57.948"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:55.896" endtime="20191218 17:44:57.949"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:55.865" endtime="20191218 17:44:57.950"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191218 17:44:57.957" level="INFO">Length is 12</msg>
<msg timestamp="20191218 17:44:57.958" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191218 17:44:57.956" endtime="20191218 17:44:57.958"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191218 17:44:57.969" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:44:57.968" endtime="20191218 17:44:57.969"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:57.961" endtime="20191218 17:44:57.970"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:57.960" endtime="20191218 17:44:57.971"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:57.959" endtime="20191218 17:44:57.971"></status>
</kw>
<msg timestamp="20191218 17:44:57.973" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191218 17:44:57.954" endtime="20191218 17:44:57.974"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191218 17:44:57.976" level="INFO">1</msg>
<status status="PASS" starttime="20191218 17:44:57.975" endtime="20191218 17:44:57.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191218 17:44:57.979" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191218 17:44:57.978" endtime="20191218 17:44:57.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191218 17:44:57.980" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191218 17:44:57.980" endtime="20191218 17:44:57.981"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191218 17:44:58.002" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191218 17:44:57.983" endtime="20191218 17:44:58.003"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191218 17:45:00.007" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:44:58.004" endtime="20191218 17:45:00.007"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191218 17:45:00.011" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:45:00.009" endtime="20191218 17:45:00.012"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:57.981" endtime="20191218 17:45:00.013"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:57.952" endtime="20191218 17:45:00.014"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191218 17:45:00.019" level="INFO">Length is 12</msg>
<msg timestamp="20191218 17:45:00.019" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191218 17:45:00.019" endtime="20191218 17:45:00.019"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191218 17:45:00.024" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191218 17:45:00.023" endtime="20191218 17:45:00.024"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:00.021" endtime="20191218 17:45:00.024"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:00.020" endtime="20191218 17:45:00.025"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:00.020" endtime="20191218 17:45:00.025"></status>
</kw>
<msg timestamp="20191218 17:45:00.026" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191218 17:45:00.018" endtime="20191218 17:45:00.026"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191218 17:45:00.027" level="INFO">1</msg>
<status status="PASS" starttime="20191218 17:45:00.026" endtime="20191218 17:45:00.027"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191218 17:45:00.028" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191218 17:45:00.027" endtime="20191218 17:45:00.028"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191218 17:45:00.029" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191218 17:45:00.029" endtime="20191218 17:45:00.029"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191218 17:45:00.052" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191218 17:45:00.031" endtime="20191218 17:45:00.053"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191218 17:45:02.053" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:45:00.053" endtime="20191218 17:45:02.053"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191218 17:45:02.055" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191218 17:45:02.054" endtime="20191218 17:45:02.055"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:00.030" endtime="20191218 17:45:02.056"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:00.016" endtime="20191218 17:45:02.056"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191218 17:45:02.079" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191218 17:45:02.058" endtime="20191218 17:45:02.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191218 17:45:02.093" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191218 17:45:02.083" endtime="20191218 17:45:02.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191218 17:45:02.095" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191218 17:45:02.094" endtime="20191218 17:45:02.124"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191218 17:45:03.127" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191218 17:45:02.125" endtime="20191218 17:45:03.128"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:02.125" endtime="20191218 17:45:03.129"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:02.094" endtime="20191218 17:45:03.130"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:02.093" endtime="20191218 17:45:03.131"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:02.082" endtime="20191218 17:45:03.132"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191218 17:45:04.137" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191218 17:45:03.135" endtime="20191218 17:45:04.138"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:03.133" endtime="20191218 17:45:04.139"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:02.081" endtime="20191218 17:45:04.140"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:02.080" endtime="20191218 17:45:04.141"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191218 17:45:04.172" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191218 17:45:04.142" endtime="20191218 17:45:04.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191218 17:45:04.173" endtime="20191218 17:45:04.175"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191218 17:45:04.176" endtime="20191218 17:45:06.315"></status>
</kw>
<status status="PASS" starttime="20191218 17:45:02.057" endtime="20191218 17:45:06.317"></status>
</kw>
<status status="PASS" starttime="20191218 17:44:22.264" endtime="20191218 17:45:06.318" critical="yes"></status>
</test>
<status status="PASS" starttime="20191218 17:44:21.881" endtime="20191218 17:45:06.321"></status>
</suite>
<status status="PASS" starttime="20191218 17:44:21.879" endtime="20191218 17:45:06.329"></status>
</suite>
<status status="PASS" starttime="20191218 17:44:21.877" endtime="20191218 17:45:06.336"></status>
</suite>
<status status="PASS" starttime="20191218 17:44:21.875" endtime="20191218 17:45:06.341"></status>
</suite>
<status status="PASS" starttime="20191218 17:44:21.852" endtime="20191218 17:45:06.347"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="1" fail="0" id="s1-s1" name="Test Resources">BulkPatching Robot.Test Resources</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Test Suites">BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1" name="4. Exit Bulk Patchings Screen">BulkPatching Robot.Test Resources.Test Suites.4. Exit Bulk Patchings Screen</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1-s1" name="4.2. Check confirmation when number of patches on End B are less than End A">BulkPatching Robot.Test Resources.Test Suites.4. Exit Bulk Patchings Screen.4.2. Check confirmation when number of patches on End B are less than End A</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
