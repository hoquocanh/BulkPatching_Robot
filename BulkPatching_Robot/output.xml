<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20191219 15:28:40.297" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1" name="Test Resources" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources">
<suite id="s1-s1-s1" name="Test Suites" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites">
<suite id="s1-s1-s1-s1" name="4. Exit Bulk Patchings Screen" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\4. Exit Bulk Patchings Screen">
<suite id="s1-s1-s1-s1-s1" name="4.2. Check confirmation when number of patches on End B are less than End A" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\4. Exit Bulk Patchings Screen\4.2. Check confirmation when number of patches on End B are less than End A.robot">
<test id="s1-s1-s1-s1-s1-t1" name="Exit_Bulk_02_01_01_Verify that imVision X shall create a confirm port if any port in End A / End B list is in the local controller, and the port is un-patched after selecting Exit button when there is a 24-port Legacy Copper">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191219 15:28:40.735" endtime="20191219 15:28:40.735"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191219 15:28:40.736" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191219 15:28:42.211" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191219 15:28:40.736" endtime="20191219 15:28:42.211"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:40.734" endtime="20191219 15:28:42.212"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191219 15:28:42.215" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191219 15:28:42.214" endtime="20191219 15:28:42.216"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191219 15:28:42.217" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191219 15:28:42.216" endtime="20191219 15:28:46.507"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191219 15:28:46.508" endtime="20191219 15:28:47.661"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191219 15:28:48.664" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191219 15:28:47.662" endtime="20191219 15:28:48.664"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191219 15:28:48.703" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191219 15:28:48.667" endtime="20191219 15:28:48.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191219 15:28:48.705" endtime="20191219 15:28:48.706"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191219 15:28:48.739" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191219 15:28:48.707" endtime="20191219 15:28:48.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191219 15:28:48.741" endtime="20191219 15:28:48.742"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191219 15:28:48.765" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191219 15:28:48.743" endtime="20191219 15:28:48.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191219 15:28:48.766" endtime="20191219 15:28:48.767"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:48.665" endtime="20191219 15:28:48.767"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191219 15:28:48.786" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191219 15:28:48.770" endtime="20191219 15:28:48.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191219 15:28:48.789" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191219 15:28:48.788" endtime="20191219 15:28:48.861"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191219 15:28:49.865" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191219 15:28:48.862" endtime="20191219 15:28:49.866"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:48.862" endtime="20191219 15:28:49.867"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:48.788" endtime="20191219 15:28:49.868"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:48.787" endtime="20191219 15:28:49.869"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:48.787" endtime="20191219 15:28:49.870"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:48.769" endtime="20191219 15:28:49.871"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:48.768" endtime="20191219 15:28:49.872"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:42.213" endtime="20191219 15:28:49.873"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:40.734" endtime="20191219 15:28:49.874"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191219 15:28:49.879" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191219 15:28:49.878" endtime="20191219 15:28:49.947"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191219 15:28:50.950" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191219 15:28:49.948" endtime="20191219 15:28:50.950"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:49.948" endtime="20191219 15:28:50.951"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:49.876" endtime="20191219 15:28:50.951"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20191219 15:28:50.954" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20191219 15:28:50.954" endtime="20191219 15:28:50.955"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20191219 15:28:50.956" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20191219 15:28:50.956" endtime="20191219 15:28:50.957"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191219 15:28:50.962" level="INFO">Length is 12</msg>
<msg timestamp="20191219 15:28:50.963" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191219 15:28:50.962" endtime="20191219 15:28:50.963"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191219 15:28:50.968" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:28:50.968" endtime="20191219 15:28:50.969"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:50.964" endtime="20191219 15:28:50.969"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:50.964" endtime="20191219 15:28:50.969"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:50.963" endtime="20191219 15:28:50.969"></status>
</kw>
<msg timestamp="20191219 15:28:50.970" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191219 15:28:50.961" endtime="20191219 15:28:50.971"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191219 15:28:50.972" level="INFO">1</msg>
<status status="PASS" starttime="20191219 15:28:50.971" endtime="20191219 15:28:50.972"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191219 15:28:50.973" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191219 15:28:50.972" endtime="20191219 15:28:50.973"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191219 15:28:50.975" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191219 15:28:50.974" endtime="20191219 15:28:50.975"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191219 15:28:50.999" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191219 15:28:50.975" endtime="20191219 15:28:50.999"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191219 15:28:53.001" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:28:51.000" endtime="20191219 15:28:53.002"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191219 15:28:53.006" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:28:53.003" endtime="20191219 15:28:53.006"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:50.975" endtime="20191219 15:28:53.007"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:50.960" endtime="20191219 15:28:53.008"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:50.959" endtime="20191219 15:28:53.009"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191219 15:28:53.017" level="INFO">Length is 12</msg>
<msg timestamp="20191219 15:28:53.017" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191219 15:28:53.015" endtime="20191219 15:28:53.018"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191219 15:28:53.028" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:28:53.027" endtime="20191219 15:28:53.029"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:53.021" endtime="20191219 15:28:53.029"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:53.020" endtime="20191219 15:28:53.030"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:53.018" endtime="20191219 15:28:53.031"></status>
</kw>
<msg timestamp="20191219 15:28:53.033" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191219 15:28:53.013" endtime="20191219 15:28:53.033"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191219 15:28:53.036" level="INFO">1</msg>
<status status="PASS" starttime="20191219 15:28:53.034" endtime="20191219 15:28:53.036"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191219 15:28:53.039" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191219 15:28:53.037" endtime="20191219 15:28:53.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191219 15:28:53.042" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191219 15:28:53.041" endtime="20191219 15:28:53.042"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191219 15:28:53.075" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191219 15:28:53.045" endtime="20191219 15:28:53.076"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191219 15:28:55.077" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:28:53.076" endtime="20191219 15:28:55.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191219 15:28:55.079" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:28:55.078" endtime="20191219 15:28:55.079"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:53.043" endtime="20191219 15:28:55.080"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:53.011" endtime="20191219 15:28:55.080"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:53.010" endtime="20191219 15:28:55.080"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191219 15:28:55.082" level="INFO">Length is 12</msg>
<msg timestamp="20191219 15:28:55.082" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191219 15:28:55.082" endtime="20191219 15:28:55.082"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191219 15:28:55.085" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:28:55.085" endtime="20191219 15:28:55.085"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:55.083" endtime="20191219 15:28:55.085"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:55.083" endtime="20191219 15:28:55.085"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:55.082" endtime="20191219 15:28:55.086"></status>
</kw>
<msg timestamp="20191219 15:28:55.086" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191219 15:28:55.081" endtime="20191219 15:28:55.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191219 15:28:55.087" level="INFO">1</msg>
<status status="PASS" starttime="20191219 15:28:55.087" endtime="20191219 15:28:55.087"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191219 15:28:55.088" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191219 15:28:55.087" endtime="20191219 15:28:55.088"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191219 15:28:55.089" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191219 15:28:55.088" endtime="20191219 15:28:55.089"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191219 15:28:55.130" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191219 15:28:55.090" endtime="20191219 15:28:55.131"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191219 15:28:57.133" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:28:55.131" endtime="20191219 15:28:57.133"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191219 15:28:57.134" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:28:57.133" endtime="20191219 15:28:57.134"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:55.089" endtime="20191219 15:28:57.134"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:55.081" endtime="20191219 15:28:57.135"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:55.080" endtime="20191219 15:28:57.135"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:50.959" endtime="20191219 15:28:57.135"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:50.952" endtime="20191219 15:28:57.135"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="Bulk Patching Page">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20191219 15:28:57.136" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20191219 15:28:57.136" endtime="20191219 15:28:57.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191219 15:28:57.152" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191219 15:28:57.138" endtime="20191219 15:28:57.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191219 15:28:57.154" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20191219 15:28:57.154" endtime="20191219 15:28:57.193"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191219 15:28:58.195" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191219 15:28:57.194" endtime="20191219 15:28:58.195"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:57.193" endtime="20191219 15:28:58.195"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:57.154" endtime="20191219 15:28:58.196"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:57.153" endtime="20191219 15:28:58.196"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:57.153" endtime="20191219 15:28:58.196"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:57.137" endtime="20191219 15:28:58.196"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:57.137" endtime="20191219 15:28:58.197"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191219 15:28:59.198" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191219 15:28:58.197" endtime="20191219 15:28:59.199"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:58.197" endtime="20191219 15:28:59.200"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:57.136" endtime="20191219 15:28:59.201"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="Virtual Panel definitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20191219 15:28:59.207" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20191219 15:28:59.205" endtime="20191219 15:28:59.208"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20191219 15:28:59.211" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20191219 15:28:59.209" endtime="20191219 15:28:59.211"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191219 15:28:59.220" level="INFO">Length is 12</msg>
<msg timestamp="20191219 15:28:59.221" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191219 15:28:59.219" endtime="20191219 15:28:59.221"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191219 15:28:59.228" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:28:59.228" endtime="20191219 15:28:59.229"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:59.224" endtime="20191219 15:28:59.229"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:59.223" endtime="20191219 15:28:59.229"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:59.222" endtime="20191219 15:28:59.230"></status>
</kw>
<msg timestamp="20191219 15:28:59.231" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191219 15:28:59.217" endtime="20191219 15:28:59.231"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191219 15:28:59.232" level="INFO">1</msg>
<status status="PASS" starttime="20191219 15:28:59.232" endtime="20191219 15:28:59.233"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191219 15:28:59.234" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191219 15:28:59.233" endtime="20191219 15:28:59.234"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191219 15:28:59.236" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191219 15:28:59.235" endtime="20191219 15:28:59.236"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191219 15:28:59.249" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191219 15:28:59.237" endtime="20191219 15:28:59.249"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191219 15:29:01.252" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:28:59.250" endtime="20191219 15:29:01.253"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191219 15:29:01.256" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:01.254" endtime="20191219 15:29:01.257"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:59.237" endtime="20191219 15:29:01.258"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:59.215" endtime="20191219 15:29:01.259"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:59.214" endtime="20191219 15:29:01.260"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191219 15:29:01.267" level="INFO">Length is 12</msg>
<msg timestamp="20191219 15:29:01.268" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191219 15:29:01.266" endtime="20191219 15:29:01.268"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191219 15:29:01.279" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:29:01.278" endtime="20191219 15:29:01.280"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:01.272" endtime="20191219 15:29:01.280"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:01.270" endtime="20191219 15:29:01.281"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:01.269" endtime="20191219 15:29:01.282"></status>
</kw>
<msg timestamp="20191219 15:29:01.284" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191219 15:29:01.264" endtime="20191219 15:29:01.284"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191219 15:29:01.287" level="INFO">1</msg>
<status status="PASS" starttime="20191219 15:29:01.286" endtime="20191219 15:29:01.287"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191219 15:29:01.290" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191219 15:29:01.289" endtime="20191219 15:29:01.291"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191219 15:29:01.293" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191219 15:29:01.292" endtime="20191219 15:29:01.294"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191219 15:29:01.339" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191219 15:29:01.296" endtime="20191219 15:29:01.339"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191219 15:29:03.341" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:01.340" endtime="20191219 15:29:03.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191219 15:29:03.345" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:03.343" endtime="20191219 15:29:03.346"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:01.295" endtime="20191219 15:29:03.347"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:01.262" endtime="20191219 15:29:03.348"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:01.260" endtime="20191219 15:29:03.349"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191219 15:29:03.356" level="INFO">Length is 12</msg>
<msg timestamp="20191219 15:29:03.357" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191219 15:29:03.355" endtime="20191219 15:29:03.357"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191219 15:29:03.367" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:29:03.366" endtime="20191219 15:29:03.367"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:03.360" endtime="20191219 15:29:03.367"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:03.359" endtime="20191219 15:29:03.368"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:03.358" endtime="20191219 15:29:03.368"></status>
</kw>
<msg timestamp="20191219 15:29:03.369" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191219 15:29:03.353" endtime="20191219 15:29:03.369"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191219 15:29:03.370" level="INFO">1</msg>
<status status="PASS" starttime="20191219 15:29:03.370" endtime="20191219 15:29:03.370"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191219 15:29:03.372" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191219 15:29:03.371" endtime="20191219 15:29:03.372"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191219 15:29:03.373" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191219 15:29:03.372" endtime="20191219 15:29:03.373"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191219 15:29:03.407" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191219 15:29:03.375" endtime="20191219 15:29:03.407"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191219 15:29:05.409" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:03.408" endtime="20191219 15:29:05.410"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191219 15:29:05.414" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:05.412" endtime="20191219 15:29:05.415"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:03.374" endtime="20191219 15:29:05.416"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:03.351" endtime="20191219 15:29:05.417"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:03.349" endtime="20191219 15:29:05.418"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:59.212" endtime="20191219 15:29:05.418"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:59.203" endtime="20191219 15:29:05.419"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;6&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191219 15:29:05.427" level="INFO">Length is 12</msg>
<msg timestamp="20191219 15:29:05.428" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191219 15:29:05.425" endtime="20191219 15:29:05.428"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191219 15:29:05.437" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:29:05.436" endtime="20191219 15:29:05.437"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:05.431" endtime="20191219 15:29:05.437"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:05.430" endtime="20191219 15:29:05.438"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:05.429" endtime="20191219 15:29:05.438"></status>
</kw>
<msg timestamp="20191219 15:29:05.439" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191219 15:29:05.423" endtime="20191219 15:29:05.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191219 15:29:05.440" level="INFO">1</msg>
<status status="PASS" starttime="20191219 15:29:05.440" endtime="20191219 15:29:05.441"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191219 15:29:05.442" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191219 15:29:05.441" endtime="20191219 15:29:05.442"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191219 15:29:05.444" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191219 15:29:05.443" endtime="20191219 15:29:05.444"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191219 15:29:05.458" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191219 15:29:05.446" endtime="20191219 15:29:05.458"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191219 15:29:07.462" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:05.459" endtime="20191219 15:29:07.462"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191219 15:29:07.464" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:07.463" endtime="20191219 15:29:07.464"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:05.445" endtime="20191219 15:29:07.464"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:05.421" endtime="20191219 15:29:07.465"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191219 15:29:07.467" level="INFO">Length is 12</msg>
<msg timestamp="20191219 15:29:07.468" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191219 15:29:07.467" endtime="20191219 15:29:07.468"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191219 15:29:07.472" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:29:07.471" endtime="20191219 15:29:07.472"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:07.469" endtime="20191219 15:29:07.472"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:07.469" endtime="20191219 15:29:07.473"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:07.468" endtime="20191219 15:29:07.473"></status>
</kw>
<msg timestamp="20191219 15:29:07.474" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191219 15:29:07.466" endtime="20191219 15:29:07.474"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191219 15:29:07.475" level="INFO">1</msg>
<status status="PASS" starttime="20191219 15:29:07.474" endtime="20191219 15:29:07.475"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191219 15:29:07.476" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191219 15:29:07.476" endtime="20191219 15:29:07.476"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191219 15:29:07.477" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191219 15:29:07.476" endtime="20191219 15:29:07.477"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191219 15:29:07.511" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191219 15:29:07.478" endtime="20191219 15:29:07.511"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191219 15:29:09.513" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:07.512" endtime="20191219 15:29:09.514"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191219 15:29:09.516" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:09.515" endtime="20191219 15:29:09.517"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:07.477" endtime="20191219 15:29:09.517"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:07.465" endtime="20191219 15:29:09.518"></status>
</kw>
<kw name="And Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191219 15:29:09.535" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191219 15:29:09.520" endtime="20191219 15:29:09.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191219 15:29:09.539" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191219 15:29:09.538" endtime="20191219 15:29:09.581"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191219 15:29:10.583" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191219 15:29:09.582" endtime="20191219 15:29:10.583"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:09.581" endtime="20191219 15:29:10.584"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:09.538" endtime="20191219 15:29:10.585"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:09.537" endtime="20191219 15:29:10.585"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:09.536" endtime="20191219 15:29:10.586"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:09.519" endtime="20191219 15:29:10.586"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191219 15:29:11.590" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191219 15:29:10.588" endtime="20191219 15:29:11.591"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:10.587" endtime="20191219 15:29:11.592"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:09.518" endtime="20191219 15:29:11.593"></status>
</kw>
<kw name="And Go To Confirm Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnConfirm}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191219 15:29:11.629" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191219 15:29:11.599" endtime="20191219 15:29:11.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191219 15:29:11.634" level="INFO">Clicking element '//div[@id='confirms' and @style='visibility: visible;']//input[@type='submit']'.</msg>
<status status="PASS" starttime="20191219 15:29:11.633" endtime="20191219 15:29:11.685"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191219 15:29:12.687" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191219 15:29:11.686" endtime="20191219 15:29:12.688"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:11.685" endtime="20191219 15:29:12.689"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:11.632" endtime="20191219 15:29:12.690"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:11.631" endtime="20191219 15:29:12.691"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:11.630" endtime="20191219 15:29:12.691"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:11.597" endtime="20191219 15:29:12.692"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:11.595" endtime="20191219 15:29:12.693"></status>
</kw>
<kw name="Then Check The Number of Confirm is &quot;2&quot;" library="General definitions">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Value Should Be</arg>
<arg>${btnConfirm}</arg>
<arg>value</arg>
<arg>${confirm number}</arg>
</arguments>
<kw name="Element Attribute Value Should Be" library="SeleniumLibrary">
<doc>Verifies element identified by ``locator`` contains expected attribute value.</doc>
<arguments>
<arg>${btnConfirm}</arg>
<arg>value</arg>
<arg>${confirm number}</arg>
</arguments>
<msg timestamp="20191219 15:29:12.728" level="INFO">Element '//div[@id='confirms' and @style='visibility: visible;']//input[@type='submit']' attribute 'value' contains value '2'.</msg>
<status status="PASS" starttime="20191219 15:29:12.697" endtime="20191219 15:29:12.728"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.696" endtime="20191219 15:29:12.729"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.695" endtime="20191219 15:29:12.729"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot; &quot;appeared&quot; in Confirm list" library="Confirm definitions">
<doc>This keyword is used to check the information of Copper panel displaying in Confirm list screen</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191219 15:29:12.731" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191219 15:29:12.730" endtime="20191219 15:29:12.731"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191219 15:29:12.732" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191219 15:29:12.732" endtime="20191219 15:29:12.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${portID} &lt; 10</arg>
<arg>Catenate</arg>
<arg>SEPARATOR=${SPACE}${SPACE}</arg>
<arg>-Port</arg>
<arg>${portID}</arg>
<arg>ELSE</arg>
<arg>Catenate</arg>
<arg>SEPARATOR=${SPACE}</arg>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${SPACE}${SPACE}</arg>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<status status="PASS" starttime="20191219 15:29:12.734" endtime="20191219 15:29:12.734"></status>
</kw>
<msg timestamp="20191219 15:29:12.735" level="INFO">${input port} = -Port  4</msg>
<status status="PASS" starttime="20191219 15:29:12.733" endtime="20191219 15:29:12.735"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191219 15:29:12.736" level="INFO">${input port information} = Rack 1-Panel 1-Port  4</msg>
<status status="PASS" starttime="20191219 15:29:12.735" endtime="20191219 15:29:12.736"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic confirm port position}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191219 15:29:12.737" level="INFO">${xPath syntax1} = //input[@value='Rack 1-Panel 1-Port  4 ']</msg>
<status status="PASS" starttime="20191219 15:29:12.736" endtime="20191219 15:29:12.737"></status>
</kw>
<kw name="Number of Confirm Pages" library="Confirm definitions">
<assign>
<var>${number of confirm page}</var>
</assign>
<kw name="Get Element Attribute" library="SeleniumLibrary">
<doc>Returns the value of ``attribute`` from the element ``locator``.</doc>
<arguments>
<arg>${btnConfirm}</arg>
<arg>value</arg>
</arguments>
<assign>
<var>${confirm number}</var>
</assign>
<msg timestamp="20191219 15:29:12.756" level="INFO">${confirm number} = 2</msg>
<status status="PASS" starttime="20191219 15:29:12.738" endtime="20191219 15:29:12.756"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${confirm number}</arg>
</arguments>
<assign>
<var>${int confirm number}</var>
</assign>
<msg timestamp="20191219 15:29:12.757" level="INFO">${int confirm number} = 2</msg>
<status status="PASS" starttime="20191219 15:29:12.757" endtime="20191219 15:29:12.757"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int((${int confirm number}/7)+1)</arg>
</arguments>
<assign>
<var>${int page number}</var>
</assign>
<msg timestamp="20191219 15:29:12.758" level="INFO">${int page number} = 1</msg>
<status status="PASS" starttime="20191219 15:29:12.757" endtime="20191219 15:29:12.758"></status>
</kw>
<msg timestamp="20191219 15:29:12.758" level="INFO">${number of confirm page} = 1</msg>
<status status="PASS" starttime="20191219 15:29:12.738" endtime="20191219 15:29:12.758"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191219 15:29:12.759" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191219 15:29:12.759" endtime="20191219 15:29:12.759"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of confirm page} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191219 15:29:12.771" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191219 15:29:12.760" endtime="20191219 15:29:12.771"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191219 15:29:12.772" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:29:12.772" endtime="20191219 15:29:12.772"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.760" endtime="20191219 15:29:12.773"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.759" endtime="20191219 15:29:12.773"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191219 15:29:12.773" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191219 15:29:12.773" endtime="20191219 15:29:12.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191219 15:29:12.774" endtime="20191219 15:29:12.774"></status>
</kw>
<msg timestamp="20191219 15:29:12.775" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191219 15:29:12.774" endtime="20191219 15:29:12.775"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<status status="PASS" starttime="20191219 15:29:12.775" endtime="20191219 15:29:12.776"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.775" endtime="20191219 15:29:12.776"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.730" endtime="20191219 15:29:12.776"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot; &quot;appeared&quot; in Confirm list" library="Confirm definitions">
<doc>This keyword is used to check the information of Copper panel displaying in Confirm list screen</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191219 15:29:12.778" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191219 15:29:12.777" endtime="20191219 15:29:12.778"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191219 15:29:12.779" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191219 15:29:12.778" endtime="20191219 15:29:12.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${portID} &lt; 10</arg>
<arg>Catenate</arg>
<arg>SEPARATOR=${SPACE}${SPACE}</arg>
<arg>-Port</arg>
<arg>${portID}</arg>
<arg>ELSE</arg>
<arg>Catenate</arg>
<arg>SEPARATOR=${SPACE}</arg>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${SPACE}${SPACE}</arg>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<status status="PASS" starttime="20191219 15:29:12.779" endtime="20191219 15:29:12.780"></status>
</kw>
<msg timestamp="20191219 15:29:12.780" level="INFO">${input port} = -Port  3</msg>
<status status="PASS" starttime="20191219 15:29:12.779" endtime="20191219 15:29:12.780"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191219 15:29:12.781" level="INFO">${input port information} = Rack 1-Panel 1-Port  3</msg>
<status status="PASS" starttime="20191219 15:29:12.780" endtime="20191219 15:29:12.781"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic confirm port position}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191219 15:29:12.782" level="INFO">${xPath syntax1} = //input[@value='Rack 1-Panel 1-Port  3 ']</msg>
<status status="PASS" starttime="20191219 15:29:12.781" endtime="20191219 15:29:12.782"></status>
</kw>
<kw name="Number of Confirm Pages" library="Confirm definitions">
<assign>
<var>${number of confirm page}</var>
</assign>
<kw name="Get Element Attribute" library="SeleniumLibrary">
<doc>Returns the value of ``attribute`` from the element ``locator``.</doc>
<arguments>
<arg>${btnConfirm}</arg>
<arg>value</arg>
</arguments>
<assign>
<var>${confirm number}</var>
</assign>
<msg timestamp="20191219 15:29:12.793" level="INFO">${confirm number} = 2</msg>
<status status="PASS" starttime="20191219 15:29:12.782" endtime="20191219 15:29:12.793"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${confirm number}</arg>
</arguments>
<assign>
<var>${int confirm number}</var>
</assign>
<msg timestamp="20191219 15:29:12.794" level="INFO">${int confirm number} = 2</msg>
<status status="PASS" starttime="20191219 15:29:12.794" endtime="20191219 15:29:12.794"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int((${int confirm number}/7)+1)</arg>
</arguments>
<assign>
<var>${int page number}</var>
</assign>
<msg timestamp="20191219 15:29:12.795" level="INFO">${int page number} = 1</msg>
<status status="PASS" starttime="20191219 15:29:12.795" endtime="20191219 15:29:12.795"></status>
</kw>
<msg timestamp="20191219 15:29:12.796" level="INFO">${number of confirm page} = 1</msg>
<status status="PASS" starttime="20191219 15:29:12.782" endtime="20191219 15:29:12.796"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191219 15:29:12.796" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191219 15:29:12.796" endtime="20191219 15:29:12.796"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of confirm page} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191219 15:29:12.807" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191219 15:29:12.797" endtime="20191219 15:29:12.808"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191219 15:29:12.808" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:29:12.808" endtime="20191219 15:29:12.809"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.797" endtime="20191219 15:29:12.809"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.796" endtime="20191219 15:29:12.809"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191219 15:29:12.810" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191219 15:29:12.809" endtime="20191219 15:29:12.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191219 15:29:12.811" endtime="20191219 15:29:12.811"></status>
</kw>
<msg timestamp="20191219 15:29:12.811" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191219 15:29:12.810" endtime="20191219 15:29:12.811"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<status status="PASS" starttime="20191219 15:29:12.812" endtime="20191219 15:29:12.813"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.812" endtime="20191219 15:29:12.813"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.777" endtime="20191219 15:29:12.813"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191219 15:29:12.815" level="INFO">Length is 12</msg>
<msg timestamp="20191219 15:29:12.815" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191219 15:29:12.814" endtime="20191219 15:29:12.815"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191219 15:29:12.817" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:29:12.817" endtime="20191219 15:29:12.818"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.816" endtime="20191219 15:29:12.818"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.815" endtime="20191219 15:29:12.818"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.815" endtime="20191219 15:29:12.818"></status>
</kw>
<msg timestamp="20191219 15:29:12.818" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191219 15:29:12.814" endtime="20191219 15:29:12.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191219 15:29:12.819" level="INFO">1</msg>
<status status="PASS" starttime="20191219 15:29:12.819" endtime="20191219 15:29:12.819"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191219 15:29:12.820" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191219 15:29:12.819" endtime="20191219 15:29:12.820"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191219 15:29:12.820" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191219 15:29:12.820" endtime="20191219 15:29:12.821"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191219 15:29:12.860" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191219 15:29:12.821" endtime="20191219 15:29:12.861"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191219 15:29:14.862" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:12.861" endtime="20191219 15:29:14.862"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191219 15:29:14.866" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:14.864" endtime="20191219 15:29:14.866"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.821" endtime="20191219 15:29:14.867"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:12.813" endtime="20191219 15:29:14.869"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;5&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191219 15:29:14.876" level="INFO">Length is 12</msg>
<msg timestamp="20191219 15:29:14.877" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191219 15:29:14.874" endtime="20191219 15:29:14.877"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191219 15:29:14.886" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:29:14.886" endtime="20191219 15:29:14.887"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:14.880" endtime="20191219 15:29:14.887"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:14.879" endtime="20191219 15:29:14.887"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:14.878" endtime="20191219 15:29:14.888"></status>
</kw>
<msg timestamp="20191219 15:29:14.889" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191219 15:29:14.872" endtime="20191219 15:29:14.889"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191219 15:29:14.890" level="INFO">1</msg>
<status status="PASS" starttime="20191219 15:29:14.890" endtime="20191219 15:29:14.891"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191219 15:29:14.892" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191219 15:29:14.891" endtime="20191219 15:29:14.892"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191219 15:29:14.894" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191219 15:29:14.893" endtime="20191219 15:29:14.894"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191219 15:29:14.907" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191219 15:29:14.896" endtime="20191219 15:29:14.907"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191219 15:29:16.911" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:14.908" endtime="20191219 15:29:16.912"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191219 15:29:16.915" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:16.913" endtime="20191219 15:29:16.916"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:14.895" endtime="20191219 15:29:16.917"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:14.870" endtime="20191219 15:29:16.918"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191219 15:29:16.925" level="INFO">Length is 12</msg>
<msg timestamp="20191219 15:29:16.926" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191219 15:29:16.924" endtime="20191219 15:29:16.926"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191219 15:29:16.937" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:29:16.936" endtime="20191219 15:29:16.937"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:16.929" endtime="20191219 15:29:16.938"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:16.928" endtime="20191219 15:29:16.939"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:16.927" endtime="20191219 15:29:16.939"></status>
</kw>
<msg timestamp="20191219 15:29:16.941" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191219 15:29:16.921" endtime="20191219 15:29:16.942"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191219 15:29:16.944" level="INFO">1</msg>
<status status="PASS" starttime="20191219 15:29:16.943" endtime="20191219 15:29:16.945"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191219 15:29:16.948" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191219 15:29:16.946" endtime="20191219 15:29:16.948"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191219 15:29:16.951" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191219 15:29:16.950" endtime="20191219 15:29:16.951"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191219 15:29:16.966" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191219 15:29:16.954" endtime="20191219 15:29:16.966"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191219 15:29:18.967" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:16.966" endtime="20191219 15:29:18.968"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191219 15:29:18.971" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:18.969" endtime="20191219 15:29:18.972"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:16.952" endtime="20191219 15:29:18.973"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:16.920" endtime="20191219 15:29:18.974"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191219 15:29:18.981" level="INFO">Length is 12</msg>
<msg timestamp="20191219 15:29:18.982" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191219 15:29:18.980" endtime="20191219 15:29:18.982"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191219 15:29:18.992" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191219 15:29:18.991" endtime="20191219 15:29:18.993"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:18.985" endtime="20191219 15:29:18.994"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:18.984" endtime="20191219 15:29:18.995"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:18.983" endtime="20191219 15:29:18.995"></status>
</kw>
<msg timestamp="20191219 15:29:18.997" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191219 15:29:18.977" endtime="20191219 15:29:18.997"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191219 15:29:18.998" level="INFO">1</msg>
<status status="PASS" starttime="20191219 15:29:18.998" endtime="20191219 15:29:18.998"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191219 15:29:19.000" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191219 15:29:18.999" endtime="20191219 15:29:19.000"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191219 15:29:19.002" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191219 15:29:19.001" endtime="20191219 15:29:19.002"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191219 15:29:19.035" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191219 15:29:19.003" endtime="20191219 15:29:19.036"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191219 15:29:21.039" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:19.036" endtime="20191219 15:29:21.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191219 15:29:21.044" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191219 15:29:21.042" endtime="20191219 15:29:21.044"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:19.002" endtime="20191219 15:29:21.045"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:18.976" endtime="20191219 15:29:21.046"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191219 15:29:21.083" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191219 15:29:21.049" endtime="20191219 15:29:21.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191219 15:29:21.100" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191219 15:29:21.088" endtime="20191219 15:29:21.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191219 15:29:21.103" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191219 15:29:21.103" endtime="20191219 15:29:21.137"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191219 15:29:22.141" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191219 15:29:21.139" endtime="20191219 15:29:22.142"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:21.138" endtime="20191219 15:29:22.143"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:21.102" endtime="20191219 15:29:22.144"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:21.102" endtime="20191219 15:29:22.144"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:21.101" endtime="20191219 15:29:22.145"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:21.086" endtime="20191219 15:29:22.146"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191219 15:29:23.148" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191219 15:29:22.148" endtime="20191219 15:29:23.149"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:22.147" endtime="20191219 15:29:23.150"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:21.085" endtime="20191219 15:29:23.151"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:21.084" endtime="20191219 15:29:23.152"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191219 15:29:23.174" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191219 15:29:23.153" endtime="20191219 15:29:23.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191219 15:29:23.174" endtime="20191219 15:29:23.175"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191219 15:29:23.176" endtime="20191219 15:29:25.309"></status>
</kw>
<status status="PASS" starttime="20191219 15:29:21.048" endtime="20191219 15:29:25.311"></status>
</kw>
<status status="PASS" starttime="20191219 15:28:40.732" endtime="20191219 15:29:25.312" critical="yes"></status>
</test>
<status status="PASS" starttime="20191219 15:28:40.354" endtime="20191219 15:29:25.314"></status>
</suite>
<status status="PASS" starttime="20191219 15:28:40.352" endtime="20191219 15:29:25.325"></status>
</suite>
<status status="PASS" starttime="20191219 15:28:40.349" endtime="20191219 15:29:25.329"></status>
</suite>
<status status="PASS" starttime="20191219 15:28:40.347" endtime="20191219 15:29:25.333"></status>
</suite>
<status status="PASS" starttime="20191219 15:28:40.324" endtime="20191219 15:29:25.336"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="1" fail="0" id="s1-s1" name="Test Resources">BulkPatching Robot.Test Resources</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Test Suites">BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1" name="4. Exit Bulk Patchings Screen">BulkPatching Robot.Test Resources.Test Suites.4. Exit Bulk Patchings Screen</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1-s1" name="4.2. Check confirmation when number of patches on End B are less than End A">BulkPatching Robot.Test Resources.Test Suites.4. Exit Bulk Patchings Screen.4.2. Check confirmation when number of patches on End B are less than End A</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
