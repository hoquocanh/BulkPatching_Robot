<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20191120 14:41:55.636" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1" name="Test Resources" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources">
<suite id="s1-s1-s1" name="Test Suites" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites">
<suite id="s1-s1-s1-s1" name="2. Insert All End As" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As">
<suite id="s1-s1-s1-s1-s1" name="2.4. Check End A when plugging correct tip in the middle of list of End A then replug" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As\2.4. Check End A when plugging correct tip in the middle of list of End A then replug.robot">
<test id="s1-s1-s1-s1-s1-t1" name="INSERT_END_A_04_01_Verify that imVision X shall show correctly when plugging a connector that is matched to one of unplugged connectors in the End A list and the connector is highlighted in black">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191120 14:41:56.076" endtime="20191120 14:41:56.076"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191120 14:41:56.076" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191120 14:41:57.486" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191120 14:41:56.076" endtime="20191120 14:41:57.486"></status>
</kw>
<status status="PASS" starttime="20191120 14:41:56.076" endtime="20191120 14:41:57.486"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191120 14:41:57.486" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191120 14:41:57.486" endtime="20191120 14:41:57.486"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191120 14:41:57.496" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191120 14:41:57.486" endtime="20191120 14:42:01.790"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191120 14:42:01.790" endtime="20191120 14:42:02.934"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:42:03.446" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:42:02.935" endtime="20191120 14:42:03.446"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 14:42:03.456" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191120 14:42:03.446" endtime="20191120 14:42:03.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:03.456" endtime="20191120 14:42:03.456"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191120 14:42:03.466" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191120 14:42:03.456" endtime="20191120 14:42:03.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:03.466" endtime="20191120 14:42:03.466"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 14:42:03.476" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191120 14:42:03.466" endtime="20191120 14:42:03.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:03.476" endtime="20191120 14:42:03.476"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:03.446" endtime="20191120 14:42:03.476"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 14:42:03.486" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 14:42:03.486" endtime="20191120 14:42:03.567"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:03.486" endtime="20191120 14:42:03.567"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:42:04.069" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:42:03.568" endtime="20191120 14:42:04.070"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:03.568" endtime="20191120 14:42:04.071"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:03.486" endtime="20191120 14:42:04.072"></status>
</kw>
<status status="PASS" starttime="20191120 14:41:57.486" endtime="20191120 14:42:04.074"></status>
</kw>
<status status="PASS" starttime="20191120 14:41:56.067" endtime="20191120 14:42:04.075"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191120 14:42:04.080" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191120 14:42:04.079" endtime="20191120 14:42:04.154"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:42:04.656" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:42:04.155" endtime="20191120 14:42:04.656"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:04.154" endtime="20191120 14:42:04.657"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:04.076" endtime="20191120 14:42:04.658"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:04.663" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:04.664" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:04.662" endtime="20191120 14:42:04.664"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:04.672" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:04.672" endtime="20191120 14:42:04.673"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:04.666" endtime="20191120 14:42:04.673"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:04.665" endtime="20191120 14:42:04.674"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:04.665" endtime="20191120 14:42:04.674"></status>
</kw>
<msg timestamp="20191120 14:42:04.676" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:04.661" endtime="20191120 14:42:04.676"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:04.678" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:04.677" endtime="20191120 14:42:04.679"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:04.681" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:42:04.679" endtime="20191120 14:42:04.681"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:04.683" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:42:04.682" endtime="20191120 14:42:04.683"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:04.708" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:42:04.685" endtime="20191120 14:42:04.709"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:06.711" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:04.709" endtime="20191120 14:42:06.712"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:06.714" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:06.712" endtime="20191120 14:42:06.714"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:04.684" endtime="20191120 14:42:06.715"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:04.659" endtime="20191120 14:42:06.715"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:06.719" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:06.720" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:06.719" endtime="20191120 14:42:06.720"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:06.726" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:06.726" endtime="20191120 14:42:06.727"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:06.722" endtime="20191120 14:42:06.727"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:06.721" endtime="20191120 14:42:06.728"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:06.721" endtime="20191120 14:42:06.728"></status>
</kw>
<msg timestamp="20191120 14:42:06.730" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:06.717" endtime="20191120 14:42:06.730"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:06.731" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:06.731" endtime="20191120 14:42:06.732"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:06.733" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:06.732" endtime="20191120 14:42:06.734"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:06.735" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:06.734" endtime="20191120 14:42:06.736"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:06.759" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:06.737" endtime="20191120 14:42:06.759"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:08.786" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:06.760" endtime="20191120 14:42:08.786"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:08.786" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:08.786" endtime="20191120 14:42:08.786"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:06.736" endtime="20191120 14:42:08.786"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:06.716" endtime="20191120 14:42:08.786"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:08.799" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:08.799" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:08.796" endtime="20191120 14:42:08.799"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:08.809" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:08.809" endtime="20191120 14:42:08.809"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:08.799" endtime="20191120 14:42:08.809"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:08.799" endtime="20191120 14:42:08.809"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:08.799" endtime="20191120 14:42:08.809"></status>
</kw>
<msg timestamp="20191120 14:42:08.816" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:08.796" endtime="20191120 14:42:08.816"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:08.816" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:08.816" endtime="20191120 14:42:08.816"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:08.816" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:08.816" endtime="20191120 14:42:08.816"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:08.816" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:08.816" endtime="20191120 14:42:08.816"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:08.866" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:08.816" endtime="20191120 14:42:08.866"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:10.886" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:08.866" endtime="20191120 14:42:10.886"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:10.886" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:10.886" endtime="20191120 14:42:10.886"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:08.816" endtime="20191120 14:42:10.886"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:08.786" endtime="20191120 14:42:10.886"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:10.886" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:10.886" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:10.886" endtime="20191120 14:42:10.886"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:10.886" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:10.886" endtime="20191120 14:42:10.886"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:10.886" endtime="20191120 14:42:10.886"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:10.886" endtime="20191120 14:42:10.886"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:10.886" endtime="20191120 14:42:10.886"></status>
</kw>
<msg timestamp="20191120 14:42:10.886" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:10.886" endtime="20191120 14:42:10.886"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:10.886" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:10.886" endtime="20191120 14:42:10.886"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:10.886" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:42:10.886" endtime="20191120 14:42:10.886"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:10.896" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:42:10.896" endtime="20191120 14:42:10.896"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:10.986" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:42:10.896" endtime="20191120 14:42:10.986"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:12.988" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:10.988" endtime="20191120 14:42:12.988"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:12.989" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:12.988" endtime="20191120 14:42:12.989"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:10.896" endtime="20191120 14:42:12.990"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:10.886" endtime="20191120 14:42:12.990"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:12.992" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:12.992" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:12.991" endtime="20191120 14:42:12.992"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:12.995" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:12.995" endtime="20191120 14:42:12.995"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:12.993" endtime="20191120 14:42:12.995"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:12.993" endtime="20191120 14:42:12.995"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:12.992" endtime="20191120 14:42:12.996"></status>
</kw>
<msg timestamp="20191120 14:42:12.996" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:12.991" endtime="20191120 14:42:12.996"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:12.997" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:12.997" endtime="20191120 14:42:12.997"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:12.998" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:12.998" endtime="20191120 14:42:12.998"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:12.999" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:12.998" endtime="20191120 14:42:12.999"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:13.009" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:13.000" endtime="20191120 14:42:13.010"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:15.016" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:13.010" endtime="20191120 14:42:15.016"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:15.016" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:15.016" endtime="20191120 14:42:15.016"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:12.999" endtime="20191120 14:42:15.016"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:12.990" endtime="20191120 14:42:15.016"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot; in End &quot;A&quot; color &quot;red&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the color of port information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:15.026" endtime="20191120 14:42:15.026"></status>
</kw>
<msg timestamp="20191120 14:42:15.026" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 14:42:15.026" endtime="20191120 14:42:15.026"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 14:42:15.026" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 14:42:15.026" endtime="20191120 14:42:15.026"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 14:42:15.037" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191120 14:42:15.036" endtime="20191120 14:42:15.037"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 14:42:15.037" level="INFO">${input port} = -Port 2</msg>
<status status="PASS" starttime="20191120 14:42:15.037" endtime="20191120 14:42:15.037"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 14:42:15.037" level="INFO">${input port information} = Rack 1-Panel 1-Port 2</msg>
<status status="PASS" starttime="20191120 14:42:15.037" endtime="20191120 14:42:15.037"></status>
</kw>
<kw name="Get Color Code of Port Information" library="Bulk Patching definitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20191120 14:42:15.046" level="INFO">${color} = red</msg>
<status status="PASS" starttime="20191120 14:42:15.046" endtime="20191120 14:42:15.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#F00;</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:15.046" endtime="20191120 14:42:15.046"></status>
</kw>
<msg timestamp="20191120 14:42:15.046" level="INFO">${color code} = color:#F00;</msg>
<status status="PASS" starttime="20191120 14:42:15.046" endtime="20191120 14:42:15.046"></status>
</kw>
<msg timestamp="20191120 14:42:15.056" level="INFO">${input color} = color:#F00;</msg>
<status status="PASS" starttime="20191120 14:42:15.037" endtime="20191120 14:42:15.056"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position with color}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 14:42:15.058" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='Color']/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 14:42:15.057" endtime="20191120 14:42:15.058"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 14:42:15.059" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='Color']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 14:42:15.058" endtime="20191120 14:42:15.059"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20191120 14:42:15.060" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 14:42:15.060" endtime="20191120 14:42:15.061"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:15.084" level="INFO">${count} = 4</msg>
<status status="PASS" starttime="20191120 14:42:15.062" endtime="20191120 14:42:15.084"></status>
</kw>
<msg timestamp="20191120 14:42:15.084" level="INFO">${number of lines} = 4</msg>
<status status="PASS" starttime="20191120 14:42:15.061" endtime="20191120 14:42:15.084"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:15.085" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 14:42:15.085" endtime="20191120 14:42:15.086"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 14:42:15.087" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 14:42:15.087" endtime="20191120 14:42:15.088"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 14:42:15.089" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 14:42:15.088" endtime="20191120 14:42:15.089"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 14:42:15.090" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 14:42:15.089" endtime="20191120 14:42:15.090"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 14:42:15.091" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 14:42:15.091" endtime="20191120 14:42:15.091"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:15.108" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 14:42:15.092" endtime="20191120 14:42:15.109"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:15.109" endtime="20191120 14:42:15.109"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:15.086" endtime="20191120 14:42:15.110"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 14:42:15.110" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 14:42:15.110" endtime="20191120 14:42:15.111"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 14:42:15.111" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 14:42:15.111" endtime="20191120 14:42:15.111"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 14:42:15.112" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 14:42:15.112" endtime="20191120 14:42:15.112"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 14:42:15.113" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 14:42:15.112" endtime="20191120 14:42:15.113"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:15.124" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191120 14:42:15.113" endtime="20191120 14:42:15.125"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191120 14:42:15.125" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:15.125" endtime="20191120 14:42:15.126"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:15.110" endtime="20191120 14:42:15.126"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:15.086" endtime="20191120 14:42:15.126"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:15.127" endtime="20191120 14:42:15.127"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:15.126" endtime="20191120 14:42:15.127"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:15.016" endtime="20191120 14:42:15.127"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:15.129" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:15.129" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:15.129" endtime="20191120 14:42:15.129"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:15.132" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:15.132" endtime="20191120 14:42:15.132"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:15.130" endtime="20191120 14:42:15.133"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:15.130" endtime="20191120 14:42:15.133"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:15.130" endtime="20191120 14:42:15.133"></status>
</kw>
<msg timestamp="20191120 14:42:15.133" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:15.128" endtime="20191120 14:42:15.134"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:15.134" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:15.134" endtime="20191120 14:42:15.134"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:15.135" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:15.135" endtime="20191120 14:42:15.135"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:15.136" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:15.135" endtime="20191120 14:42:15.136"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:15.146" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:15.136" endtime="20191120 14:42:15.146"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:17.148" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:15.147" endtime="20191120 14:42:17.149"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:17.151" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:17.150" endtime="20191120 14:42:17.152"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:15.136" endtime="20191120 14:42:17.153"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:15.128" endtime="20191120 14:42:17.154"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot; in End &quot;A&quot; color &quot;red&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the color of port information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:17.159" endtime="20191120 14:42:17.160"></status>
</kw>
<msg timestamp="20191120 14:42:17.160" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 14:42:17.157" endtime="20191120 14:42:17.161"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 14:42:17.163" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 14:42:17.161" endtime="20191120 14:42:17.163"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 14:42:17.165" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191120 14:42:17.164" endtime="20191120 14:42:17.165"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 14:42:17.167" level="INFO">${input port} = -Port 3</msg>
<status status="PASS" starttime="20191120 14:42:17.166" endtime="20191120 14:42:17.168"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 14:42:17.170" level="INFO">${input port information} = Rack 1-Panel 1-Port 3</msg>
<status status="PASS" starttime="20191120 14:42:17.169" endtime="20191120 14:42:17.170"></status>
</kw>
<kw name="Get Color Code of Port Information" library="Bulk Patching definitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20191120 14:42:17.174" level="INFO">${color} = red</msg>
<status status="PASS" starttime="20191120 14:42:17.173" endtime="20191120 14:42:17.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#F00;</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:17.177" endtime="20191120 14:42:17.177"></status>
</kw>
<msg timestamp="20191120 14:42:17.179" level="INFO">${color code} = color:#F00;</msg>
<status status="PASS" starttime="20191120 14:42:17.175" endtime="20191120 14:42:17.179"></status>
</kw>
<msg timestamp="20191120 14:42:17.179" level="INFO">${input color} = color:#F00;</msg>
<status status="PASS" starttime="20191120 14:42:17.171" endtime="20191120 14:42:17.179"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position with color}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 14:42:17.180" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='Color']/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 14:42:17.179" endtime="20191120 14:42:17.180"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 14:42:17.181" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='Color']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:17.180" endtime="20191120 14:42:17.181"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20191120 14:42:17.183" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:17.181" endtime="20191120 14:42:17.183"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:17.193" level="INFO">${count} = 4</msg>
<status status="PASS" starttime="20191120 14:42:17.184" endtime="20191120 14:42:17.193"></status>
</kw>
<msg timestamp="20191120 14:42:17.194" level="INFO">${number of lines} = 4</msg>
<status status="PASS" starttime="20191120 14:42:17.183" endtime="20191120 14:42:17.194"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:17.195" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 14:42:17.194" endtime="20191120 14:42:17.195"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 14:42:17.197" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 14:42:17.197" endtime="20191120 14:42:17.197"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 14:42:17.197" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 14:42:17.197" endtime="20191120 14:42:17.197"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 14:42:17.199" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:17.199" endtime="20191120 14:42:17.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 14:42:17.200" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:17.200" endtime="20191120 14:42:17.201"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:17.214" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 14:42:17.201" endtime="20191120 14:42:17.214"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:17.215" endtime="20191120 14:42:17.215"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:17.195" endtime="20191120 14:42:17.216"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 14:42:17.217" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 14:42:17.216" endtime="20191120 14:42:17.217"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 14:42:17.218" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 14:42:17.217" endtime="20191120 14:42:17.218"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 14:42:17.219" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:17.218" endtime="20191120 14:42:17.219"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 14:42:17.220" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:17.219" endtime="20191120 14:42:17.220"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:17.234" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 14:42:17.220" endtime="20191120 14:42:17.234"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:17.234" endtime="20191120 14:42:17.235"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:17.216" endtime="20191120 14:42:17.235"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 14:42:17.236" level="INFO">${index temp} = 3</msg>
<status status="PASS" starttime="20191120 14:42:17.236" endtime="20191120 14:42:17.236"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 14:42:17.237" level="INFO">${index string} = 3</msg>
<status status="PASS" starttime="20191120 14:42:17.237" endtime="20191120 14:42:17.237"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 14:42:17.238" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[3]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:17.238" endtime="20191120 14:42:17.238"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 14:42:17.239" level="INFO">//ul[@id='bulkPatchList']/li[3]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:17.239" endtime="20191120 14:42:17.239"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:17.251" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191120 14:42:17.239" endtime="20191120 14:42:17.251"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191120 14:42:17.252" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:17.251" endtime="20191120 14:42:17.252"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:17.235" endtime="20191120 14:42:17.252"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:17.195" endtime="20191120 14:42:17.252"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:17.253" endtime="20191120 14:42:17.253"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:17.252" endtime="20191120 14:42:17.253"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:17.155" endtime="20191120 14:42:17.253"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:17.255" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:17.255" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:17.255" endtime="20191120 14:42:17.255"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:17.257" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:17.257" endtime="20191120 14:42:17.258"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:17.256" endtime="20191120 14:42:17.258"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:17.256" endtime="20191120 14:42:17.258"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:17.255" endtime="20191120 14:42:17.258"></status>
</kw>
<msg timestamp="20191120 14:42:17.259" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:17.254" endtime="20191120 14:42:17.259"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:17.259" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:17.259" endtime="20191120 14:42:17.259"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:17.260" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:17.260" endtime="20191120 14:42:17.260"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:17.261" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:17.260" endtime="20191120 14:42:17.261"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:17.278" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:17.261" endtime="20191120 14:42:17.278"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:19.286" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:17.279" endtime="20191120 14:42:19.286"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:19.286" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:19.286" endtime="20191120 14:42:19.286"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:17.261" endtime="20191120 14:42:19.286"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:17.254" endtime="20191120 14:42:19.286"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot; in End &quot;A&quot; color &quot;black&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the color of port information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:19.296" endtime="20191120 14:42:19.296"></status>
</kw>
<msg timestamp="20191120 14:42:19.296" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 14:42:19.296" endtime="20191120 14:42:19.296"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 14:42:19.296" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 14:42:19.296" endtime="20191120 14:42:19.296"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 14:42:19.306" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191120 14:42:19.306" endtime="20191120 14:42:19.306"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 14:42:19.306" level="INFO">${input port} = -Port 3</msg>
<status status="PASS" starttime="20191120 14:42:19.306" endtime="20191120 14:42:19.306"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 14:42:19.306" level="INFO">${input port information} = Rack 1-Panel 1-Port 3</msg>
<status status="PASS" starttime="20191120 14:42:19.306" endtime="20191120 14:42:19.306"></status>
</kw>
<kw name="Get Color Code of Port Information" library="Bulk Patching definitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20191120 14:42:19.316" level="INFO">${color} = black</msg>
<status status="PASS" starttime="20191120 14:42:19.316" endtime="20191120 14:42:19.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#000;</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:19.316" endtime="20191120 14:42:19.316"></status>
</kw>
<msg timestamp="20191120 14:42:19.316" level="INFO">${color code} = color:#000;</msg>
<status status="PASS" starttime="20191120 14:42:19.316" endtime="20191120 14:42:19.316"></status>
</kw>
<msg timestamp="20191120 14:42:19.316" level="INFO">${input color} = color:#000;</msg>
<status status="PASS" starttime="20191120 14:42:19.306" endtime="20191120 14:42:19.316"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position with color}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 14:42:19.316" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='Color']/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 14:42:19.316" endtime="20191120 14:42:19.316"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 14:42:19.316" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='Color']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:19.316" endtime="20191120 14:42:19.316"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20191120 14:42:19.316" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:19.316" endtime="20191120 14:42:19.316"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:19.336" level="INFO">${count} = 4</msg>
<status status="PASS" starttime="20191120 14:42:19.316" endtime="20191120 14:42:19.336"></status>
</kw>
<msg timestamp="20191120 14:42:19.336" level="INFO">${number of lines} = 4</msg>
<status status="PASS" starttime="20191120 14:42:19.316" endtime="20191120 14:42:19.336"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:19.336" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 14:42:19.336" endtime="20191120 14:42:19.336"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 14:42:19.340" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 14:42:19.340" endtime="20191120 14:42:19.340"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 14:42:19.340" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 14:42:19.340" endtime="20191120 14:42:19.340"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 14:42:19.340" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:19.340" endtime="20191120 14:42:19.340"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 14:42:19.340" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:19.340" endtime="20191120 14:42:19.340"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:19.346" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 14:42:19.340" endtime="20191120 14:42:19.346"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:19.346" endtime="20191120 14:42:19.356"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:19.336" endtime="20191120 14:42:19.356"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 14:42:19.356" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 14:42:19.356" endtime="20191120 14:42:19.356"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 14:42:19.356" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 14:42:19.356" endtime="20191120 14:42:19.356"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 14:42:19.356" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:19.356" endtime="20191120 14:42:19.356"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 14:42:19.356" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:19.356" endtime="20191120 14:42:19.356"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:19.366" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 14:42:19.356" endtime="20191120 14:42:19.366"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:19.366" endtime="20191120 14:42:19.366"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:19.356" endtime="20191120 14:42:19.366"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 14:42:19.366" level="INFO">${index temp} = 3</msg>
<status status="PASS" starttime="20191120 14:42:19.366" endtime="20191120 14:42:19.366"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 14:42:19.366" level="INFO">${index string} = 3</msg>
<status status="PASS" starttime="20191120 14:42:19.366" endtime="20191120 14:42:19.366"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 14:42:19.366" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[3]/div[2][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:19.366" endtime="20191120 14:42:19.366"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 14:42:19.366" level="INFO">//ul[@id='bulkPatchList']/li[3]/div[2][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 14:42:19.366" endtime="20191120 14:42:19.366"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:19.386" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191120 14:42:19.366" endtime="20191120 14:42:19.386"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191120 14:42:19.386" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:19.386" endtime="20191120 14:42:19.386"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:19.366" endtime="20191120 14:42:19.386"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:19.336" endtime="20191120 14:42:19.386"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:19.386" endtime="20191120 14:42:19.386"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:19.386" endtime="20191120 14:42:19.386"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:19.286" endtime="20191120 14:42:19.386"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:19.386" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:19.386" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:19.386" endtime="20191120 14:42:19.386"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:19.386" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:19.386" endtime="20191120 14:42:19.386"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:19.386" endtime="20191120 14:42:19.386"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:19.386" endtime="20191120 14:42:19.386"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:19.386" endtime="20191120 14:42:19.386"></status>
</kw>
<msg timestamp="20191120 14:42:19.386" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:19.386" endtime="20191120 14:42:19.386"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:19.396" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:19.386" endtime="20191120 14:42:19.396"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:19.396" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:19.396" endtime="20191120 14:42:19.396"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:19.396" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:19.396" endtime="20191120 14:42:19.396"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:19.446" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:19.396" endtime="20191120 14:42:19.446"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:21.448" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:19.446" endtime="20191120 14:42:21.449"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:21.452" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:21.450" endtime="20191120 14:42:21.453"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:19.396" endtime="20191120 14:42:21.454"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:19.386" endtime="20191120 14:42:21.455"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot; in End &quot;A&quot; color &quot;black&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the color of port information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:21.461" endtime="20191120 14:42:21.462"></status>
</kw>
<msg timestamp="20191120 14:42:21.463" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 14:42:21.459" endtime="20191120 14:42:21.464"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 14:42:21.467" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 14:42:21.465" endtime="20191120 14:42:21.467"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 14:42:21.470" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191120 14:42:21.468" endtime="20191120 14:42:21.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 14:42:21.471" level="INFO">${input port} = -Port 2</msg>
<status status="PASS" starttime="20191120 14:42:21.471" endtime="20191120 14:42:21.472"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 14:42:21.473" level="INFO">${input port information} = Rack 1-Panel 1-Port 2</msg>
<status status="PASS" starttime="20191120 14:42:21.472" endtime="20191120 14:42:21.473"></status>
</kw>
<kw name="Get Color Code of Port Information" library="Bulk Patching definitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20191120 14:42:21.475" level="INFO">${color} = black</msg>
<status status="PASS" starttime="20191120 14:42:21.475" endtime="20191120 14:42:21.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#000;</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:21.477" endtime="20191120 14:42:21.478"></status>
</kw>
<msg timestamp="20191120 14:42:21.479" level="INFO">${color code} = color:#000;</msg>
<status status="PASS" starttime="20191120 14:42:21.476" endtime="20191120 14:42:21.479"></status>
</kw>
<msg timestamp="20191120 14:42:21.479" level="INFO">${input color} = color:#000;</msg>
<status status="PASS" starttime="20191120 14:42:21.474" endtime="20191120 14:42:21.480"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position with color}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 14:42:21.481" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='Color']/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 14:42:21.480" endtime="20191120 14:42:21.481"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 14:42:21.483" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='Color']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 14:42:21.482" endtime="20191120 14:42:21.483"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20191120 14:42:21.484" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 14:42:21.484" endtime="20191120 14:42:21.485"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:21.502" level="INFO">${count} = 4</msg>
<status status="PASS" starttime="20191120 14:42:21.486" endtime="20191120 14:42:21.502"></status>
</kw>
<msg timestamp="20191120 14:42:21.502" level="INFO">${number of lines} = 4</msg>
<status status="PASS" starttime="20191120 14:42:21.485" endtime="20191120 14:42:21.503"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:21.503" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 14:42:21.503" endtime="20191120 14:42:21.503"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 14:42:21.503" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 14:42:21.503" endtime="20191120 14:42:21.505"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 14:42:21.505" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 14:42:21.505" endtime="20191120 14:42:21.505"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 14:42:21.506" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 14:42:21.506" endtime="20191120 14:42:21.506"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 14:42:21.506" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 14:42:21.506" endtime="20191120 14:42:21.506"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:21.517" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 14:42:21.506" endtime="20191120 14:42:21.519"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:21.519" endtime="20191120 14:42:21.519"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:21.503" endtime="20191120 14:42:21.520"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 14:42:21.520" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 14:42:21.520" endtime="20191120 14:42:21.520"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 14:42:21.520" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 14:42:21.520" endtime="20191120 14:42:21.520"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 14:42:21.521" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 14:42:21.521" endtime="20191120 14:42:21.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 14:42:21.522" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 14:42:21.521" endtime="20191120 14:42:21.522"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 14:42:21.533" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191120 14:42:21.522" endtime="20191120 14:42:21.534"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191120 14:42:21.534" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:21.534" endtime="20191120 14:42:21.535"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:21.520" endtime="20191120 14:42:21.535"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:21.503" endtime="20191120 14:42:21.535"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:21.535" endtime="20191120 14:42:21.536"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:21.535" endtime="20191120 14:42:21.536"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:21.457" endtime="20191120 14:42:21.536"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:21.538" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:21.538" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:21.538" endtime="20191120 14:42:21.538"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:21.540" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:21.540" endtime="20191120 14:42:21.541"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:21.539" endtime="20191120 14:42:21.541"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:21.539" endtime="20191120 14:42:21.541"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:21.538" endtime="20191120 14:42:21.541"></status>
</kw>
<msg timestamp="20191120 14:42:21.542" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:21.537" endtime="20191120 14:42:21.542"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:21.542" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:21.542" endtime="20191120 14:42:21.542"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:21.543" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:42:21.543" endtime="20191120 14:42:21.543"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:21.544" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:42:21.543" endtime="20191120 14:42:21.544"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:21.582" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:42:21.544" endtime="20191120 14:42:21.582"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:23.585" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:21.583" endtime="20191120 14:42:23.586"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:23.590" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:23.587" endtime="20191120 14:42:23.590"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:21.544" endtime="20191120 14:42:23.591"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:21.537" endtime="20191120 14:42:23.592"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:23.599" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:23.600" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:23.598" endtime="20191120 14:42:23.600"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:23.610" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:23.609" endtime="20191120 14:42:23.611"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:23.603" endtime="20191120 14:42:23.612"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:23.602" endtime="20191120 14:42:23.612"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:23.601" endtime="20191120 14:42:23.613"></status>
</kw>
<msg timestamp="20191120 14:42:23.615" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:23.596" endtime="20191120 14:42:23.615"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:23.618" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:23.616" endtime="20191120 14:42:23.618"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:23.621" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:23.619" endtime="20191120 14:42:23.621"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:23.624" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:23.623" endtime="20191120 14:42:23.624"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:23.662" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:23.627" endtime="20191120 14:42:23.662"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:25.667" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:23.663" endtime="20191120 14:42:25.668"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:25.671" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:25.669" endtime="20191120 14:42:25.672"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:23.625" endtime="20191120 14:42:25.673"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:23.594" endtime="20191120 14:42:25.674"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:25.681" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:25.681" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:25.679" endtime="20191120 14:42:25.682"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:25.692" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:25.691" endtime="20191120 14:42:25.693"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:25.685" endtime="20191120 14:42:25.694"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:25.684" endtime="20191120 14:42:25.694"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:25.683" endtime="20191120 14:42:25.695"></status>
</kw>
<msg timestamp="20191120 14:42:25.697" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:25.677" endtime="20191120 14:42:25.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:25.700" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:25.699" endtime="20191120 14:42:25.700"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:25.701" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:25.700" endtime="20191120 14:42:25.701"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:25.702" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:25.702" endtime="20191120 14:42:25.702"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:25.738" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:25.703" endtime="20191120 14:42:25.738"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:27.740" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:25.739" endtime="20191120 14:42:27.741"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:27.744" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:27.742" endtime="20191120 14:42:27.745"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:25.703" endtime="20191120 14:42:27.746"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:25.676" endtime="20191120 14:42:27.747"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:27.754" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:27.755" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:27.753" endtime="20191120 14:42:27.755"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:27.765" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:27.764" endtime="20191120 14:42:27.766"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:27.758" endtime="20191120 14:42:27.767"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:27.757" endtime="20191120 14:42:27.767"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:27.756" endtime="20191120 14:42:27.768"></status>
</kw>
<msg timestamp="20191120 14:42:27.770" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:27.750" endtime="20191120 14:42:27.770"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:27.771" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:27.770" endtime="20191120 14:42:27.771"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:27.772" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:42:27.772" endtime="20191120 14:42:27.773"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:27.773" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:42:27.773" endtime="20191120 14:42:27.774"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:27.809" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:42:27.775" endtime="20191120 14:42:27.809"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:29.845" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:27.810" endtime="20191120 14:42:29.845"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:29.845" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:29.845" endtime="20191120 14:42:29.845"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:27.774" endtime="20191120 14:42:29.845"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:27.749" endtime="20191120 14:42:29.845"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 14:42:29.857" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191120 14:42:29.845" endtime="20191120 14:42:29.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 14:42:29.857" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191120 14:42:29.857" endtime="20191120 14:42:29.900"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:29.857" endtime="20191120 14:42:29.901"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:42:30.403" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:42:29.901" endtime="20191120 14:42:30.404"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:29.901" endtime="20191120 14:42:30.405"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:29.857" endtime="20191120 14:42:30.406"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:29.857" endtime="20191120 14:42:30.407"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 14:42:30.437" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191120 14:42:30.408" endtime="20191120 14:42:30.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 14:42:30.443" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 14:42:30.442" endtime="20191120 14:42:30.490"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:30.441" endtime="20191120 14:42:30.491"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:42:30.993" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:42:30.492" endtime="20191120 14:42:30.993"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:30.491" endtime="20191120 14:42:30.994"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:30.440" endtime="20191120 14:42:30.994"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:30.438" endtime="20191120 14:42:30.995"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191120 14:42:30.996" endtime="20191120 14:42:33.127"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:29.845" endtime="20191120 14:42:33.128"></status>
</kw>
<status status="PASS" starttime="20191120 14:41:56.067" endtime="20191120 14:42:33.129" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t2" name="INSERT_END_A_04_04_Verify that imVision X shall show correctly when plugging a connector that is matched to one of unplugged connectors in the End A list and imVision X shall remove Delete button">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:33.135" endtime="20191120 14:42:33.137"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191120 14:42:33.138" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191120 14:42:35.016" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191120 14:42:33.137" endtime="20191120 14:42:35.016"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:33.134" endtime="20191120 14:42:35.016"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191120 14:42:35.016" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191120 14:42:35.016" endtime="20191120 14:42:35.016"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191120 14:42:35.016" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191120 14:42:35.016" endtime="20191120 14:42:39.892"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191120 14:42:39.892" endtime="20191120 14:42:41.035"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:42:41.546" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:42:41.036" endtime="20191120 14:42:41.546"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 14:42:41.580" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191120 14:42:41.549" endtime="20191120 14:42:41.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:41.580" endtime="20191120 14:42:41.587"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191120 14:42:41.606" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191120 14:42:41.587" endtime="20191120 14:42:41.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:41.606" endtime="20191120 14:42:41.609"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 14:42:41.626" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191120 14:42:41.609" endtime="20191120 14:42:41.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191120 14:42:41.626" endtime="20191120 14:42:41.626"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:41.546" endtime="20191120 14:42:41.626"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 14:42:41.626" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 14:42:41.626" endtime="20191120 14:42:41.754"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:41.626" endtime="20191120 14:42:41.755"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:42:42.276" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:42:41.758" endtime="20191120 14:42:42.276"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:41.756" endtime="20191120 14:42:42.276"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:41.626" endtime="20191120 14:42:42.276"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:35.016" endtime="20191120 14:42:42.276"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:33.133" endtime="20191120 14:42:42.276"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191120 14:42:42.276" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191120 14:42:42.276" endtime="20191120 14:42:42.326"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:42:42.836" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:42:42.327" endtime="20191120 14:42:42.836"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:42.327" endtime="20191120 14:42:42.836"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:42.276" endtime="20191120 14:42:42.836"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:42.836" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:42.836" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:42.836" endtime="20191120 14:42:42.836"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:42.836" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:42.836" endtime="20191120 14:42:42.836"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:42.836" endtime="20191120 14:42:42.836"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:42.836" endtime="20191120 14:42:42.836"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:42.836" endtime="20191120 14:42:42.836"></status>
</kw>
<msg timestamp="20191120 14:42:42.836" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:42.836" endtime="20191120 14:42:42.836"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:42.836" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:42.836" endtime="20191120 14:42:42.836"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:42.836" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:42:42.836" endtime="20191120 14:42:42.836"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:42.836" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:42:42.836" endtime="20191120 14:42:42.836"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:42.895" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:42:42.836" endtime="20191120 14:42:42.895"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:44.927" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:42.895" endtime="20191120 14:42:44.927"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:44.927" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:44.927" endtime="20191120 14:42:44.927"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:42.836" endtime="20191120 14:42:44.927"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:42.836" endtime="20191120 14:42:44.927"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:44.927" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:44.927" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:44.927" endtime="20191120 14:42:44.931"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:44.931" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:44.931" endtime="20191120 14:42:44.931"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:44.931" endtime="20191120 14:42:44.931"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:44.931" endtime="20191120 14:42:44.931"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:44.931" endtime="20191120 14:42:44.931"></status>
</kw>
<msg timestamp="20191120 14:42:44.931" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:44.927" endtime="20191120 14:42:44.931"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:44.931" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:44.931" endtime="20191120 14:42:44.931"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:44.931" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:44.931" endtime="20191120 14:42:44.936"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:44.936" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:44.936" endtime="20191120 14:42:44.936"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:44.986" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:44.936" endtime="20191120 14:42:44.986"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:46.987" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:44.986" endtime="20191120 14:42:46.987"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:46.988" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:46.987" endtime="20191120 14:42:46.988"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:44.936" endtime="20191120 14:42:46.988"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:44.927" endtime="20191120 14:42:46.989"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:46.991" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:46.991" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:46.990" endtime="20191120 14:42:46.991"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:46.993" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:46.993" endtime="20191120 14:42:46.994"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:46.992" endtime="20191120 14:42:46.994"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:46.991" endtime="20191120 14:42:46.994"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:46.991" endtime="20191120 14:42:46.994"></status>
</kw>
<msg timestamp="20191120 14:42:46.995" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:46.990" endtime="20191120 14:42:46.995"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:46.995" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:46.995" endtime="20191120 14:42:46.995"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:46.996" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:46.996" endtime="20191120 14:42:46.996"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:46.997" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:46.997" endtime="20191120 14:42:46.997"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:47.032" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:46.998" endtime="20191120 14:42:47.033"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:49.046" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:47.033" endtime="20191120 14:42:49.046"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:49.046" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:49.046" endtime="20191120 14:42:49.046"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:46.997" endtime="20191120 14:42:49.046"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:46.989" endtime="20191120 14:42:49.046"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:49.050" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:49.050" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:49.050" endtime="20191120 14:42:49.050"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:49.050" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:49.050" endtime="20191120 14:42:49.050"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:49.050" endtime="20191120 14:42:49.050"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:49.050" endtime="20191120 14:42:49.050"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:49.050" endtime="20191120 14:42:49.050"></status>
</kw>
<msg timestamp="20191120 14:42:49.050" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:49.046" endtime="20191120 14:42:49.050"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:49.050" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:49.050" endtime="20191120 14:42:49.050"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:49.050" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:42:49.050" endtime="20191120 14:42:49.050"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:49.056" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:42:49.050" endtime="20191120 14:42:49.056"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:49.089" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:42:49.056" endtime="20191120 14:42:49.090"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:51.092" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:49.090" endtime="20191120 14:42:51.093"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:51.096" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:51.094" endtime="20191120 14:42:51.097"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:49.056" endtime="20191120 14:42:51.098"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:49.046" endtime="20191120 14:42:51.099"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:51.105" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:51.106" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:51.104" endtime="20191120 14:42:51.107"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:51.114" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:51.114" endtime="20191120 14:42:51.115"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:51.110" endtime="20191120 14:42:51.115"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:51.109" endtime="20191120 14:42:51.115"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:51.107" endtime="20191120 14:42:51.116"></status>
</kw>
<msg timestamp="20191120 14:42:51.117" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:51.102" endtime="20191120 14:42:51.117"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:51.119" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:51.118" endtime="20191120 14:42:51.119"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:51.121" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:51.120" endtime="20191120 14:42:51.121"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:51.122" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:51.122" endtime="20191120 14:42:51.123"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:51.136" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:51.124" endtime="20191120 14:42:51.137"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:53.138" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:51.138" endtime="20191120 14:42:53.139"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:53.142" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:53.140" endtime="20191120 14:42:53.143"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:51.123" endtime="20191120 14:42:53.144"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:51.101" endtime="20191120 14:42:53.145"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:53.152" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:53.153" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:53.151" endtime="20191120 14:42:53.154"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:53.164" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:53.163" endtime="20191120 14:42:53.165"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:53.157" endtime="20191120 14:42:53.165"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:53.156" endtime="20191120 14:42:53.166"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:53.155" endtime="20191120 14:42:53.167"></status>
</kw>
<msg timestamp="20191120 14:42:53.169" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:53.148" endtime="20191120 14:42:53.169"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:53.172" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:53.170" endtime="20191120 14:42:53.172"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:53.175" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:53.173" endtime="20191120 14:42:53.175"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:53.178" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:53.177" endtime="20191120 14:42:53.178"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:53.214" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:53.180" endtime="20191120 14:42:53.214"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:55.215" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:53.215" endtime="20191120 14:42:55.216"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:55.219" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:55.217" endtime="20191120 14:42:55.220"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:53.179" endtime="20191120 14:42:55.221"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:53.147" endtime="20191120 14:42:55.222"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:55.228" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:55.229" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:55.227" endtime="20191120 14:42:55.230"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:55.240" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:55.239" endtime="20191120 14:42:55.240"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:55.233" endtime="20191120 14:42:55.241"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:55.231" endtime="20191120 14:42:55.242"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:55.230" endtime="20191120 14:42:55.242"></status>
</kw>
<msg timestamp="20191120 14:42:55.244" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:55.225" endtime="20191120 14:42:55.245"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:55.247" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:55.246" endtime="20191120 14:42:55.248"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:55.250" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:55.249" endtime="20191120 14:42:55.250"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:55.251" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:55.251" endtime="20191120 14:42:55.251"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:55.280" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:42:55.252" endtime="20191120 14:42:55.281"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:57.287" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:55.281" endtime="20191120 14:42:57.287"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:57.287" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:57.287" endtime="20191120 14:42:57.287"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:55.252" endtime="20191120 14:42:57.287"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:55.224" endtime="20191120 14:42:57.287"></status>
</kw>
<kw name="Then Delete Button is &quot;appeared&quot;" library="General definitions">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191120 14:42:57.287" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191120 14:42:57.287" endtime="20191120 14:42:57.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Element Should Be Visible</arg>
<arg>${btnDelete}</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Element Should Not Be Visible</arg>
<arg>${btnDelete}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Should Be Visible</arg>
<arg>${btnDelete}</arg>
</arguments>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<arguments>
<arg>${btnDelete}</arg>
</arguments>
<msg timestamp="20191120 14:42:57.318" level="INFO">Element '//div[@id='exit-footer' and @style='display: block;']/div[@id='delete-button']' is displayed.</msg>
<status status="PASS" starttime="20191120 14:42:57.287" endtime="20191120 14:42:57.318"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:57.287" endtime="20191120 14:42:57.318"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:57.287" endtime="20191120 14:42:57.318"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:57.287" endtime="20191120 14:42:57.318"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:57.318" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:57.318" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:57.318" endtime="20191120 14:42:57.318"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:57.318" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:57.318" endtime="20191120 14:42:57.318"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:57.318" endtime="20191120 14:42:57.318"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:57.318" endtime="20191120 14:42:57.326"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:57.318" endtime="20191120 14:42:57.326"></status>
</kw>
<msg timestamp="20191120 14:42:57.326" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:57.318" endtime="20191120 14:42:57.326"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:57.326" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:57.326" endtime="20191120 14:42:57.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:57.326" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:57.326" endtime="20191120 14:42:57.326"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:57.326" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:57.326" endtime="20191120 14:42:57.326"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:57.426" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:42:57.326" endtime="20191120 14:42:57.426"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:42:59.426" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:57.426" endtime="20191120 14:42:59.426"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:42:59.428" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:59.427" endtime="20191120 14:42:59.428"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:57.326" endtime="20191120 14:42:59.428"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:57.318" endtime="20191120 14:42:59.429"></status>
</kw>
<kw name="Then Delete Button is &quot;disappeared&quot;" library="General definitions">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191120 14:42:59.430" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191120 14:42:59.430" endtime="20191120 14:42:59.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Element Should Be Visible</arg>
<arg>${btnDelete}</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Element Should Not Be Visible</arg>
<arg>${btnDelete}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Should Not Be Visible</arg>
<arg>${btnDelete}</arg>
</arguments>
<kw name="Element Should Not Be Visible" library="SeleniumLibrary">
<doc>Verifies that the element identified by ``locator`` is NOT visible.</doc>
<arguments>
<arg>${btnDelete}</arg>
</arguments>
<msg timestamp="20191120 14:42:59.457" level="INFO">Element '//div[@id='exit-footer' and @style='display: block;']/div[@id='delete-button']' exists but is not displayed.</msg>
<status status="PASS" starttime="20191120 14:42:59.433" endtime="20191120 14:42:59.458"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:59.432" endtime="20191120 14:42:59.458"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:59.431" endtime="20191120 14:42:59.458"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:59.429" endtime="20191120 14:42:59.458"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:42:59.460" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:42:59.460" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:42:59.460" endtime="20191120 14:42:59.460"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:42:59.463" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:42:59.463" endtime="20191120 14:42:59.463"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:59.461" endtime="20191120 14:42:59.463"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:59.461" endtime="20191120 14:42:59.463"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:59.460" endtime="20191120 14:42:59.464"></status>
</kw>
<msg timestamp="20191120 14:42:59.464" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:42:59.459" endtime="20191120 14:42:59.464"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:42:59.465" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:42:59.464" endtime="20191120 14:42:59.465"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:42:59.466" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:42:59.465" endtime="20191120 14:42:59.466"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:42:59.466" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:42:59.466" endtime="20191120 14:42:59.466"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:42:59.477" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:42:59.467" endtime="20191120 14:42:59.477"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:01.480" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:42:59.478" endtime="20191120 14:43:01.481"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:01.484" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:01.482" endtime="20191120 14:43:01.485"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:59.467" endtime="20191120 14:43:01.486"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:59.459" endtime="20191120 14:43:01.487"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:01.494" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:01.495" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:01.493" endtime="20191120 14:43:01.495"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:01.505" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:01.504" endtime="20191120 14:43:01.506"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:01.498" endtime="20191120 14:43:01.507"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:01.497" endtime="20191120 14:43:01.507"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:01.496" endtime="20191120 14:43:01.508"></status>
</kw>
<msg timestamp="20191120 14:43:01.511" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:01.491" endtime="20191120 14:43:01.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:01.513" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:01.512" endtime="20191120 14:43:01.514"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:01.517" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:01.515" endtime="20191120 14:43:01.518"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:01.520" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:01.519" endtime="20191120 14:43:01.520"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:01.543" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:01.521" endtime="20191120 14:43:01.543"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:03.546" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:01.544" endtime="20191120 14:43:03.547"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:03.550" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:03.548" endtime="20191120 14:43:03.551"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:01.521" endtime="20191120 14:43:03.552"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:01.489" endtime="20191120 14:43:03.553"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:03.560" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:03.561" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:03.559" endtime="20191120 14:43:03.562"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:03.572" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:03.571" endtime="20191120 14:43:03.573"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:03.565" endtime="20191120 14:43:03.573"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:03.564" endtime="20191120 14:43:03.574"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:03.562" endtime="20191120 14:43:03.575"></status>
</kw>
<msg timestamp="20191120 14:43:03.577" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:03.556" endtime="20191120 14:43:03.577"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:03.580" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:03.578" endtime="20191120 14:43:03.580"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:03.583" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:03.581" endtime="20191120 14:43:03.584"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:03.586" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:03.585" endtime="20191120 14:43:03.587"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:03.619" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:03.590" endtime="20191120 14:43:03.619"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:05.621" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:03.619" endtime="20191120 14:43:05.622"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:05.625" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:05.623" endtime="20191120 14:43:05.626"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:03.588" endtime="20191120 14:43:05.627"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:03.555" endtime="20191120 14:43:05.628"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:05.634" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:05.635" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:05.633" endtime="20191120 14:43:05.636"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:05.646" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:05.645" endtime="20191120 14:43:05.647"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:05.639" endtime="20191120 14:43:05.647"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:05.638" endtime="20191120 14:43:05.648"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:05.636" endtime="20191120 14:43:05.649"></status>
</kw>
<msg timestamp="20191120 14:43:05.651" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:05.631" endtime="20191120 14:43:05.651"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:05.653" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:05.652" endtime="20191120 14:43:05.654"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:05.657" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:43:05.655" endtime="20191120 14:43:05.657"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:05.659" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:43:05.658" endtime="20191120 14:43:05.660"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:05.684" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:43:05.661" endtime="20191120 14:43:05.684"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:07.686" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:05.685" endtime="20191120 14:43:07.687"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:07.689" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:07.687" endtime="20191120 14:43:07.689"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:05.660" endtime="20191120 14:43:07.690"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:05.630" endtime="20191120 14:43:07.690"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 14:43:07.713" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191120 14:43:07.692" endtime="20191120 14:43:07.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 14:43:07.718" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191120 14:43:07.717" endtime="20191120 14:43:07.774"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:07.716" endtime="20191120 14:43:07.774"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:43:08.276" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:43:07.775" endtime="20191120 14:43:08.277"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:07.775" endtime="20191120 14:43:08.278"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:07.715" endtime="20191120 14:43:08.279"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:07.714" endtime="20191120 14:43:08.280"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 14:43:08.306" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191120 14:43:08.281" endtime="20191120 14:43:08.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 14:43:08.310" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 14:43:08.309" endtime="20191120 14:43:08.364"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:08.308" endtime="20191120 14:43:08.365"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:43:08.868" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:43:08.366" endtime="20191120 14:43:08.869"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:08.365" endtime="20191120 14:43:08.870"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:08.308" endtime="20191120 14:43:08.870"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:08.307" endtime="20191120 14:43:08.871"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191120 14:43:08.872" endtime="20191120 14:43:11.020"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:07.691" endtime="20191120 14:43:11.021"></status>
</kw>
<status status="PASS" starttime="20191120 14:42:33.130" endtime="20191120 14:43:11.022" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t3" name="INSERT_END_A_04_05_Verify that imVision X shall show correctly when plugging a connector that is matched to one of unplugged connectors in the End A list and the appropriate help text showed">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191120 14:43:11.032" endtime="20191120 14:43:11.033"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191120 14:43:11.035" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191120 14:43:12.887" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191120 14:43:11.034" endtime="20191120 14:43:12.887"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:11.030" endtime="20191120 14:43:12.888"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191120 14:43:12.890" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191120 14:43:12.890" endtime="20191120 14:43:12.891"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191120 14:43:12.892" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191120 14:43:12.891" endtime="20191120 14:43:19.415"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191120 14:43:19.416" endtime="20191120 14:43:20.533"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:43:21.036" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:43:20.534" endtime="20191120 14:43:21.036"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 14:43:21.049" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191120 14:43:21.037" endtime="20191120 14:43:21.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 14:43:21.050" endtime="20191120 14:43:21.051"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191120 14:43:21.063" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191120 14:43:21.051" endtime="20191120 14:43:21.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 14:43:21.063" endtime="20191120 14:43:21.064"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 14:43:21.075" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191120 14:43:21.064" endtime="20191120 14:43:21.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191120 14:43:21.076" endtime="20191120 14:43:21.076"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:21.036" endtime="20191120 14:43:21.076"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 14:43:21.078" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 14:43:21.078" endtime="20191120 14:43:21.155"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:21.077" endtime="20191120 14:43:21.156"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:43:21.659" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:43:21.157" endtime="20191120 14:43:21.659"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:21.156" endtime="20191120 14:43:21.659"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:21.077" endtime="20191120 14:43:21.660"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:12.889" endtime="20191120 14:43:21.660"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:11.028" endtime="20191120 14:43:21.660"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191120 14:43:21.662" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191120 14:43:21.661" endtime="20191120 14:43:21.707"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:43:22.227" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:43:21.708" endtime="20191120 14:43:22.227"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:21.708" endtime="20191120 14:43:22.227"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:21.661" endtime="20191120 14:43:22.227"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:22.237" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:22.237" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:22.230" endtime="20191120 14:43:22.237"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:22.247" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:22.247" endtime="20191120 14:43:22.247"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:22.239" endtime="20191120 14:43:22.247"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:22.239" endtime="20191120 14:43:22.247"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:22.237" endtime="20191120 14:43:22.247"></status>
</kw>
<msg timestamp="20191120 14:43:22.247" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:22.230" endtime="20191120 14:43:22.247"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:22.247" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:22.247" endtime="20191120 14:43:22.257"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:22.257" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:43:22.257" endtime="20191120 14:43:22.257"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:22.257" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:43:22.257" endtime="20191120 14:43:22.257"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:22.387" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:43:22.257" endtime="20191120 14:43:22.387"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:24.387" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:22.387" endtime="20191120 14:43:24.388"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:24.390" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:24.389" endtime="20191120 14:43:24.391"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:22.257" endtime="20191120 14:43:24.391"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:22.230" endtime="20191120 14:43:24.392"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:24.397" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:24.397" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:24.396" endtime="20191120 14:43:24.398"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:24.405" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:24.404" endtime="20191120 14:43:24.405"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:24.400" endtime="20191120 14:43:24.406"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:24.399" endtime="20191120 14:43:24.406"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:24.398" endtime="20191120 14:43:24.407"></status>
</kw>
<msg timestamp="20191120 14:43:24.409" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:24.394" endtime="20191120 14:43:24.409"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:24.410" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:24.410" endtime="20191120 14:43:24.410"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:24.411" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:24.411" endtime="20191120 14:43:24.412"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:24.412" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:24.412" endtime="20191120 14:43:24.413"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:24.435" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:24.414" endtime="20191120 14:43:24.435"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:26.437" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:24.435" endtime="20191120 14:43:26.438"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:26.441" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:26.439" endtime="20191120 14:43:26.442"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:24.413" endtime="20191120 14:43:26.443"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:24.393" endtime="20191120 14:43:26.444"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:26.452" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:26.452" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:26.450" endtime="20191120 14:43:26.453"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:26.463" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:26.462" endtime="20191120 14:43:26.464"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:26.456" endtime="20191120 14:43:26.465"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:26.455" endtime="20191120 14:43:26.465"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:26.453" endtime="20191120 14:43:26.466"></status>
</kw>
<msg timestamp="20191120 14:43:26.468" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:26.447" endtime="20191120 14:43:26.468"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:26.471" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:26.470" endtime="20191120 14:43:26.471"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:26.474" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:26.472" endtime="20191120 14:43:26.475"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:26.477" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:26.476" endtime="20191120 14:43:26.478"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:26.498" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:26.481" endtime="20191120 14:43:26.498"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:28.507" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:26.498" endtime="20191120 14:43:28.507"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:28.507" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:28.507" endtime="20191120 14:43:28.507"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:26.479" endtime="20191120 14:43:28.507"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:26.446" endtime="20191120 14:43:28.507"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:28.507" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:28.507" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:28.507" endtime="20191120 14:43:28.507"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:28.520" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:28.517" endtime="20191120 14:43:28.520"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:28.507" endtime="20191120 14:43:28.520"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:28.507" endtime="20191120 14:43:28.520"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:28.507" endtime="20191120 14:43:28.520"></status>
</kw>
<msg timestamp="20191120 14:43:28.520" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:28.507" endtime="20191120 14:43:28.520"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:28.527" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:28.520" endtime="20191120 14:43:28.527"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:28.530" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:43:28.527" endtime="20191120 14:43:28.530"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:28.530" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:43:28.530" endtime="20191120 14:43:28.530"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:28.587" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:43:28.537" endtime="20191120 14:43:28.587"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:30.588" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:28.587" endtime="20191120 14:43:30.590"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:30.594" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:30.591" endtime="20191120 14:43:30.594"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:28.530" endtime="20191120 14:43:30.595"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:28.507" endtime="20191120 14:43:30.596"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:30.603" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:30.603" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:30.602" endtime="20191120 14:43:30.604"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:30.614" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:30.613" endtime="20191120 14:43:30.615"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:30.607" endtime="20191120 14:43:30.615"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:30.606" endtime="20191120 14:43:30.616"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:30.605" endtime="20191120 14:43:30.617"></status>
</kw>
<msg timestamp="20191120 14:43:30.619" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:30.599" endtime="20191120 14:43:30.619"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:30.620" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:30.620" endtime="20191120 14:43:30.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:30.622" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:30.621" endtime="20191120 14:43:30.622"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:30.623" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:30.622" endtime="20191120 14:43:30.623"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:30.646" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:30.624" endtime="20191120 14:43:30.646"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:32.648" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:30.646" endtime="20191120 14:43:32.649"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:32.652" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:32.650" endtime="20191120 14:43:32.653"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:30.623" endtime="20191120 14:43:32.654"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:30.598" endtime="20191120 14:43:32.655"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:32.661" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:32.662" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:32.661" endtime="20191120 14:43:32.662"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:32.668" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:32.668" endtime="20191120 14:43:32.669"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:32.664" endtime="20191120 14:43:32.669"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:32.663" endtime="20191120 14:43:32.670"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:32.662" endtime="20191120 14:43:32.670"></status>
</kw>
<msg timestamp="20191120 14:43:32.671" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:32.658" endtime="20191120 14:43:32.672"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:32.673" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:32.672" endtime="20191120 14:43:32.673"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:32.675" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:32.674" endtime="20191120 14:43:32.675"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:32.677" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:32.676" endtime="20191120 14:43:32.677"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:32.720" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:32.679" endtime="20191120 14:43:32.721"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:34.722" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:32.721" endtime="20191120 14:43:34.723"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:34.725" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:34.724" endtime="20191120 14:43:34.726"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:32.678" endtime="20191120 14:43:34.726"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:32.656" endtime="20191120 14:43:34.727"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:34.732" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:34.732" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:34.731" endtime="20191120 14:43:34.733"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:34.740" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:34.739" endtime="20191120 14:43:34.741"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:34.735" endtime="20191120 14:43:34.741"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:34.734" endtime="20191120 14:43:34.741"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:34.733" endtime="20191120 14:43:34.742"></status>
</kw>
<msg timestamp="20191120 14:43:34.743" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:34.729" endtime="20191120 14:43:34.744"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:34.745" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:34.745" endtime="20191120 14:43:34.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:34.748" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:34.747" endtime="20191120 14:43:34.748"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:34.750" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:34.749" endtime="20191120 14:43:34.751"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:34.781" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:34.753" endtime="20191120 14:43:34.782"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:36.787" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:34.782" endtime="20191120 14:43:36.787"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:36.787" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:36.787" endtime="20191120 14:43:36.787"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:34.751" endtime="20191120 14:43:36.787"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:34.728" endtime="20191120 14:43:36.787"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtRestoreTheUnpluggedEndAPort}&quot;" library="Bulk Patching definitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20191120 14:43:36.857" level="INFO">${get helptext} = Restore the unplugged End A ports, or press Delete to reorder the entries.</msg>
<status status="PASS" starttime="20191120 14:43:36.787" endtime="20191120 14:43:36.857"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20191120 14:43:36.857" endtime="20191120 14:43:36.857"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:36.857" endtime="20191120 14:43:36.861"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:36.787" endtime="20191120 14:43:36.861"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:36.861" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:36.861" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:36.861" endtime="20191120 14:43:36.861"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:36.861" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:36.861" endtime="20191120 14:43:36.861"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:36.861" endtime="20191120 14:43:36.861"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:36.861" endtime="20191120 14:43:36.861"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:36.861" endtime="20191120 14:43:36.861"></status>
</kw>
<msg timestamp="20191120 14:43:36.867" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:36.861" endtime="20191120 14:43:36.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:36.867" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:36.867" endtime="20191120 14:43:36.867"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:36.867" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:36.867" endtime="20191120 14:43:36.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:36.869" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:36.867" endtime="20191120 14:43:36.869"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:36.947" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:36.869" endtime="20191120 14:43:36.947"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:38.948" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:36.947" endtime="20191120 14:43:38.949"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:38.952" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:38.950" endtime="20191120 14:43:38.953"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:36.869" endtime="20191120 14:43:38.954"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:36.861" endtime="20191120 14:43:38.955"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtInsertAllEndAPlugs}&quot;" library="Bulk Patching definitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20191120 14:43:39.004" level="INFO">${get helptext} = Insert all End A plugs, then select End B.</msg>
<status status="PASS" starttime="20191120 14:43:38.958" endtime="20191120 14:43:39.004"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20191120 14:43:39.006" endtime="20191120 14:43:39.007"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:39.005" endtime="20191120 14:43:39.007"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:38.956" endtime="20191120 14:43:39.008"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:39.011" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:39.011" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:39.011" endtime="20191120 14:43:39.012"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:39.017" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:39.017" endtime="20191120 14:43:39.017"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:39.013" endtime="20191120 14:43:39.018"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:39.013" endtime="20191120 14:43:39.018"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:39.012" endtime="20191120 14:43:39.018"></status>
</kw>
<msg timestamp="20191120 14:43:39.020" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:39.009" endtime="20191120 14:43:39.020"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:39.020" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:39.020" endtime="20191120 14:43:39.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:39.022" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:43:39.021" endtime="20191120 14:43:39.022"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:39.022" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:43:39.022" endtime="20191120 14:43:39.023"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:39.039" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 14:43:39.023" endtime="20191120 14:43:39.040"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:41.043" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:39.040" endtime="20191120 14:43:41.044"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:41.046" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:41.044" endtime="20191120 14:43:41.046"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:39.023" endtime="20191120 14:43:41.047"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:39.008" endtime="20191120 14:43:41.048"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:41.052" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:41.052" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:41.051" endtime="20191120 14:43:41.053"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:41.057" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:41.057" endtime="20191120 14:43:41.057"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:41.054" endtime="20191120 14:43:41.057"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:41.054" endtime="20191120 14:43:41.057"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:41.053" endtime="20191120 14:43:41.057"></status>
</kw>
<msg timestamp="20191120 14:43:41.057" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:41.050" endtime="20191120 14:43:41.062"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:41.062" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:41.062" endtime="20191120 14:43:41.062"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:41.062" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:41.062" endtime="20191120 14:43:41.062"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:41.062" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:41.062" endtime="20191120 14:43:41.062"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:41.107" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 14:43:41.062" endtime="20191120 14:43:41.107"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:43.107" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:41.107" endtime="20191120 14:43:43.108"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:43.111" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:43.110" endtime="20191120 14:43:43.112"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:41.062" endtime="20191120 14:43:43.113"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:41.049" endtime="20191120 14:43:43.114"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:43.121" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:43.121" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:43.119" endtime="20191120 14:43:43.122"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:43.131" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:43.130" endtime="20191120 14:43:43.131"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:43.125" endtime="20191120 14:43:43.132"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:43.124" endtime="20191120 14:43:43.132"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:43.122" endtime="20191120 14:43:43.132"></status>
</kw>
<msg timestamp="20191120 14:43:43.133" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:43.117" endtime="20191120 14:43:43.134"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:43.135" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:43.134" endtime="20191120 14:43:43.135"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:43.136" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:43.136" endtime="20191120 14:43:43.137"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:43.138" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:43.137" endtime="20191120 14:43:43.138"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:43.168" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 14:43:43.140" endtime="20191120 14:43:43.168"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:45.170" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:43.169" endtime="20191120 14:43:45.171"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:45.173" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:45.171" endtime="20191120 14:43:45.173"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:43.139" endtime="20191120 14:43:45.174"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:43.116" endtime="20191120 14:43:45.174"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 14:43:45.178" level="INFO">Length is 12</msg>
<msg timestamp="20191120 14:43:45.179" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 14:43:45.178" endtime="20191120 14:43:45.179"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 14:43:45.185" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 14:43:45.185" endtime="20191120 14:43:45.186"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:45.181" endtime="20191120 14:43:45.186"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:45.180" endtime="20191120 14:43:45.186"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:45.179" endtime="20191120 14:43:45.187"></status>
</kw>
<msg timestamp="20191120 14:43:45.188" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 14:43:45.176" endtime="20191120 14:43:45.188"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 14:43:45.190" level="INFO">1</msg>
<status status="PASS" starttime="20191120 14:43:45.189" endtime="20191120 14:43:45.190"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 14:43:45.192" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:43:45.191" endtime="20191120 14:43:45.192"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 14:43:45.194" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:43:45.193" endtime="20191120 14:43:45.194"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 14:43:45.224" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 14:43:45.196" endtime="20191120 14:43:45.225"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 14:43:47.227" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:45.225" endtime="20191120 14:43:47.228"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 14:43:47.230" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 14:43:47.229" endtime="20191120 14:43:47.231"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:45.195" endtime="20191120 14:43:47.231"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:45.175" endtime="20191120 14:43:47.232"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 14:43:47.251" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191120 14:43:47.234" endtime="20191120 14:43:47.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 14:43:47.255" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191120 14:43:47.255" endtime="20191120 14:43:47.305"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:47.254" endtime="20191120 14:43:47.305"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:43:47.808" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:43:47.306" endtime="20191120 14:43:47.808"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:47.306" endtime="20191120 14:43:47.808"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:47.253" endtime="20191120 14:43:47.809"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:47.252" endtime="20191120 14:43:47.809"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 14:43:47.819" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191120 14:43:47.810" endtime="20191120 14:43:47.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 14:43:47.822" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 14:43:47.821" endtime="20191120 14:43:47.853"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:47.821" endtime="20191120 14:43:47.853"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 14:43:48.356" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 14:43:47.854" endtime="20191120 14:43:48.356"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:47.854" endtime="20191120 14:43:48.357"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:47.820" endtime="20191120 14:43:48.357"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:47.820" endtime="20191120 14:43:48.357"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191120 14:43:48.358" endtime="20191120 14:43:50.547"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:47.233" endtime="20191120 14:43:50.547"></status>
</kw>
<status status="PASS" starttime="20191120 14:43:11.024" endtime="20191120 14:43:50.548" critical="yes"></status>
</test>
<status status="PASS" starttime="20191120 14:41:55.695" endtime="20191120 14:43:50.548"></status>
</suite>
<status status="PASS" starttime="20191120 14:41:55.695" endtime="20191120 14:43:50.552"></status>
</suite>
<status status="PASS" starttime="20191120 14:41:55.689" endtime="20191120 14:43:50.555"></status>
</suite>
<status status="PASS" starttime="20191120 14:41:55.689" endtime="20191120 14:43:50.557"></status>
</suite>
<status status="PASS" starttime="20191120 14:41:55.666" endtime="20191120 14:43:50.560"></status>
</suite>
<statistics>
<total>
<stat pass="3" fail="0">Critical Tests</stat>
<stat pass="3" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="3" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="3" fail="0" id="s1-s1" name="Test Resources">BulkPatching Robot.Test Resources</stat>
<stat pass="3" fail="0" id="s1-s1-s1" name="Test Suites">BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="3" fail="0" id="s1-s1-s1-s1" name="2. Insert All End As">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As</stat>
<stat pass="3" fail="0" id="s1-s1-s1-s1-s1" name="2.4. Check End A when plugging correct tip in the middle of list of End A then replug">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As.2.4. Check End A when plugging correct tip in the middle of list of End A then replug</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
