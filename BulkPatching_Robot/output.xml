<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20191119 14:45:39.474" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1" name="Test Resources" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources">
<suite id="s1-s1-s1" name="Test Suites" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites">
<suite id="s1-s1-s1-s1" name="2. Insert All End As" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As">
<suite id="s1-s1-s1-s1-s1" name="2.1. Check header of End A and End B when openning Bulk Patching screen firstly" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As\2.1. Check header of End A and End B when openning Bulk Patching screen firstly.robot">
<test id="s1-s1-s1-s1-s1-t1" name="INSERT_END_A_01_01_Verify that imVision X shows correctly after selecting Bulk Patching button on the home page if observing all ImVisionX Displays">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191119 14:45:39.924" endtime="20191119 14:45:39.928"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191119 14:45:39.928" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191119 14:45:41.774" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191119 14:45:39.928" endtime="20191119 14:45:41.774"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:39.924" endtime="20191119 14:45:41.774"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191119 14:45:41.774" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191119 14:45:41.774" endtime="20191119 14:45:41.774"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191119 14:45:41.774" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191119 14:45:41.774" endtime="20191119 14:45:48.377"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191119 14:45:48.378" endtime="20191119 14:45:49.514"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:45:50.034" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:45:49.514" endtime="20191119 14:45:50.034"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:45:50.044" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191119 14:45:50.034" endtime="20191119 14:45:50.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:45:50.044" endtime="20191119 14:45:50.044"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191119 14:45:50.058" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191119 14:45:50.044" endtime="20191119 14:45:50.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:45:50.058" endtime="20191119 14:45:50.058"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:45:50.073" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191119 14:45:50.058" endtime="20191119 14:45:50.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191119 14:45:50.073" endtime="20191119 14:45:50.073"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:50.034" endtime="20191119 14:45:50.073"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:45:50.073" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:45:50.073" endtime="20191119 14:45:50.162"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:50.073" endtime="20191119 14:45:50.162"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:45:50.673" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:45:50.163" endtime="20191119 14:45:50.673"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:50.163" endtime="20191119 14:45:50.673"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:50.073" endtime="20191119 14:45:50.673"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:41.774" endtime="20191119 14:45:50.673"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:39.924" endtime="20191119 14:45:50.673"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191119 14:45:50.673" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191119 14:45:50.673" endtime="20191119 14:45:50.722"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:45:51.224" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:45:50.722" endtime="20191119 14:45:51.224"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:50.722" endtime="20191119 14:45:51.224"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:50.673" endtime="20191119 14:45:51.224"></status>
</kw>
<kw name="Then Bulk Patching Screen Should Be Opened" library="Bulk Patching Page">
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<arguments>
<arg>${lblBulk Patching Title}</arg>
</arguments>
<msg timestamp="20191119 14:45:51.248" level="INFO">Current page contains element '//div[@id='bulk-patch-title' and @style='display: block;']'.</msg>
<status status="PASS" starttime="20191119 14:45:51.228" endtime="20191119 14:45:51.248"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:51.228" endtime="20191119 14:45:51.248"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:45:51.255" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191119 14:45:51.255" endtime="20191119 14:45:51.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:45:51.265" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191119 14:45:51.265" endtime="20191119 14:45:51.308"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:51.265" endtime="20191119 14:45:51.308"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:45:51.814" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:45:51.309" endtime="20191119 14:45:51.814"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:51.308" endtime="20191119 14:45:51.814"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:51.265" endtime="20191119 14:45:51.814"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:51.264" endtime="20191119 14:45:51.814"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:45:51.824" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191119 14:45:51.814" endtime="20191119 14:45:51.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:45:51.824" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:45:51.824" endtime="20191119 14:45:51.870"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:51.824" endtime="20191119 14:45:51.870"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:45:52.374" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:45:51.871" endtime="20191119 14:45:52.375"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:51.871" endtime="20191119 14:45:52.375"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:51.824" endtime="20191119 14:45:52.377"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:51.824" endtime="20191119 14:45:52.377"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191119 14:45:52.377" endtime="20191119 14:45:54.595"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:51.255" endtime="20191119 14:45:54.595"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:39.924" endtime="20191119 14:45:54.595" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t2" name="INSERT_END_A_01_02_Verify that imVision X shows correctly after selecting Bulk Patching button on the home page if observing the header of End A">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191119 14:45:54.608" endtime="20191119 14:45:54.608"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191119 14:45:54.608" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191119 14:45:56.446" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191119 14:45:54.608" endtime="20191119 14:45:56.447"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:54.608" endtime="20191119 14:45:56.448"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191119 14:45:56.452" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191119 14:45:56.451" endtime="20191119 14:45:56.453"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191119 14:45:56.456" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191119 14:45:56.454" endtime="20191119 14:46:00.826"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191119 14:46:00.827" endtime="20191119 14:46:01.954"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:02.455" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:01.954" endtime="20191119 14:46:02.455"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:46:02.505" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191119 14:46:02.455" endtime="20191119 14:46:02.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:02.505" endtime="20191119 14:46:02.506"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191119 14:46:02.526" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191119 14:46:02.506" endtime="20191119 14:46:02.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:02.526" endtime="20191119 14:46:02.526"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:46:02.544" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191119 14:46:02.526" endtime="20191119 14:46:02.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:02.544" endtime="20191119 14:46:02.544"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:02.455" endtime="20191119 14:46:02.544"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:02.544" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:46:02.544" endtime="20191119 14:46:02.664"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:02.544" endtime="20191119 14:46:02.665"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:03.185" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:02.668" endtime="20191119 14:46:03.185"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:02.666" endtime="20191119 14:46:03.185"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:02.544" endtime="20191119 14:46:03.187"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:56.449" endtime="20191119 14:46:03.187"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:54.605" endtime="20191119 14:46:03.187"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191119 14:46:03.195" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191119 14:46:03.187" endtime="20191119 14:46:03.264"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:03.766" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:03.265" endtime="20191119 14:46:03.766"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:03.264" endtime="20191119 14:46:03.766"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:03.187" endtime="20191119 14:46:03.766"></status>
</kw>
<kw name="Then The Header of End A Is &quot;${active}&quot;" library="Bulk Patching definitions">
<kw name="Get Status of Tab End A" library="Bulk Patching Page">
<assign>
<var>${get status}</var>
</assign>
<kw name="Get Element Attribute" library="SeleniumLibrary">
<doc>Returns the value of ``attribute`` from the element ``locator``.</doc>
<arguments>
<arg>${tabEndA}</arg>
<arg>style</arg>
</arguments>
<assign>
<var>${output status}</var>
</assign>
<msg timestamp="20191119 14:46:03.787" level="INFO">${output status} = background: black;</msg>
<status status="PASS" starttime="20191119 14:46:03.768" endtime="20191119 14:46:03.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${output status}' == '${attribute tab active}'</arg>
<arg>Set Variable</arg>
<arg>"active"</arg>
<arg>ELSE IF</arg>
<arg>'${output status}' == '${attribute tab inactive}'</arg>
<arg>Set Variable</arg>
<arg>"inactive"</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"active"</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:03.788" endtime="20191119 14:46:03.788"></status>
</kw>
<msg timestamp="20191119 14:46:03.788" level="INFO">${status} = "active"</msg>
<status status="PASS" starttime="20191119 14:46:03.787" endtime="20191119 14:46:03.789"></status>
</kw>
<msg timestamp="20191119 14:46:03.789" level="INFO">${get status} = "active"</msg>
<status status="PASS" starttime="20191119 14:46:03.767" endtime="20191119 14:46:03.789"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>${get status}</arg>
<arg>msg="Status of End A is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:03.789" endtime="20191119 14:46:03.790"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:03.767" endtime="20191119 14:46:03.790"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:46:03.799" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191119 14:46:03.791" endtime="20191119 14:46:03.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:03.801" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191119 14:46:03.801" endtime="20191119 14:46:03.839"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:03.800" endtime="20191119 14:46:03.840"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:04.342" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:03.841" endtime="20191119 14:46:04.342"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:03.840" endtime="20191119 14:46:04.343"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:03.800" endtime="20191119 14:46:04.344"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:03.799" endtime="20191119 14:46:04.344"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:46:04.363" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191119 14:46:04.345" endtime="20191119 14:46:04.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:04.369" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:46:04.368" endtime="20191119 14:46:04.417"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:04.367" endtime="20191119 14:46:04.418"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:04.934" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:04.419" endtime="20191119 14:46:04.934"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:04.418" endtime="20191119 14:46:04.934"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:04.365" endtime="20191119 14:46:04.934"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:04.364" endtime="20191119 14:46:04.934"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191119 14:46:04.934" endtime="20191119 14:46:07.135"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:03.790" endtime="20191119 14:46:07.135"></status>
</kw>
<status status="PASS" starttime="20191119 14:45:54.600" endtime="20191119 14:46:07.135" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t3" name="INSERT_END_A_01_03_Verify that imVision X shows correctly after selecting Bulk Patching button on the home page if observing the header of End B">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:07.148" endtime="20191119 14:46:07.148"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191119 14:46:07.148" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191119 14:46:08.984" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191119 14:46:07.148" endtime="20191119 14:46:08.984"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:07.144" endtime="20191119 14:46:08.984"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191119 14:46:08.984" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191119 14:46:08.984" endtime="20191119 14:46:08.984"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191119 14:46:08.984" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191119 14:46:08.984" endtime="20191119 14:46:13.069"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191119 14:46:13.069" endtime="20191119 14:46:14.196"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:14.715" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:14.197" endtime="20191119 14:46:14.715"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:46:14.753" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191119 14:46:14.717" endtime="20191119 14:46:14.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:14.753" endtime="20191119 14:46:14.758"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191119 14:46:14.775" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191119 14:46:14.758" endtime="20191119 14:46:14.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:14.775" endtime="20191119 14:46:14.775"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:46:14.795" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191119 14:46:14.775" endtime="20191119 14:46:14.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:14.795" endtime="20191119 14:46:14.795"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:14.715" endtime="20191119 14:46:14.795"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:14.795" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:46:14.795" endtime="20191119 14:46:14.910"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:14.795" endtime="20191119 14:46:14.911"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:15.415" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:14.913" endtime="20191119 14:46:15.415"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:14.912" endtime="20191119 14:46:15.415"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:14.795" endtime="20191119 14:46:15.415"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:08.984" endtime="20191119 14:46:15.415"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:07.142" endtime="20191119 14:46:15.418"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191119 14:46:15.418" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191119 14:46:15.418" endtime="20191119 14:46:15.500"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:16.004" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:15.501" endtime="20191119 14:46:16.004"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:15.501" endtime="20191119 14:46:16.004"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:15.418" endtime="20191119 14:46:16.005"></status>
</kw>
<kw name="Then The Header of End B Is &quot;${inactive}&quot;" library="Bulk Patching definitions">
<kw name="Get Status of Tab End B" library="Bulk Patching definitions">
<assign>
<var>${get status}</var>
</assign>
<kw name="Get Element Attribute" library="SeleniumLibrary">
<doc>Returns the value of ``attribute`` from the element ``locator``.</doc>
<arguments>
<arg>${tabEndB}</arg>
<arg>style</arg>
</arguments>
<assign>
<var>${output status}</var>
</assign>
<msg timestamp="20191119 14:46:16.046" level="INFO">${output status} = background: gray;</msg>
<status status="PASS" starttime="20191119 14:46:16.009" endtime="20191119 14:46:16.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${output status}' == '${attribute tab active}'</arg>
<arg>Set Variable</arg>
<arg>"active"</arg>
<arg>ELSE IF</arg>
<arg>'${output status}' == '${attribute tab inactive}'</arg>
<arg>Set Variable</arg>
<arg>"inactive"</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"inactive"</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:16.048" endtime="20191119 14:46:16.048"></status>
</kw>
<msg timestamp="20191119 14:46:16.048" level="INFO">${status} = "inactive"</msg>
<status status="PASS" starttime="20191119 14:46:16.047" endtime="20191119 14:46:16.049"></status>
</kw>
<msg timestamp="20191119 14:46:16.049" level="INFO">${get status} = "inactive"</msg>
<status status="PASS" starttime="20191119 14:46:16.008" endtime="20191119 14:46:16.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>${get status}</arg>
<arg>msg="Status of End B is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:16.050" endtime="20191119 14:46:16.050"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:16.007" endtime="20191119 14:46:16.051"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:46:16.063" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191119 14:46:16.052" endtime="20191119 14:46:16.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:16.066" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191119 14:46:16.065" endtime="20191119 14:46:16.103"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:16.065" endtime="20191119 14:46:16.103"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:16.605" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:16.104" endtime="20191119 14:46:16.606"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:16.104" endtime="20191119 14:46:16.607"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:16.064" endtime="20191119 14:46:16.608"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:16.064" endtime="20191119 14:46:16.608"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:46:16.635" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191119 14:46:16.610" endtime="20191119 14:46:16.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:16.641" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:46:16.640" endtime="20191119 14:46:16.690"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:16.639" endtime="20191119 14:46:16.690"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:17.195" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:16.691" endtime="20191119 14:46:17.195"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:16.691" endtime="20191119 14:46:17.195"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:16.638" endtime="20191119 14:46:17.197"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:16.636" endtime="20191119 14:46:17.197"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191119 14:46:17.197" endtime="20191119 14:46:19.314"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:16.051" endtime="20191119 14:46:19.314"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:07.140" endtime="20191119 14:46:19.314" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t4" name="INSERT_END_A_01_04_Verify that imVision X shows correctly after selecting Bulk Patching button on the home page if observing the help text on Display of ImVisionX">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:19.319" endtime="20191119 14:46:19.319"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191119 14:46:19.319" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191119 14:46:21.145" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191119 14:46:19.319" endtime="20191119 14:46:21.145"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:19.319" endtime="20191119 14:46:21.145"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191119 14:46:21.145" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191119 14:46:21.145" endtime="20191119 14:46:21.145"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191119 14:46:21.145" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191119 14:46:21.145" endtime="20191119 14:46:25.425"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191119 14:46:25.426" endtime="20191119 14:46:26.615"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:27.115" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:26.615" endtime="20191119 14:46:27.115"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:46:27.158" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191119 14:46:27.117" endtime="20191119 14:46:27.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:27.164" endtime="20191119 14:46:27.164"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191119 14:46:27.185" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191119 14:46:27.164" endtime="20191119 14:46:27.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:27.185" endtime="20191119 14:46:27.185"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:46:27.199" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191119 14:46:27.185" endtime="20191119 14:46:27.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:27.199" endtime="20191119 14:46:27.199"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:27.117" endtime="20191119 14:46:27.199"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:27.199" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:46:27.199" endtime="20191119 14:46:27.312"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:27.199" endtime="20191119 14:46:27.313"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:27.834" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:27.314" endtime="20191119 14:46:27.834"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:27.313" endtime="20191119 14:46:27.834"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:27.199" endtime="20191119 14:46:27.834"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:21.145" endtime="20191119 14:46:27.834"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:19.318" endtime="20191119 14:46:27.834"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191119 14:46:27.844" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191119 14:46:27.834" endtime="20191119 14:46:27.944"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:28.455" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:27.946" endtime="20191119 14:46:28.456"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:27.945" endtime="20191119 14:46:28.458"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:27.834" endtime="20191119 14:46:28.459"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtInsertAllEndAPlugs}&quot;" library="Bulk Patching definitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20191119 14:46:28.515" level="INFO">${get helptext} = Insert all End A plugs, then select End B.</msg>
<status status="PASS" starttime="20191119 14:46:28.462" endtime="20191119 14:46:28.515"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:28.515" endtime="20191119 14:46:28.515"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:28.461" endtime="20191119 14:46:28.515"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:46:28.524" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191119 14:46:28.524" endtime="20191119 14:46:28.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:28.535" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191119 14:46:28.535" endtime="20191119 14:46:28.579"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:28.535" endtime="20191119 14:46:28.579"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:29.081" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:28.580" endtime="20191119 14:46:29.082"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:28.579" endtime="20191119 14:46:29.083"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:28.535" endtime="20191119 14:46:29.084"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:28.535" endtime="20191119 14:46:29.085"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:46:29.112" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191119 14:46:29.086" endtime="20191119 14:46:29.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:29.117" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:46:29.116" endtime="20191119 14:46:29.159"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:29.115" endtime="20191119 14:46:29.159"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:29.660" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:29.160" endtime="20191119 14:46:29.660"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:29.159" endtime="20191119 14:46:29.661"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:29.115" endtime="20191119 14:46:29.661"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:29.113" endtime="20191119 14:46:29.662"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191119 14:46:29.662" endtime="20191119 14:46:31.815"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:28.524" endtime="20191119 14:46:31.815"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:19.314" endtime="20191119 14:46:31.815" critical="yes"></status>
</test>
<status status="PASS" starttime="20191119 14:45:39.536" endtime="20191119 14:46:31.816"></status>
</suite>
<suite id="s1-s1-s1-s1-s2" name="2.2. Check End A when plugging correct tip on End A" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As\2.2. Check End A when plugging correct tip on End A.robot">
<test id="s1-s1-s1-s1-s2-t1" name="INSERT_END_A_02_02_01_Verify that all ImVisionXs in the zone show the bulk patching list correctly after plugging a connector into the End A list if there is a 24-port Legacy Copper">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:31.838" endtime="20191119 14:46:31.838"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191119 14:46:31.838" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191119 14:46:33.713" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191119 14:46:31.838" endtime="20191119 14:46:33.714"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:31.838" endtime="20191119 14:46:33.715"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191119 14:46:33.719" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191119 14:46:33.718" endtime="20191119 14:46:33.720"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191119 14:46:33.723" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191119 14:46:33.721" endtime="20191119 14:46:38.188"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191119 14:46:38.190" endtime="20191119 14:46:39.345"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:39.865" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:39.345" endtime="20191119 14:46:39.865"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:46:39.878" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191119 14:46:39.866" endtime="20191119 14:46:39.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:39.879" endtime="20191119 14:46:39.879"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191119 14:46:39.885" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191119 14:46:39.880" endtime="20191119 14:46:39.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:39.885" endtime="20191119 14:46:39.885"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:46:39.895" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191119 14:46:39.885" endtime="20191119 14:46:39.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:39.895" endtime="20191119 14:46:39.895"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:39.865" endtime="20191119 14:46:39.895"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:39.905" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:46:39.905" endtime="20191119 14:46:40.005"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:39.905" endtime="20191119 14:46:40.006"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:40.525" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:40.008" endtime="20191119 14:46:40.525"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:40.007" endtime="20191119 14:46:40.525"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:39.905" endtime="20191119 14:46:40.525"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:33.716" endtime="20191119 14:46:40.525"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:31.838" endtime="20191119 14:46:40.525"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191119 14:46:40.525" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191119 14:46:40.525" endtime="20191119 14:46:40.574"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:41.077" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:40.575" endtime="20191119 14:46:41.077"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:40.574" endtime="20191119 14:46:41.077"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:40.525" endtime="20191119 14:46:41.078"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:46:41.079" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:46:41.079" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:46:41.079" endtime="20191119 14:46:41.080"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:46:41.087" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:46:41.086" endtime="20191119 14:46:41.088"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:41.080" endtime="20191119 14:46:41.088"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:41.080" endtime="20191119 14:46:41.089"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:41.080" endtime="20191119 14:46:41.090"></status>
</kw>
<msg timestamp="20191119 14:46:41.092" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:46:41.078" endtime="20191119 14:46:41.092"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:46:41.095" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:46:41.093" endtime="20191119 14:46:41.095"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:46:41.098" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:46:41.096" endtime="20191119 14:46:41.098"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:46:41.101" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:46:41.100" endtime="20191119 14:46:41.102"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:46:41.129" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:46:41.105" endtime="20191119 14:46:41.129"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:46:43.135" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:46:41.130" endtime="20191119 14:46:43.135"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:46:43.136" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:46:43.136" endtime="20191119 14:46:43.136"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:41.103" endtime="20191119 14:46:43.137"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:41.078" endtime="20191119 14:46:43.137"></status>
</kw>
<kw name="Then Check to see if Rack &quot;1&quot; Panel &quot;1&quot; Port &quot;1&quot; existed in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:43.138" endtime="20191119 14:46:43.139"></status>
</kw>
<msg timestamp="20191119 14:46:43.139" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191119 14:46:43.138" endtime="20191119 14:46:43.139"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191119 14:46:43.140" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191119 14:46:43.139" endtime="20191119 14:46:43.140"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191119 14:46:43.140" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191119 14:46:43.140" endtime="20191119 14:46:43.141"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191119 14:46:43.141" level="INFO">${input port} = -Port 1</msg>
<status status="PASS" starttime="20191119 14:46:43.141" endtime="20191119 14:46:43.141"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191119 14:46:43.142" level="INFO">${input port information} = Rack 1-Panel 1-Port 1</msg>
<status status="PASS" starttime="20191119 14:46:43.142" endtime="20191119 14:46:43.142"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191119 14:46:43.143" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191119 14:46:43.143" endtime="20191119 14:46:43.143"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191119 14:46:43.144" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 1')]</msg>
<status status="PASS" starttime="20191119 14:46:43.143" endtime="20191119 14:46:43.144"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:46:43.158" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191119 14:46:43.145" endtime="20191119 14:46:43.158"></status>
</kw>
<msg timestamp="20191119 14:46:43.158" level="INFO">${number of lines} = 1</msg>
<status status="PASS" starttime="20191119 14:46:43.144" endtime="20191119 14:46:43.159"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:46:43.159" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191119 14:46:43.159" endtime="20191119 14:46:43.159"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191119 14:46:43.161" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191119 14:46:43.160" endtime="20191119 14:46:43.161"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191119 14:46:43.161" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191119 14:46:43.161" endtime="20191119 14:46:43.161"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191119 14:46:43.162" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 1')]</msg>
<status status="PASS" starttime="20191119 14:46:43.162" endtime="20191119 14:46:43.162"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191119 14:46:43.163" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 1')]</msg>
<status status="PASS" starttime="20191119 14:46:43.162" endtime="20191119 14:46:43.163"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:46:43.174" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191119 14:46:43.163" endtime="20191119 14:46:43.175"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191119 14:46:43.175" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:46:43.175" endtime="20191119 14:46:43.176"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:43.160" endtime="20191119 14:46:43.176"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:43.160" endtime="20191119 14:46:43.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${count}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20191119 14:46:43.176" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191119 14:46:43.176" endtime="20191119 14:46:43.177"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:43.137" endtime="20191119 14:46:43.177"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:46:43.178" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:46:43.179" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:46:43.178" endtime="20191119 14:46:43.179"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:46:43.181" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:46:43.181" endtime="20191119 14:46:43.182"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:43.179" endtime="20191119 14:46:43.182"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:43.179" endtime="20191119 14:46:43.182"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:43.179" endtime="20191119 14:46:43.182"></status>
</kw>
<msg timestamp="20191119 14:46:43.183" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:46:43.178" endtime="20191119 14:46:43.183"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:46:43.183" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:46:43.183" endtime="20191119 14:46:43.184"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:46:43.184" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:46:43.184" endtime="20191119 14:46:43.184"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:46:43.185" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:46:43.185" endtime="20191119 14:46:43.185"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:46:43.200" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:46:43.186" endtime="20191119 14:46:43.201"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:46:45.234" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:46:43.201" endtime="20191119 14:46:45.234"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:46:45.234" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:46:45.234" endtime="20191119 14:46:45.234"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:43.185" endtime="20191119 14:46:45.234"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:43.177" endtime="20191119 14:46:45.234"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:46:45.244" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191119 14:46:45.234" endtime="20191119 14:46:45.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:45.247" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191119 14:46:45.247" endtime="20191119 14:46:45.290"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:45.247" endtime="20191119 14:46:45.290"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:45.794" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:45.291" endtime="20191119 14:46:45.794"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:45.291" endtime="20191119 14:46:45.794"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:45.247" endtime="20191119 14:46:45.795"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:45.244" endtime="20191119 14:46:45.795"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:46:45.804" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191119 14:46:45.795" endtime="20191119 14:46:45.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:45.807" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:46:45.806" endtime="20191119 14:46:45.838"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:45.806" endtime="20191119 14:46:45.838"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:46.341" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:45.840" endtime="20191119 14:46:46.341"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:45.839" endtime="20191119 14:46:46.341"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:45.805" endtime="20191119 14:46:46.342"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:45.805" endtime="20191119 14:46:46.342"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191119 14:46:46.342" endtime="20191119 14:46:48.485"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:45.234" endtime="20191119 14:46:48.485"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:31.838" endtime="20191119 14:46:48.485" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s2-t2" name="INSERT_END_A_02_02_02_Verify that all ImVisionXs in the zone show the bulk patching list correctly after plugging a connector into the End A list if there is a 48-port Legacy Copper">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:48.497" endtime="20191119 14:46:48.497"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191119 14:46:48.497" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191119 14:46:50.355" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191119 14:46:48.497" endtime="20191119 14:46:50.355"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:48.495" endtime="20191119 14:46:50.357"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191119 14:46:50.357" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191119 14:46:50.357" endtime="20191119 14:46:50.357"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191119 14:46:50.365" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191119 14:46:50.357" endtime="20191119 14:46:56.849"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191119 14:46:56.849" endtime="20191119 14:46:57.985"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:58.485" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:57.985" endtime="20191119 14:46:58.485"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:46:58.495" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191119 14:46:58.485" endtime="20191119 14:46:58.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:58.495" endtime="20191119 14:46:58.495"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191119 14:46:58.505" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191119 14:46:58.495" endtime="20191119 14:46:58.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:58.505" endtime="20191119 14:46:58.505"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:46:58.525" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191119 14:46:58.505" endtime="20191119 14:46:58.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:58.525" endtime="20191119 14:46:58.525"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:58.485" endtime="20191119 14:46:58.525"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:46:58.525" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:46:58.525" endtime="20191119 14:46:58.631"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:58.525" endtime="20191119 14:46:58.632"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:59.135" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:58.633" endtime="20191119 14:46:59.135"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:58.632" endtime="20191119 14:46:59.135"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:58.525" endtime="20191119 14:46:59.135"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:50.357" endtime="20191119 14:46:59.135"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:48.495" endtime="20191119 14:46:59.135"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191119 14:46:59.135" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191119 14:46:59.135" endtime="20191119 14:46:59.183"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:46:59.705" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:46:59.184" endtime="20191119 14:46:59.705"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:59.183" endtime="20191119 14:46:59.705"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:59.135" endtime="20191119 14:46:59.705"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;2&quot; Port &quot;48&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:46:59.705" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:46:59.705" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:46:59.705" endtime="20191119 14:46:59.705"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:59.705" endtime="20191119 14:46:59.705"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:59.705" endtime="20191119 14:46:59.705"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:46:59.705" endtime="20191119 14:46:59.705"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:59.705" endtime="20191119 14:46:59.705"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:46:59.705" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:46:59.705" endtime="20191119 14:46:59.705"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:59.705" endtime="20191119 14:46:59.705"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:59.705" endtime="20191119 14:46:59.715"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:59.705" endtime="20191119 14:46:59.715"></status>
</kw>
<msg timestamp="20191119 14:46:59.715" level="INFO">${panel index} = 3</msg>
<status status="PASS" starttime="20191119 14:46:59.705" endtime="20191119 14:46:59.715"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:46:59.715" level="INFO">3</msg>
<status status="PASS" starttime="20191119 14:46:59.715" endtime="20191119 14:46:59.715"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:46:59.715" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 3 --port 48</msg>
<status status="PASS" starttime="20191119 14:46:59.715" endtime="20191119 14:46:59.715"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:46:59.715" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 3 --port 48</msg>
<status status="PASS" starttime="20191119 14:46:59.715" endtime="20191119 14:46:59.715"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:46:59.785" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 3 --port 48</msg>
<status status="PASS" starttime="20191119 14:46:59.715" endtime="20191119 14:46:59.785"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:47:01.796" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=3
type=1100ps
panel_state=RUN
row=2
serial=28FFFF600003
count=11
# </msg>
<status status="PASS" starttime="20191119 14:46:59.785" endtime="20191119 14:47:01.797"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:47:01.800" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=3
type=1100ps
panel_state=RUN
row=2
serial=28FFFF600003
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:01.798" endtime="20191119 14:47:01.801"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:59.715" endtime="20191119 14:47:01.802"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:59.705" endtime="20191119 14:47:01.803"></status>
</kw>
<kw name="Then Check to see if Rack &quot;1&quot; Panel &quot;2&quot; Port &quot;48&quot; existed in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:01.810" endtime="20191119 14:47:01.811"></status>
</kw>
<msg timestamp="20191119 14:47:01.812" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191119 14:47:01.807" endtime="20191119 14:47:01.812"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191119 14:47:01.815" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191119 14:47:01.813" endtime="20191119 14:47:01.815"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191119 14:47:01.818" level="INFO">${input panel} = -Panel 2</msg>
<status status="PASS" starttime="20191119 14:47:01.816" endtime="20191119 14:47:01.818"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191119 14:47:01.821" level="INFO">${input port} = -Port 48</msg>
<status status="PASS" starttime="20191119 14:47:01.819" endtime="20191119 14:47:01.821"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191119 14:47:01.824" level="INFO">${input port information} = Rack 1-Panel 2-Port 48</msg>
<status status="PASS" starttime="20191119 14:47:01.822" endtime="20191119 14:47:01.824"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191119 14:47:01.827" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191119 14:47:01.826" endtime="20191119 14:47:01.828"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191119 14:47:01.831" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 48')]</msg>
<status status="PASS" starttime="20191119 14:47:01.829" endtime="20191119 14:47:01.831"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:47:01.865" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191119 14:47:01.834" endtime="20191119 14:47:01.866"></status>
</kw>
<msg timestamp="20191119 14:47:01.866" level="INFO">${number of lines} = 1</msg>
<status status="PASS" starttime="20191119 14:47:01.832" endtime="20191119 14:47:01.867"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:47:01.869" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191119 14:47:01.868" endtime="20191119 14:47:01.869"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191119 14:47:01.871" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191119 14:47:01.871" endtime="20191119 14:47:01.871"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191119 14:47:01.872" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191119 14:47:01.872" endtime="20191119 14:47:01.873"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191119 14:47:01.874" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 48')]</msg>
<status status="PASS" starttime="20191119 14:47:01.873" endtime="20191119 14:47:01.874"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191119 14:47:01.875" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 48')]</msg>
<status status="PASS" starttime="20191119 14:47:01.874" endtime="20191119 14:47:01.875"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:47:01.891" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191119 14:47:01.875" endtime="20191119 14:47:01.891"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191119 14:47:01.892" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:47:01.891" endtime="20191119 14:47:01.892"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:01.870" endtime="20191119 14:47:01.892"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:01.869" endtime="20191119 14:47:01.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${count}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20191119 14:47:01.893" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191119 14:47:01.893" endtime="20191119 14:47:01.894"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:01.805" endtime="20191119 14:47:01.894"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;2&quot; Port &quot;48&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:47:01.896" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:47:01.897" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:47:01.896" endtime="20191119 14:47:01.897"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:01.898" endtime="20191119 14:47:01.900"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:01.897" endtime="20191119 14:47:01.900"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:01.901" endtime="20191119 14:47:01.903"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:01.901" endtime="20191119 14:47:01.903"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:47:01.907" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:47:01.907" endtime="20191119 14:47:01.907"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:01.904" endtime="20191119 14:47:01.907"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:01.904" endtime="20191119 14:47:01.908"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:01.897" endtime="20191119 14:47:01.908"></status>
</kw>
<msg timestamp="20191119 14:47:01.909" level="INFO">${panel index} = 3</msg>
<status status="PASS" starttime="20191119 14:47:01.895" endtime="20191119 14:47:01.909"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:47:01.910" level="INFO">3</msg>
<status status="PASS" starttime="20191119 14:47:01.909" endtime="20191119 14:47:01.910"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:47:01.911" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 3 --port 48</msg>
<status status="PASS" starttime="20191119 14:47:01.910" endtime="20191119 14:47:01.911"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:47:01.912" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 3 --port 48</msg>
<status status="PASS" starttime="20191119 14:47:01.911" endtime="20191119 14:47:01.912"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:47:01.938" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 3 --port 48</msg>
<status status="PASS" starttime="20191119 14:47:01.913" endtime="20191119 14:47:01.938"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:47:03.939" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=3
type=1100ps
panel_state=RUN
row=2
serial=28FFFF600003
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:01.939" endtime="20191119 14:47:03.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:47:03.945" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=3
type=1100ps
panel_state=RUN
row=2
serial=28FFFF600003
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:03.941" endtime="20191119 14:47:03.945"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:01.912" endtime="20191119 14:47:03.946"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:01.895" endtime="20191119 14:47:03.947"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:47:03.976" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191119 14:47:03.950" endtime="20191119 14:47:03.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:47:03.981" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191119 14:47:03.980" endtime="20191119 14:47:04.040"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:03.979" endtime="20191119 14:47:04.041"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:04.543" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:04.042" endtime="20191119 14:47:04.544"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:04.041" endtime="20191119 14:47:04.545"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:03.979" endtime="20191119 14:47:04.546"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:03.977" endtime="20191119 14:47:04.547"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:47:04.574" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191119 14:47:04.548" endtime="20191119 14:47:04.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:47:04.579" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:47:04.579" endtime="20191119 14:47:04.624"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:04.578" endtime="20191119 14:47:04.625"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:05.145" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:04.625" endtime="20191119 14:47:05.145"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:04.625" endtime="20191119 14:47:05.145"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:04.577" endtime="20191119 14:47:05.148"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:04.575" endtime="20191119 14:47:05.148"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191119 14:47:05.148" endtime="20191119 14:47:07.286"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:03.948" endtime="20191119 14:47:07.288"></status>
</kw>
<status status="PASS" starttime="20191119 14:46:48.490" endtime="20191119 14:47:07.289" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s2-t3" name="INSERT_END_A_02_02_06_Verify that all ImVisionXs in the zone show the bulk patching list correctly after plugging a connector into the End A list if there is a LC Fiber panel">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:07.300" endtime="20191119 14:47:07.302"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191119 14:47:07.305" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191119 14:47:09.165" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191119 14:47:07.303" endtime="20191119 14:47:09.165"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:07.298" endtime="20191119 14:47:09.165"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191119 14:47:09.165" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191119 14:47:09.165" endtime="20191119 14:47:09.165"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191119 14:47:09.165" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191119 14:47:09.165" endtime="20191119 14:47:13.245"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191119 14:47:13.246" endtime="20191119 14:47:14.395"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:14.915" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:14.405" endtime="20191119 14:47:14.915"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:47:14.925" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191119 14:47:14.918" endtime="20191119 14:47:14.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:14.925" endtime="20191119 14:47:14.925"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191119 14:47:14.938" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191119 14:47:14.925" endtime="20191119 14:47:14.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:14.938" endtime="20191119 14:47:14.938"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:47:14.955" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191119 14:47:14.938" endtime="20191119 14:47:14.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:14.955" endtime="20191119 14:47:14.955"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:14.917" endtime="20191119 14:47:14.955"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:47:14.955" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:47:14.955" endtime="20191119 14:47:15.061"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:14.955" endtime="20191119 14:47:15.062"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:15.585" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:15.064" endtime="20191119 14:47:15.585"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:15.063" endtime="20191119 14:47:15.585"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:14.955" endtime="20191119 14:47:15.585"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:09.165" endtime="20191119 14:47:15.585"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:07.295" endtime="20191119 14:47:15.585"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191119 14:47:15.585" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191119 14:47:15.585" endtime="20191119 14:47:15.633"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:16.145" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:15.634" endtime="20191119 14:47:16.145"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:15.633" endtime="20191119 14:47:16.145"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:15.585" endtime="20191119 14:47:16.145"></status>
</kw>
<kw name="When Plugin LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get LC Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:47:16.145" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:47:16.145" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:47:16.145" endtime="20191119 14:47:16.145"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:16.145" endtime="20191119 14:47:16.145"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:16.145" endtime="20191119 14:47:16.145"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:16.145" endtime="20191119 14:47:16.145"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:16.145" endtime="20191119 14:47:16.145"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:16.145" endtime="20191119 14:47:16.145"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:16.145" endtime="20191119 14:47:16.145"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:47:16.155" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:47:16.155" endtime="20191119 14:47:16.155"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:16.145" endtime="20191119 14:47:16.155"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:16.145" endtime="20191119 14:47:16.155"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:16.145" endtime="20191119 14:47:16.155"></status>
</kw>
<msg timestamp="20191119 14:47:16.155" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20191119 14:47:16.145" endtime="20191119 14:47:16.155"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:47:16.155" level="INFO">4</msg>
<status status="PASS" starttime="20191119 14:47:16.155" endtime="20191119 14:47:16.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:47:16.155" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20191119 14:47:16.155" endtime="20191119 14:47:16.155"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:47:16.155" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20191119 14:47:16.155" endtime="20191119 14:47:16.155"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:47:16.275" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20191119 14:47:16.155" endtime="20191119 14:47:16.275"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:47:18.275" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:16.275" endtime="20191119 14:47:18.275"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:47:18.278" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:18.276" endtime="20191119 14:47:18.278"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:16.155" endtime="20191119 14:47:18.279"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:16.145" endtime="20191119 14:47:18.279"></status>
</kw>
<kw name="Then Check to see if Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;1&quot; existed in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:18.283" endtime="20191119 14:47:18.284"></status>
</kw>
<msg timestamp="20191119 14:47:18.284" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191119 14:47:18.281" endtime="20191119 14:47:18.284"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191119 14:47:18.286" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191119 14:47:18.285" endtime="20191119 14:47:18.286"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191119 14:47:18.288" level="INFO">${input panel} = -Panel 3</msg>
<status status="PASS" starttime="20191119 14:47:18.287" endtime="20191119 14:47:18.288"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191119 14:47:18.289" level="INFO">${input port} = -Port 1</msg>
<status status="PASS" starttime="20191119 14:47:18.289" endtime="20191119 14:47:18.290"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191119 14:47:18.291" level="INFO">${input port information} = Rack 1-Panel 3-Port 1</msg>
<status status="PASS" starttime="20191119 14:47:18.290" endtime="20191119 14:47:18.292"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191119 14:47:18.293" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191119 14:47:18.292" endtime="20191119 14:47:18.294"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191119 14:47:18.295" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 1')]</msg>
<status status="PASS" starttime="20191119 14:47:18.294" endtime="20191119 14:47:18.296"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:47:18.318" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191119 14:47:18.297" endtime="20191119 14:47:18.319"></status>
</kw>
<msg timestamp="20191119 14:47:18.319" level="INFO">${number of lines} = 1</msg>
<status status="PASS" starttime="20191119 14:47:18.296" endtime="20191119 14:47:18.319"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:47:18.320" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191119 14:47:18.319" endtime="20191119 14:47:18.320"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191119 14:47:18.321" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191119 14:47:18.321" endtime="20191119 14:47:18.321"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191119 14:47:18.322" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191119 14:47:18.322" endtime="20191119 14:47:18.322"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191119 14:47:18.323" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 1')]</msg>
<status status="PASS" starttime="20191119 14:47:18.323" endtime="20191119 14:47:18.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191119 14:47:18.324" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 1')]</msg>
<status status="PASS" starttime="20191119 14:47:18.323" endtime="20191119 14:47:18.324"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:47:18.336" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191119 14:47:18.324" endtime="20191119 14:47:18.337"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191119 14:47:18.337" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:47:18.337" endtime="20191119 14:47:18.338"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:18.320" endtime="20191119 14:47:18.338"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:18.320" endtime="20191119 14:47:18.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${count}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20191119 14:47:18.339" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191119 14:47:18.338" endtime="20191119 14:47:18.339"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:18.280" endtime="20191119 14:47:18.339"></status>
</kw>
<kw name="Then Plugout LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get LC Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:47:18.341" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:47:18.341" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:47:18.341" endtime="20191119 14:47:18.341"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:18.342" endtime="20191119 14:47:18.343"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:18.342" endtime="20191119 14:47:18.343"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:18.344" endtime="20191119 14:47:18.345"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:18.343" endtime="20191119 14:47:18.345"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:18.346" endtime="20191119 14:47:18.347"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:18.345" endtime="20191119 14:47:18.347"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:47:18.349" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:47:18.348" endtime="20191119 14:47:18.349"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:18.347" endtime="20191119 14:47:18.349"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:18.347" endtime="20191119 14:47:18.349"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:18.341" endtime="20191119 14:47:18.349"></status>
</kw>
<msg timestamp="20191119 14:47:18.350" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20191119 14:47:18.340" endtime="20191119 14:47:18.350"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:47:18.350" level="INFO">4</msg>
<status status="PASS" starttime="20191119 14:47:18.350" endtime="20191119 14:47:18.351"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:47:18.351" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20191119 14:47:18.351" endtime="20191119 14:47:18.351"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:47:18.352" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20191119 14:47:18.351" endtime="20191119 14:47:18.352"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:47:18.382" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20191119 14:47:18.353" endtime="20191119 14:47:18.382"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:47:20.383" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:18.383" endtime="20191119 14:47:20.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:47:20.384" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:20.383" endtime="20191119 14:47:20.384"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:18.352" endtime="20191119 14:47:20.384"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:18.340" endtime="20191119 14:47:20.385"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:47:20.394" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191119 14:47:20.386" endtime="20191119 14:47:20.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:47:20.396" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191119 14:47:20.396" endtime="20191119 14:47:20.433"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:20.396" endtime="20191119 14:47:20.434"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:20.955" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:20.435" endtime="20191119 14:47:20.955"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:20.434" endtime="20191119 14:47:20.955"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:20.395" endtime="20191119 14:47:20.955"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:20.394" endtime="20191119 14:47:20.956"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:47:20.964" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191119 14:47:20.956" endtime="20191119 14:47:20.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:47:20.964" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:47:20.964" endtime="20191119 14:47:20.997"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:20.964" endtime="20191119 14:47:20.997"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:21.505" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:20.998" endtime="20191119 14:47:21.505"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:20.997" endtime="20191119 14:47:21.505"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:20.964" endtime="20191119 14:47:21.505"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:20.964" endtime="20191119 14:47:21.505"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191119 14:47:21.505" endtime="20191119 14:47:23.615"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:20.385" endtime="20191119 14:47:23.615"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:07.291" endtime="20191119 14:47:23.615" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s2-t4" name="INSERT_END_A_02_02_08_Verify that all ImVisionXs in the zone show the bulk patching list correctly after plugging a connector into the End A list if there is a HDF panel">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:23.625" endtime="20191119 14:47:23.625"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191119 14:47:23.628" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191119 14:47:25.475" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191119 14:47:23.628" endtime="20191119 14:47:25.475"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:23.622" endtime="20191119 14:47:25.475"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191119 14:47:25.475" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191119 14:47:25.475" endtime="20191119 14:47:25.475"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191119 14:47:25.475" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191119 14:47:25.475" endtime="20191119 14:47:28.992"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191119 14:47:28.993" endtime="20191119 14:47:30.165"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:30.665" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:30.165" endtime="20191119 14:47:30.665"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:47:30.704" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191119 14:47:30.668" endtime="20191119 14:47:30.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:30.705" endtime="20191119 14:47:30.706"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191119 14:47:30.725" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191119 14:47:30.706" endtime="20191119 14:47:30.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:30.726" endtime="20191119 14:47:30.726"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:47:30.739" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191119 14:47:30.727" endtime="20191119 14:47:30.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:30.740" endtime="20191119 14:47:30.740"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:30.665" endtime="20191119 14:47:30.740"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:47:30.742" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:47:30.741" endtime="20191119 14:47:30.842"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:30.741" endtime="20191119 14:47:30.843"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:31.348" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:30.846" endtime="20191119 14:47:31.349"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:30.844" endtime="20191119 14:47:31.350"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:30.741" endtime="20191119 14:47:31.351"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:25.475" endtime="20191119 14:47:31.352"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:23.622" endtime="20191119 14:47:31.353"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191119 14:47:31.358" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191119 14:47:31.357" endtime="20191119 14:47:31.449"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:31.965" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:31.450" endtime="20191119 14:47:31.965"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:31.449" endtime="20191119 14:47:31.967"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:31.354" endtime="20191119 14:47:31.968"></status>
</kw>
<kw name="When Plugin HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get HDF Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:47:31.968" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:47:31.975" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:47:31.968" endtime="20191119 14:47:31.975"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:31.975" endtime="20191119 14:47:31.980"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:31.975" endtime="20191119 14:47:31.985"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:31.985" endtime="20191119 14:47:31.988"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:31.985" endtime="20191119 14:47:31.988"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:31.995" endtime="20191119 14:47:31.998"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:31.995" endtime="20191119 14:47:31.998"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:31.998" endtime="20191119 14:47:31.998"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:31.998" endtime="20191119 14:47:31.998"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:47:32.009" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:47:32.005" endtime="20191119 14:47:32.009"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:31.998" endtime="20191119 14:47:32.009"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:31.998" endtime="20191119 14:47:32.009"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:31.975" endtime="20191119 14:47:32.009"></status>
</kw>
<msg timestamp="20191119 14:47:32.009" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20191119 14:47:31.968" endtime="20191119 14:47:32.009"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:47:32.009" level="INFO">5</msg>
<status status="PASS" starttime="20191119 14:47:32.009" endtime="20191119 14:47:32.009"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:47:32.009" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20191119 14:47:32.009" endtime="20191119 14:47:32.015"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:47:32.015" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20191119 14:47:32.015" endtime="20191119 14:47:32.015"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:47:32.105" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20191119 14:47:32.015" endtime="20191119 14:47:32.105"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:47:34.106" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:32.105" endtime="20191119 14:47:34.107"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:47:34.110" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:34.108" endtime="20191119 14:47:34.111"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:32.015" endtime="20191119 14:47:34.112"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:31.968" endtime="20191119 14:47:34.113"></status>
</kw>
<kw name="Then Check and see if Rack &quot;1&quot; Panel &quot;4&quot; Module &quot;1&quot; Port &quot;1&quot; existed in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of HDF panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:34.118" endtime="20191119 14:47:34.119"></status>
</kw>
<msg timestamp="20191119 14:47:34.120" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191119 14:47:34.117" endtime="20191119 14:47:34.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191119 14:47:34.123" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191119 14:47:34.122" endtime="20191119 14:47:34.124"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191119 14:47:34.126" level="INFO">${input panel} = -Panel 4</msg>
<status status="PASS" starttime="20191119 14:47:34.125" endtime="20191119 14:47:34.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Module</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${input module}</var>
</assign>
<msg timestamp="20191119 14:47:34.130" level="INFO">${input module} = -Module 1</msg>
<status status="PASS" starttime="20191119 14:47:34.128" endtime="20191119 14:47:34.130"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191119 14:47:34.133" level="INFO">${input port} = -Port 1</msg>
<status status="PASS" starttime="20191119 14:47:34.131" endtime="20191119 14:47:34.133"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input module}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191119 14:47:34.136" level="INFO">${input port information} = Rack 1-Panel 4-Module 1-Port 1</msg>
<status status="PASS" starttime="20191119 14:47:34.134" endtime="20191119 14:47:34.137"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191119 14:47:34.139" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191119 14:47:34.138" endtime="20191119 14:47:34.140"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191119 14:47:34.143" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 1')]</msg>
<status status="PASS" starttime="20191119 14:47:34.141" endtime="20191119 14:47:34.143"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:47:34.173" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191119 14:47:34.146" endtime="20191119 14:47:34.173"></status>
</kw>
<msg timestamp="20191119 14:47:34.174" level="INFO">${number of lines} = 1</msg>
<status status="PASS" starttime="20191119 14:47:34.144" endtime="20191119 14:47:34.174"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:47:34.175" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191119 14:47:34.175" endtime="20191119 14:47:34.177"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191119 14:47:34.179" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191119 14:47:34.178" endtime="20191119 14:47:34.179"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191119 14:47:34.181" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191119 14:47:34.180" endtime="20191119 14:47:34.181"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191119 14:47:34.182" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 1')]</msg>
<status status="PASS" starttime="20191119 14:47:34.182" endtime="20191119 14:47:34.182"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191119 14:47:34.183" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 1')]</msg>
<status status="PASS" starttime="20191119 14:47:34.183" endtime="20191119 14:47:34.183"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:47:34.199" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191119 14:47:34.184" endtime="20191119 14:47:34.199"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191119 14:47:34.200" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:47:34.200" endtime="20191119 14:47:34.200"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:34.178" endtime="20191119 14:47:34.201"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:34.177" endtime="20191119 14:47:34.201"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${count}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20191119 14:47:34.202" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191119 14:47:34.201" endtime="20191119 14:47:34.202"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:34.115" endtime="20191119 14:47:34.202"></status>
</kw>
<kw name="Then Plugout HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get HDF Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:47:34.205" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:47:34.205" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:47:34.204" endtime="20191119 14:47:34.205"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:34.206" endtime="20191119 14:47:34.208"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:34.206" endtime="20191119 14:47:34.208"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:34.209" endtime="20191119 14:47:34.211"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:34.209" endtime="20191119 14:47:34.211"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:34.211" endtime="20191119 14:47:34.213"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:34.211" endtime="20191119 14:47:34.213"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:34.213" endtime="20191119 14:47:34.215"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:34.213" endtime="20191119 14:47:34.215"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:47:34.217" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:47:34.217" endtime="20191119 14:47:34.217"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:34.216" endtime="20191119 14:47:34.217"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:34.215" endtime="20191119 14:47:34.217"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:34.205" endtime="20191119 14:47:34.217"></status>
</kw>
<msg timestamp="20191119 14:47:34.217" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20191119 14:47:34.204" endtime="20191119 14:47:34.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:47:34.218" level="INFO">5</msg>
<status status="PASS" starttime="20191119 14:47:34.218" endtime="20191119 14:47:34.218"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:47:34.220" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20191119 14:47:34.218" endtime="20191119 14:47:34.220"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:47:34.220" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20191119 14:47:34.220" endtime="20191119 14:47:34.220"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:47:34.235" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20191119 14:47:34.220" endtime="20191119 14:47:34.235"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:47:36.265" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:34.236" endtime="20191119 14:47:36.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:47:36.265" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:36.265" endtime="20191119 14:47:36.265"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:34.220" endtime="20191119 14:47:36.265"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:34.203" endtime="20191119 14:47:36.265"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:47:36.275" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191119 14:47:36.265" endtime="20191119 14:47:36.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:47:36.275" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191119 14:47:36.275" endtime="20191119 14:47:36.322"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:36.275" endtime="20191119 14:47:36.322"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:36.835" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:36.323" endtime="20191119 14:47:36.835"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:36.323" endtime="20191119 14:47:36.835"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:36.275" endtime="20191119 14:47:36.835"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:36.275" endtime="20191119 14:47:36.835"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:47:36.865" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191119 14:47:36.838" endtime="20191119 14:47:36.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:47:36.865" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:47:36.865" endtime="20191119 14:47:36.949"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:36.865" endtime="20191119 14:47:36.949"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:37.455" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:36.950" endtime="20191119 14:47:37.455"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:36.950" endtime="20191119 14:47:37.455"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:36.865" endtime="20191119 14:47:37.455"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:36.865" endtime="20191119 14:47:37.455"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191119 14:47:37.455" endtime="20191119 14:47:39.695"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:36.265" endtime="20191119 14:47:39.695"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:23.615" endtime="20191119 14:47:39.698" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s2-t5" name="INSERT_END_A_02_02_09_Verify that all ImVisionXs in the zone show the bulk patching list correctly after plugging a connector into the End A list if there is a 96LC fiber type">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:39.708" endtime="20191119 14:47:39.708"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191119 14:47:39.708" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191119 14:47:41.565" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191119 14:47:39.708" endtime="20191119 14:47:41.565"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:39.705" endtime="20191119 14:47:41.565"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191119 14:47:41.569" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191119 14:47:41.569" endtime="20191119 14:47:41.569"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191119 14:47:41.575" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191119 14:47:41.569" endtime="20191119 14:47:45.546"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191119 14:47:45.547" endtime="20191119 14:47:46.688"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:47.206" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:46.695" endtime="20191119 14:47:47.206"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:47:47.215" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191119 14:47:47.206" endtime="20191119 14:47:47.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:47.215" endtime="20191119 14:47:47.215"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191119 14:47:47.227" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191119 14:47:47.215" endtime="20191119 14:47:47.227"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:47.227" endtime="20191119 14:47:47.227"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:47:47.234" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191119 14:47:47.227" endtime="20191119 14:47:47.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:47.234" endtime="20191119 14:47:47.234"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:47.206" endtime="20191119 14:47:47.245"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:47:47.245" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:47:47.245" endtime="20191119 14:47:47.348"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:47.245" endtime="20191119 14:47:47.349"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:47.865" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:47.352" endtime="20191119 14:47:47.865"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:47.350" endtime="20191119 14:47:47.865"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:47.245" endtime="20191119 14:47:47.865"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:41.569" endtime="20191119 14:47:47.865"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:39.705" endtime="20191119 14:47:47.865"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191119 14:47:47.865" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191119 14:47:47.865" endtime="20191119 14:47:47.913"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:48.415" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:47.914" endtime="20191119 14:47:48.415"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:47.913" endtime="20191119 14:47:48.415"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:47.865" endtime="20191119 14:47:48.415"></status>
</kw>
<kw name="When Plugin 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get 24F Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:47:48.415" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:47:48.415" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:47:48.415" endtime="20191119 14:47:48.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:48.415" endtime="20191119 14:47:48.425"></status>
</kw>
<msg timestamp="20191119 14:47:48.425" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20191119 14:47:48.415" endtime="20191119 14:47:48.425"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:48.425" endtime="20191119 14:47:48.431"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.425" endtime="20191119 14:47:48.431"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:48.433" endtime="20191119 14:47:48.433"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.433" endtime="20191119 14:47:48.433"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:48.433" endtime="20191119 14:47:48.433"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.433" endtime="20191119 14:47:48.433"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:48.433" endtime="20191119 14:47:48.433"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.433" endtime="20191119 14:47:48.433"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:48.433" endtime="20191119 14:47:48.446"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.433" endtime="20191119 14:47:48.447"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:48.447" endtime="20191119 14:47:48.447"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.447" endtime="20191119 14:47:48.447"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:48.447" endtime="20191119 14:47:48.447"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.447" endtime="20191119 14:47:48.447"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:48.447" endtime="20191119 14:47:48.447"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.447" endtime="20191119 14:47:48.447"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:48.447" endtime="20191119 14:47:48.455"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.447" endtime="20191119 14:47:48.455"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:47:48.455" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:47:48.455" endtime="20191119 14:47:48.455"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.455" endtime="20191119 14:47:48.455"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.455" endtime="20191119 14:47:48.455"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.425" endtime="20191119 14:47:48.455"></status>
</kw>
<msg timestamp="20191119 14:47:48.460" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20191119 14:47:48.415" endtime="20191119 14:47:48.460"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:47:48.460" level="INFO">10</msg>
<status status="PASS" starttime="20191119 14:47:48.460" endtime="20191119 14:47:48.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:47:48.460" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 1</msg>
<status status="PASS" starttime="20191119 14:47:48.460" endtime="20191119 14:47:48.460"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:47:48.460" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 1</msg>
<status status="PASS" starttime="20191119 14:47:48.460" endtime="20191119 14:47:48.460"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:47:48.525" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 1</msg>
<status status="PASS" starttime="20191119 14:47:48.460" endtime="20191119 14:47:48.525"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:47:50.536" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:48.525" endtime="20191119 14:47:50.537"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:47:50.538" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:50.537" endtime="20191119 14:47:50.538"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.460" endtime="20191119 14:47:50.539"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:48.415" endtime="20191119 14:47:50.539"></status>
</kw>
<kw name="Then Check then see if Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; Port &quot;1&quot; existed in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of 24F panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:50.541" endtime="20191119 14:47:50.541"></status>
</kw>
<msg timestamp="20191119 14:47:50.542" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191119 14:47:50.540" endtime="20191119 14:47:50.542"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191119 14:47:50.542" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191119 14:47:50.542" endtime="20191119 14:47:50.543"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191119 14:47:50.544" level="INFO">${input panel} = -Panel 6</msg>
<status status="PASS" starttime="20191119 14:47:50.543" endtime="20191119 14:47:50.544"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Row</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${input row}</var>
</assign>
<msg timestamp="20191119 14:47:50.544" level="INFO">${input row} = -Row 1</msg>
<status status="PASS" starttime="20191119 14:47:50.544" endtime="20191119 14:47:50.545"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Module</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${input module}</var>
</assign>
<msg timestamp="20191119 14:47:50.545" level="INFO">${input module} = -Module A</msg>
<status status="PASS" starttime="20191119 14:47:50.545" endtime="20191119 14:47:50.545"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191119 14:47:50.546" level="INFO">${input port} = -Port 1</msg>
<status status="PASS" starttime="20191119 14:47:50.546" endtime="20191119 14:47:50.546"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input row}</arg>
<arg>${input module}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191119 14:47:50.547" level="INFO">${input port information} = Rack 1-Panel 6-Row 1-Module A-Port 1</msg>
<status status="PASS" starttime="20191119 14:47:50.546" endtime="20191119 14:47:50.547"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191119 14:47:50.547" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191119 14:47:50.547" endtime="20191119 14:47:50.547"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191119 14:47:50.547" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 1')]</msg>
<status status="PASS" starttime="20191119 14:47:50.547" endtime="20191119 14:47:50.547"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:47:50.560" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191119 14:47:50.547" endtime="20191119 14:47:50.560"></status>
</kw>
<msg timestamp="20191119 14:47:50.560" level="INFO">${number of lines} = 1</msg>
<status status="PASS" starttime="20191119 14:47:50.547" endtime="20191119 14:47:50.560"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:47:50.565" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191119 14:47:50.565" endtime="20191119 14:47:50.565"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191119 14:47:50.565" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191119 14:47:50.565" endtime="20191119 14:47:50.565"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191119 14:47:50.565" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191119 14:47:50.565" endtime="20191119 14:47:50.565"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191119 14:47:50.565" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 1')]</msg>
<status status="PASS" starttime="20191119 14:47:50.565" endtime="20191119 14:47:50.565"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191119 14:47:50.569" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 1')]</msg>
<status status="PASS" starttime="20191119 14:47:50.565" endtime="20191119 14:47:50.569"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:47:50.579" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191119 14:47:50.569" endtime="20191119 14:47:50.579"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191119 14:47:50.579" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:47:50.579" endtime="20191119 14:47:50.579"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.565" endtime="20191119 14:47:50.579"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.565" endtime="20191119 14:47:50.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${count}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20191119 14:47:50.579" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191119 14:47:50.579" endtime="20191119 14:47:50.579"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.540" endtime="20191119 14:47:50.579"></status>
</kw>
<kw name="Then Plugout 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get 24F Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:47:50.585" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:47:50.585" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:47:50.585" endtime="20191119 14:47:50.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:50.585" endtime="20191119 14:47:50.585"></status>
</kw>
<msg timestamp="20191119 14:47:50.585" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20191119 14:47:50.585" endtime="20191119 14:47:50.585"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:50.585" endtime="20191119 14:47:50.589"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.585" endtime="20191119 14:47:50.589"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:50.589" endtime="20191119 14:47:50.589"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.589" endtime="20191119 14:47:50.589"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:50.589" endtime="20191119 14:47:50.589"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.589" endtime="20191119 14:47:50.589"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:50.589" endtime="20191119 14:47:50.595"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.589" endtime="20191119 14:47:50.595"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:50.595" endtime="20191119 14:47:50.595"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.595" endtime="20191119 14:47:50.599"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:50.599" endtime="20191119 14:47:50.599"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.599" endtime="20191119 14:47:50.599"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:50.599" endtime="20191119 14:47:50.599"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.599" endtime="20191119 14:47:50.599"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:50.599" endtime="20191119 14:47:50.605"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.599" endtime="20191119 14:47:50.605"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:50.605" endtime="20191119 14:47:50.605"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.605" endtime="20191119 14:47:50.605"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:47:50.609" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:47:50.609" endtime="20191119 14:47:50.609"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.609" endtime="20191119 14:47:50.609"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.605" endtime="20191119 14:47:50.609"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.585" endtime="20191119 14:47:50.609"></status>
</kw>
<msg timestamp="20191119 14:47:50.609" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20191119 14:47:50.579" endtime="20191119 14:47:50.609"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:47:50.609" level="INFO">10</msg>
<status status="PASS" starttime="20191119 14:47:50.609" endtime="20191119 14:47:50.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:47:50.609" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 1</msg>
<status status="PASS" starttime="20191119 14:47:50.609" endtime="20191119 14:47:50.609"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:47:50.609" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 1</msg>
<status status="PASS" starttime="20191119 14:47:50.609" endtime="20191119 14:47:50.609"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:47:50.748" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 1</msg>
<status status="PASS" starttime="20191119 14:47:50.609" endtime="20191119 14:47:50.749"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:47:52.755" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:50.749" endtime="20191119 14:47:52.755"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:47:52.755" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:47:52.755" endtime="20191119 14:47:52.755"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.609" endtime="20191119 14:47:52.755"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:50.579" endtime="20191119 14:47:52.755"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:47:52.765" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191119 14:47:52.755" endtime="20191119 14:47:52.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:47:52.765" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191119 14:47:52.765" endtime="20191119 14:47:52.808"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:52.765" endtime="20191119 14:47:52.808"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:53.315" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:52.809" endtime="20191119 14:47:53.315"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:52.809" endtime="20191119 14:47:53.315"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:52.765" endtime="20191119 14:47:53.315"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:52.765" endtime="20191119 14:47:53.315"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:47:53.324" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191119 14:47:53.315" endtime="20191119 14:47:53.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:47:53.329" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:47:53.329" endtime="20191119 14:47:53.365"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:53.329" endtime="20191119 14:47:53.366"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:47:53.875" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:47:53.367" endtime="20191119 14:47:53.875"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:53.366" endtime="20191119 14:47:53.875"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:53.329" endtime="20191119 14:47:53.875"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:53.324" endtime="20191119 14:47:53.875"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191119 14:47:53.875" endtime="20191119 14:47:56.015"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:52.755" endtime="20191119 14:47:56.015"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:39.698" endtime="20191119 14:47:56.018" critical="yes"></status>
</test>
<status status="PASS" starttime="20191119 14:46:31.818" endtime="20191119 14:47:56.023"></status>
</suite>
<suite id="s1-s1-s1-s1-s3" name="2.3. Check End A when plugging correct tip in the middle of list of End A" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As\2.3. Check End A when plugging correct tip in the middle of list of End A.robot">
<test id="s1-s1-s1-s1-s3-t1" name="INSERT_END_A_03_02_Verify that imVision X shall show correctly when any connector in the middle of the End A list is unplugged and generating beep">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191119 14:47:56.085" endtime="20191119 14:47:56.085"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191119 14:47:56.085" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191119 14:47:57.935" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191119 14:47:56.085" endtime="20191119 14:47:57.935"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:56.085" endtime="20191119 14:47:57.935"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191119 14:47:57.939" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191119 14:47:57.938" endtime="20191119 14:47:57.940"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191119 14:47:57.941" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191119 14:47:57.940" endtime="20191119 14:48:04.239"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191119 14:48:04.240" endtime="20191119 14:48:05.383"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:48:05.895" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:48:05.383" endtime="20191119 14:48:05.895"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:48:05.905" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191119 14:48:05.895" endtime="20191119 14:48:05.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:48:05.909" endtime="20191119 14:48:05.909"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191119 14:48:05.915" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191119 14:48:05.909" endtime="20191119 14:48:05.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:48:05.915" endtime="20191119 14:48:05.915"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:48:05.925" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191119 14:48:05.915" endtime="20191119 14:48:05.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191119 14:48:05.925" endtime="20191119 14:48:05.925"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:05.895" endtime="20191119 14:48:05.925"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:48:05.935" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:48:05.935" endtime="20191119 14:48:06.032"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:05.925" endtime="20191119 14:48:06.032"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:48:06.535" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:48:06.033" endtime="20191119 14:48:06.535"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:06.033" endtime="20191119 14:48:06.535"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:05.925" endtime="20191119 14:48:06.535"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:57.937" endtime="20191119 14:48:06.535"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:56.085" endtime="20191119 14:48:06.535"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191119 14:48:06.535" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191119 14:48:06.535" endtime="20191119 14:48:06.583"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:48:07.084" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:48:06.583" endtime="20191119 14:48:07.084"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:06.583" endtime="20191119 14:48:07.084"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:06.535" endtime="20191119 14:48:07.085"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:48:07.087" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:48:07.087" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:48:07.086" endtime="20191119 14:48:07.087"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:48:07.089" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:48:07.089" endtime="20191119 14:48:07.090"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:07.088" endtime="20191119 14:48:07.090"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:07.087" endtime="20191119 14:48:07.090"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:07.087" endtime="20191119 14:48:07.090"></status>
</kw>
<msg timestamp="20191119 14:48:07.091" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:48:07.086" endtime="20191119 14:48:07.091"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:48:07.092" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:48:07.091" endtime="20191119 14:48:07.092"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:48:07.092" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:48:07.092" endtime="20191119 14:48:07.092"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:48:07.093" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:48:07.093" endtime="20191119 14:48:07.093"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:48:07.135" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:48:07.094" endtime="20191119 14:48:07.136"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:48:09.155" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:07.136" endtime="20191119 14:48:09.155"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:48:09.156" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:09.155" endtime="20191119 14:48:09.156"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:07.094" endtime="20191119 14:48:09.157"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:07.085" endtime="20191119 14:48:09.157"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:48:09.158" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:48:09.159" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:48:09.158" endtime="20191119 14:48:09.159"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:48:09.161" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:48:09.161" endtime="20191119 14:48:09.162"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:09.159" endtime="20191119 14:48:09.162"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:09.159" endtime="20191119 14:48:09.162"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:09.159" endtime="20191119 14:48:09.162"></status>
</kw>
<msg timestamp="20191119 14:48:09.162" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:48:09.158" endtime="20191119 14:48:09.163"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:48:09.163" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:48:09.163" endtime="20191119 14:48:09.163"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:48:09.164" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 14:48:09.164" endtime="20191119 14:48:09.164"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:48:09.165" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 14:48:09.164" endtime="20191119 14:48:09.165"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:48:09.193" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 14:48:09.165" endtime="20191119 14:48:09.193"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:48:11.206" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:09.194" endtime="20191119 14:48:11.206"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:48:11.206" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:11.206" endtime="20191119 14:48:11.206"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:09.165" endtime="20191119 14:48:11.206"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:09.157" endtime="20191119 14:48:11.206"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:48:11.206" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:48:11.206" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:48:11.206" endtime="20191119 14:48:11.206"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:48:11.206" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:48:11.206" endtime="20191119 14:48:11.206"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:11.206" endtime="20191119 14:48:11.206"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:11.206" endtime="20191119 14:48:11.206"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:11.206" endtime="20191119 14:48:11.206"></status>
</kw>
<msg timestamp="20191119 14:48:11.206" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:48:11.206" endtime="20191119 14:48:11.206"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:48:11.206" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:48:11.206" endtime="20191119 14:48:11.206"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:48:11.206" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 14:48:11.206" endtime="20191119 14:48:11.206"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:48:11.215" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 14:48:11.206" endtime="20191119 14:48:11.215"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:48:11.245" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 14:48:11.215" endtime="20191119 14:48:11.245"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:48:13.263" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:11.245" endtime="20191119 14:48:13.263"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:48:13.263" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:13.263" endtime="20191119 14:48:13.263"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:11.215" endtime="20191119 14:48:13.263"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:11.206" endtime="20191119 14:48:13.263"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:48:13.263" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:48:13.263" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:48:13.263" endtime="20191119 14:48:13.263"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:48:13.268" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:48:13.268" endtime="20191119 14:48:13.268"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:13.263" endtime="20191119 14:48:13.268"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:13.263" endtime="20191119 14:48:13.268"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:13.263" endtime="20191119 14:48:13.268"></status>
</kw>
<msg timestamp="20191119 14:48:13.268" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:48:13.263" endtime="20191119 14:48:13.268"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:48:13.268" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:48:13.268" endtime="20191119 14:48:13.268"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:48:13.268" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 14:48:13.268" endtime="20191119 14:48:13.268"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:48:13.268" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 14:48:13.268" endtime="20191119 14:48:13.268"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:48:13.363" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 14:48:13.268" endtime="20191119 14:48:13.363"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:48:15.364" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:13.363" endtime="20191119 14:48:15.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:48:15.365" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:15.364" endtime="20191119 14:48:15.365"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:13.268" endtime="20191119 14:48:15.366"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:13.263" endtime="20191119 14:48:15.366"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:48:15.368" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:48:15.368" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:48:15.367" endtime="20191119 14:48:15.368"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:48:15.371" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:48:15.370" endtime="20191119 14:48:15.371"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:15.369" endtime="20191119 14:48:15.371"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:15.368" endtime="20191119 14:48:15.371"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:15.368" endtime="20191119 14:48:15.371"></status>
</kw>
<msg timestamp="20191119 14:48:15.372" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:48:15.367" endtime="20191119 14:48:15.372"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:48:15.372" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:48:15.372" endtime="20191119 14:48:15.373"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:48:15.373" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 14:48:15.373" endtime="20191119 14:48:15.373"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:48:15.374" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 14:48:15.374" endtime="20191119 14:48:15.374"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:48:15.392" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 14:48:15.375" endtime="20191119 14:48:15.392"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:48:17.405" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:15.393" endtime="20191119 14:48:17.405"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:48:17.405" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:17.405" endtime="20191119 14:48:17.405"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:15.375" endtime="20191119 14:48:17.405"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:15.366" endtime="20191119 14:48:17.405"></status>
</kw>
<kw name="Then Check to see if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot; in End &quot;A&quot; color &quot;red&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the color of port information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191119 14:48:17.405" endtime="20191119 14:48:17.405"></status>
</kw>
<msg timestamp="20191119 14:48:17.405" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191119 14:48:17.405" endtime="20191119 14:48:17.405"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191119 14:48:17.410" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191119 14:48:17.405" endtime="20191119 14:48:17.410"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191119 14:48:17.410" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191119 14:48:17.410" endtime="20191119 14:48:17.410"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191119 14:48:17.410" level="INFO">${input port} = -Port 2</msg>
<status status="PASS" starttime="20191119 14:48:17.410" endtime="20191119 14:48:17.410"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191119 14:48:17.410" level="INFO">${input port information} = Rack 1-Panel 1-Port 2</msg>
<status status="PASS" starttime="20191119 14:48:17.410" endtime="20191119 14:48:17.410"></status>
</kw>
<kw name="Get Color Code of Port Information" library="Bulk Patching definitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20191119 14:48:17.410" level="INFO">${color} = red</msg>
<status status="PASS" starttime="20191119 14:48:17.410" endtime="20191119 14:48:17.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#F00;</arg>
</arguments>
<status status="PASS" starttime="20191119 14:48:17.410" endtime="20191119 14:48:17.410"></status>
</kw>
<msg timestamp="20191119 14:48:17.410" level="INFO">${color code} = color:#F00;</msg>
<status status="PASS" starttime="20191119 14:48:17.410" endtime="20191119 14:48:17.415"></status>
</kw>
<msg timestamp="20191119 14:48:17.415" level="INFO">${input color} = color:#F00;</msg>
<status status="PASS" starttime="20191119 14:48:17.410" endtime="20191119 14:48:17.415"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position with color}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191119 14:48:17.415" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='Color']/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191119 14:48:17.415" endtime="20191119 14:48:17.415"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191119 14:48:17.415" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='Color']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191119 14:48:17.415" endtime="20191119 14:48:17.415"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20191119 14:48:17.415" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191119 14:48:17.415" endtime="20191119 14:48:17.415"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:48:17.429" level="INFO">${count} = 4</msg>
<status status="PASS" starttime="20191119 14:48:17.415" endtime="20191119 14:48:17.429"></status>
</kw>
<msg timestamp="20191119 14:48:17.429" level="INFO">${number of lines} = 4</msg>
<status status="PASS" starttime="20191119 14:48:17.415" endtime="20191119 14:48:17.429"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:48:17.429" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191119 14:48:17.429" endtime="20191119 14:48:17.429"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191119 14:48:17.435" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191119 14:48:17.429" endtime="20191119 14:48:17.435"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191119 14:48:17.435" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191119 14:48:17.435" endtime="20191119 14:48:17.435"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191119 14:48:17.435" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191119 14:48:17.435" endtime="20191119 14:48:17.435"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191119 14:48:17.435" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191119 14:48:17.435" endtime="20191119 14:48:17.435"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:48:17.445" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191119 14:48:17.435" endtime="20191119 14:48:17.445"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191119 14:48:17.445" endtime="20191119 14:48:17.445"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:17.429" endtime="20191119 14:48:17.445"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191119 14:48:17.445" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191119 14:48:17.445" endtime="20191119 14:48:17.445"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191119 14:48:17.445" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191119 14:48:17.445" endtime="20191119 14:48:17.445"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191119 14:48:17.445" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191119 14:48:17.445" endtime="20191119 14:48:17.445"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191119 14:48:17.445" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191119 14:48:17.445" endtime="20191119 14:48:17.445"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:48:17.455" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191119 14:48:17.445" endtime="20191119 14:48:17.455"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191119 14:48:17.455" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:48:17.455" endtime="20191119 14:48:17.455"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:17.445" endtime="20191119 14:48:17.465"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:17.429" endtime="20191119 14:48:17.465"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${count}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20191119 14:48:17.465" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191119 14:48:17.465" endtime="20191119 14:48:17.465"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:17.405" endtime="20191119 14:48:17.465"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:48:17.468" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:48:17.468" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:48:17.465" endtime="20191119 14:48:17.468"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:48:17.468" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:48:17.468" endtime="20191119 14:48:17.468"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:17.468" endtime="20191119 14:48:17.468"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:17.468" endtime="20191119 14:48:17.468"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:17.468" endtime="20191119 14:48:17.468"></status>
</kw>
<msg timestamp="20191119 14:48:17.468" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:48:17.465" endtime="20191119 14:48:17.468"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:48:17.468" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:48:17.468" endtime="20191119 14:48:17.468"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:48:17.468" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 14:48:17.468" endtime="20191119 14:48:17.468"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:48:17.468" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 14:48:17.468" endtime="20191119 14:48:17.468"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:48:17.565" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 14:48:17.475" endtime="20191119 14:48:17.565"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:48:19.596" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:17.565" endtime="20191119 14:48:19.596"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:48:19.596" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:19.596" endtime="20191119 14:48:19.596"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:17.468" endtime="20191119 14:48:19.596"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:17.465" endtime="20191119 14:48:19.596"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:48:19.596" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:48:19.600" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:48:19.596" endtime="20191119 14:48:19.600"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:48:19.600" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:48:19.600" endtime="20191119 14:48:19.600"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:19.600" endtime="20191119 14:48:19.600"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:19.600" endtime="20191119 14:48:19.600"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:19.600" endtime="20191119 14:48:19.600"></status>
</kw>
<msg timestamp="20191119 14:48:19.600" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:48:19.596" endtime="20191119 14:48:19.600"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:48:19.600" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:48:19.600" endtime="20191119 14:48:19.600"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:48:19.600" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 14:48:19.600" endtime="20191119 14:48:19.600"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:48:19.600" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 14:48:19.600" endtime="20191119 14:48:19.600"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:48:19.675" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 14:48:19.606" endtime="20191119 14:48:19.675"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:48:21.695" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:19.675" endtime="20191119 14:48:21.695"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:48:21.696" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:21.696" endtime="20191119 14:48:21.697"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:19.606" endtime="20191119 14:48:21.697"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:19.596" endtime="20191119 14:48:21.697"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:48:21.697" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:48:21.697" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:48:21.697" endtime="20191119 14:48:21.697"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:48:21.697" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:48:21.697" endtime="20191119 14:48:21.697"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:21.697" endtime="20191119 14:48:21.697"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:21.697" endtime="20191119 14:48:21.697"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:21.697" endtime="20191119 14:48:21.697"></status>
</kw>
<msg timestamp="20191119 14:48:21.697" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:48:21.697" endtime="20191119 14:48:21.697"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:48:21.697" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:48:21.697" endtime="20191119 14:48:21.697"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:48:21.697" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:48:21.697" endtime="20191119 14:48:21.705"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:48:21.705" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:48:21.705" endtime="20191119 14:48:21.705"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:48:21.775" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:48:21.705" endtime="20191119 14:48:21.775"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:48:23.786" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:21.775" endtime="20191119 14:48:23.786"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:48:23.787" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:48:23.787" endtime="20191119 14:48:23.787"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:21.705" endtime="20191119 14:48:23.788"></status>
</kw>
<status status="PASS" starttime="20191119 14:48:21.697" endtime="20191119 14:48:23.788"></status>
</kw>
<status status="PASS" starttime="20191119 14:47:56.085" endtime="20191119 14:48:23.788" critical="yes"></status>
</test>
<status status="PASS" starttime="20191119 14:47:56.035" endtime="20191119 14:48:23.789"></status>
</suite>
<status status="PASS" starttime="20191119 14:45:39.534" endtime="20191119 14:48:23.792"></status>
</suite>
<status status="PASS" starttime="20191119 14:45:39.524" endtime="20191119 14:48:23.798"></status>
</suite>
<status status="PASS" starttime="20191119 14:45:39.524" endtime="20191119 14:48:23.804"></status>
</suite>
<status status="PASS" starttime="20191119 14:45:39.504" endtime="20191119 14:48:23.810"></status>
</suite>
<statistics>
<total>
<stat pass="10" fail="0">Critical Tests</stat>
<stat pass="10" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="10" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="10" fail="0" id="s1-s1" name="Test Resources">BulkPatching Robot.Test Resources</stat>
<stat pass="10" fail="0" id="s1-s1-s1" name="Test Suites">BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="10" fail="0" id="s1-s1-s1-s1" name="2. Insert All End As">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As</stat>
<stat pass="4" fail="0" id="s1-s1-s1-s1-s1" name="2.1. Check header of End A and End B when openning Bulk Patching screen firstly">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As.2.1. Check header of End A and End B when openning Bulk Patching screen firstly</stat>
<stat pass="5" fail="0" id="s1-s1-s1-s1-s2" name="2.2. Check End A when plugging correct tip on End A">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As.2.2. Check End A when plugging correct tip on End A</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1-s3" name="2.3. Check End A when plugging correct tip in the middle of list of End A">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As.2.3. Check End A when plugging correct tip in the middle of list of End A</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
