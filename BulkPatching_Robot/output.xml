<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20191119 17:56:00.339" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1" name="Test Resources" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources">
<suite id="s1-s1-s1" name="Test Suites" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites">
<suite id="s1-s1-s1-s1" name="2. Insert All End As" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As">
<suite id="s1-s1-s1-s1-s1" name="2.4. Check End A when plugging correct tip in the middle of list of End A then replug" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As\2.4. Check End A when plugging correct tip in the middle of list of End A then replug.robot">
<test id="s1-s1-s1-s1-s1-t1" name="INSERT_END_A_04_04_Verify that imVision X shall show correctly when plugging a connector that is matched to one of unplugged connectors in the End A list and imVision X shall remove Delete button">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191119 17:56:00.779" endtime="20191119 17:56:00.779"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191119 17:56:00.779" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191119 17:56:02.195" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191119 17:56:00.779" endtime="20191119 17:56:02.196"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:00.779" endtime="20191119 17:56:02.197"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191119 17:56:02.202" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191119 17:56:02.200" endtime="20191119 17:56:02.202"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191119 17:56:02.205" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191119 17:56:02.203" endtime="20191119 17:56:06.261"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191119 17:56:06.261" endtime="20191119 17:56:07.409"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 17:56:07.911" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 17:56:07.409" endtime="20191119 17:56:07.911"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 17:56:07.940" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191119 17:56:07.913" endtime="20191119 17:56:07.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 17:56:07.941" endtime="20191119 17:56:07.941"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191119 17:56:07.954" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191119 17:56:07.942" endtime="20191119 17:56:07.954"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 17:56:07.954" endtime="20191119 17:56:07.955"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 17:56:07.967" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191119 17:56:07.955" endtime="20191119 17:56:07.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191119 17:56:07.968" endtime="20191119 17:56:07.968"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:07.912" endtime="20191119 17:56:07.968"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 17:56:07.970" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 17:56:07.969" endtime="20191119 17:56:08.046"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:07.969" endtime="20191119 17:56:08.046"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 17:56:08.548" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 17:56:08.047" endtime="20191119 17:56:08.548"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:08.046" endtime="20191119 17:56:08.549"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:07.968" endtime="20191119 17:56:08.550"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:02.198" endtime="20191119 17:56:08.551"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:00.779" endtime="20191119 17:56:08.551"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191119 17:56:08.555" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191119 17:56:08.554" endtime="20191119 17:56:08.634"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 17:56:09.136" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 17:56:08.635" endtime="20191119 17:56:09.136"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:08.635" endtime="20191119 17:56:09.137"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:08.553" endtime="20191119 17:56:09.138"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 17:56:09.142" level="INFO">Length is 12</msg>
<msg timestamp="20191119 17:56:09.142" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 17:56:09.141" endtime="20191119 17:56:09.143"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 17:56:09.149" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 17:56:09.149" endtime="20191119 17:56:09.150"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:09.145" endtime="20191119 17:56:09.150"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:09.144" endtime="20191119 17:56:09.151"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:09.143" endtime="20191119 17:56:09.151"></status>
</kw>
<msg timestamp="20191119 17:56:09.152" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 17:56:09.140" endtime="20191119 17:56:09.153"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 17:56:09.154" level="INFO">1</msg>
<status status="PASS" starttime="20191119 17:56:09.153" endtime="20191119 17:56:09.154"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 17:56:09.156" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 17:56:09.155" endtime="20191119 17:56:09.156"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 17:56:09.158" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 17:56:09.157" endtime="20191119 17:56:09.158"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 17:56:09.177" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 17:56:09.160" endtime="20191119 17:56:09.177"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 17:56:11.180" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:09.177" endtime="20191119 17:56:11.181"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 17:56:11.184" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:11.182" endtime="20191119 17:56:11.185"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:09.159" endtime="20191119 17:56:11.186"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:09.139" endtime="20191119 17:56:11.187"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 17:56:11.194" level="INFO">Length is 12</msg>
<msg timestamp="20191119 17:56:11.195" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 17:56:11.192" endtime="20191119 17:56:11.195"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 17:56:11.206" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 17:56:11.205" endtime="20191119 17:56:11.206"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:11.198" endtime="20191119 17:56:11.207"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:11.197" endtime="20191119 17:56:11.208"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:11.196" endtime="20191119 17:56:11.208"></status>
</kw>
<msg timestamp="20191119 17:56:11.209" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 17:56:11.190" endtime="20191119 17:56:11.209"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 17:56:11.210" level="INFO">1</msg>
<status status="PASS" starttime="20191119 17:56:11.210" endtime="20191119 17:56:11.211"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 17:56:11.212" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 17:56:11.211" endtime="20191119 17:56:11.212"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 17:56:11.213" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 17:56:11.213" endtime="20191119 17:56:11.214"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 17:56:11.238" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 17:56:11.215" endtime="20191119 17:56:11.238"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 17:56:13.240" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:11.238" endtime="20191119 17:56:13.240"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 17:56:13.241" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:13.240" endtime="20191119 17:56:13.241"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:11.214" endtime="20191119 17:56:13.241"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:11.189" endtime="20191119 17:56:13.242"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 17:56:13.243" level="INFO">Length is 12</msg>
<msg timestamp="20191119 17:56:13.244" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 17:56:13.243" endtime="20191119 17:56:13.244"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 17:56:13.246" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 17:56:13.246" endtime="20191119 17:56:13.246"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:13.244" endtime="20191119 17:56:13.246"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:13.244" endtime="20191119 17:56:13.246"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:13.244" endtime="20191119 17:56:13.247"></status>
</kw>
<msg timestamp="20191119 17:56:13.247" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 17:56:13.243" endtime="20191119 17:56:13.247"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 17:56:13.248" level="INFO">1</msg>
<status status="PASS" starttime="20191119 17:56:13.247" endtime="20191119 17:56:13.248"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 17:56:13.249" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 17:56:13.248" endtime="20191119 17:56:13.249"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 17:56:13.249" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 17:56:13.249" endtime="20191119 17:56:13.249"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 17:56:13.266" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 17:56:13.250" endtime="20191119 17:56:13.266"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 17:56:15.270" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:13.267" endtime="20191119 17:56:15.270"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 17:56:15.272" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:15.271" endtime="20191119 17:56:15.272"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:13.250" endtime="20191119 17:56:15.272"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:13.242" endtime="20191119 17:56:15.272"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 17:56:15.274" level="INFO">Length is 12</msg>
<msg timestamp="20191119 17:56:15.274" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 17:56:15.274" endtime="20191119 17:56:15.275"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 17:56:15.277" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 17:56:15.277" endtime="20191119 17:56:15.277"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:15.275" endtime="20191119 17:56:15.277"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:15.275" endtime="20191119 17:56:15.278"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:15.275" endtime="20191119 17:56:15.278"></status>
</kw>
<msg timestamp="20191119 17:56:15.278" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 17:56:15.273" endtime="20191119 17:56:15.278"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 17:56:15.279" level="INFO">1</msg>
<status status="PASS" starttime="20191119 17:56:15.279" endtime="20191119 17:56:15.279"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 17:56:15.280" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 17:56:15.279" endtime="20191119 17:56:15.280"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 17:56:15.281" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 17:56:15.280" endtime="20191119 17:56:15.281"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 17:56:15.324" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 17:56:15.281" endtime="20191119 17:56:15.324"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 17:56:17.326" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:15.325" endtime="20191119 17:56:17.327"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 17:56:17.331" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:17.328" endtime="20191119 17:56:17.331"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:15.281" endtime="20191119 17:56:17.332"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:15.273" endtime="20191119 17:56:17.333"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 17:56:17.340" level="INFO">Length is 12</msg>
<msg timestamp="20191119 17:56:17.341" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 17:56:17.339" endtime="20191119 17:56:17.341"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 17:56:17.352" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 17:56:17.351" endtime="20191119 17:56:17.352"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:17.344" endtime="20191119 17:56:17.353"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:17.343" endtime="20191119 17:56:17.354"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:17.342" endtime="20191119 17:56:17.354"></status>
</kw>
<msg timestamp="20191119 17:56:17.356" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 17:56:17.337" endtime="20191119 17:56:17.357"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 17:56:17.358" level="INFO">1</msg>
<status status="PASS" starttime="20191119 17:56:17.358" endtime="20191119 17:56:17.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 17:56:17.360" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 17:56:17.359" endtime="20191119 17:56:17.360"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 17:56:17.361" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 17:56:17.360" endtime="20191119 17:56:17.361"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 17:56:17.405" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 17:56:17.363" endtime="20191119 17:56:17.405"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 17:56:19.410" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:17.406" endtime="20191119 17:56:19.410"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 17:56:19.410" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:19.410" endtime="20191119 17:56:19.410"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:17.362" endtime="20191119 17:56:19.410"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:17.335" endtime="20191119 17:56:19.410"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 17:56:19.410" level="INFO">Length is 12</msg>
<msg timestamp="20191119 17:56:19.410" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 17:56:19.410" endtime="20191119 17:56:19.410"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 17:56:19.410" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 17:56:19.410" endtime="20191119 17:56:19.410"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:19.410" endtime="20191119 17:56:19.410"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:19.410" endtime="20191119 17:56:19.410"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:19.410" endtime="20191119 17:56:19.410"></status>
</kw>
<msg timestamp="20191119 17:56:19.410" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 17:56:19.410" endtime="20191119 17:56:19.410"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 17:56:19.410" level="INFO">1</msg>
<status status="PASS" starttime="20191119 17:56:19.410" endtime="20191119 17:56:19.410"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 17:56:19.410" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 17:56:19.410" endtime="20191119 17:56:19.410"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 17:56:19.420" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 17:56:19.410" endtime="20191119 17:56:19.420"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 17:56:19.503" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 17:56:19.420" endtime="20191119 17:56:19.504"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 17:56:21.510" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:19.504" endtime="20191119 17:56:21.510"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 17:56:21.513" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:21.513" endtime="20191119 17:56:21.513"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:19.420" endtime="20191119 17:56:21.513"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:19.410" endtime="20191119 17:56:21.513"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 17:56:21.522" level="INFO">Length is 12</msg>
<msg timestamp="20191119 17:56:21.522" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 17:56:21.522" endtime="20191119 17:56:21.522"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 17:56:21.532" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 17:56:21.532" endtime="20191119 17:56:21.532"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:21.522" endtime="20191119 17:56:21.532"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:21.522" endtime="20191119 17:56:21.532"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:21.522" endtime="20191119 17:56:21.532"></status>
</kw>
<msg timestamp="20191119 17:56:21.540" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 17:56:21.520" endtime="20191119 17:56:21.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 17:56:21.543" level="INFO">1</msg>
<status status="PASS" starttime="20191119 17:56:21.543" endtime="20191119 17:56:21.543"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 17:56:21.543" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 17:56:21.543" endtime="20191119 17:56:21.543"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 17:56:21.550" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 17:56:21.543" endtime="20191119 17:56:21.550"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 17:56:21.620" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 17:56:21.552" endtime="20191119 17:56:21.620"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 17:56:23.622" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:21.620" endtime="20191119 17:56:23.622"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 17:56:23.624" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:23.623" endtime="20191119 17:56:23.625"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:21.550" endtime="20191119 17:56:23.625"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:21.513" endtime="20191119 17:56:23.626"></status>
</kw>
<kw name="Then Delete Button is &quot;appeared&quot;" library="General definitions">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191119 17:56:23.629" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191119 17:56:23.628" endtime="20191119 17:56:23.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Element Should Be Visible</arg>
<arg>${btnDelete}</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Element Should Not Be Visible</arg>
<arg>${btnDelete}</arg>
</arguments>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<arguments>
<arg>${btnDelete}</arg>
</arguments>
<msg timestamp="20191119 17:56:23.676" level="INFO">Element '//div[@id='exit-footer' and @style='display: block;']/div[@id='delete-button']' is displayed.</msg>
<status status="PASS" starttime="20191119 17:56:23.631" endtime="20191119 17:56:23.677"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:23.630" endtime="20191119 17:56:23.677"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:23.627" endtime="20191119 17:56:23.677"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 17:56:23.679" level="INFO">Length is 12</msg>
<msg timestamp="20191119 17:56:23.679" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 17:56:23.679" endtime="20191119 17:56:23.679"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 17:56:23.682" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 17:56:23.682" endtime="20191119 17:56:23.682"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:23.680" endtime="20191119 17:56:23.683"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:23.680" endtime="20191119 17:56:23.683"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:23.680" endtime="20191119 17:56:23.683"></status>
</kw>
<msg timestamp="20191119 17:56:23.684" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 17:56:23.678" endtime="20191119 17:56:23.684"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 17:56:23.684" level="INFO">1</msg>
<status status="PASS" starttime="20191119 17:56:23.684" endtime="20191119 17:56:23.684"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 17:56:23.685" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 17:56:23.685" endtime="20191119 17:56:23.685"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 17:56:23.686" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 17:56:23.686" endtime="20191119 17:56:23.686"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 17:56:23.719" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 17:56:23.687" endtime="20191119 17:56:23.719"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 17:56:25.720" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:23.720" endtime="20191119 17:56:25.721"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 17:56:25.724" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:25.722" endtime="20191119 17:56:25.725"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:23.686" endtime="20191119 17:56:25.726"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:23.678" endtime="20191119 17:56:25.727"></status>
</kw>
<kw name="Then Delete Button is &quot;disappeared&quot;" library="General definitions">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191119 17:56:25.732" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191119 17:56:25.730" endtime="20191119 17:56:25.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Element Should Be Visible</arg>
<arg>${btnDelete}</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Element Should Not Be Visible</arg>
<arg>${btnDelete}</arg>
</arguments>
<kw name="Element Should Not Be Visible" library="SeleniumLibrary">
<doc>Verifies that the element identified by ``locator`` is NOT visible.</doc>
<arguments>
<arg>${btnDelete}</arg>
</arguments>
<msg timestamp="20191119 17:56:25.782" level="INFO">Element '//div[@id='exit-footer' and @style='display: block;']/div[@id='delete-button']' exists but is not displayed.</msg>
<status status="PASS" starttime="20191119 17:56:25.736" endtime="20191119 17:56:25.782"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:25.734" endtime="20191119 17:56:25.783"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:25.729" endtime="20191119 17:56:25.783"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 17:56:25.786" level="INFO">Length is 12</msg>
<msg timestamp="20191119 17:56:25.786" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 17:56:25.786" endtime="20191119 17:56:25.787"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 17:56:25.792" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 17:56:25.791" endtime="20191119 17:56:25.792"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:25.788" endtime="20191119 17:56:25.792"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:25.788" endtime="20191119 17:56:25.792"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:25.787" endtime="20191119 17:56:25.793"></status>
</kw>
<msg timestamp="20191119 17:56:25.794" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 17:56:25.785" endtime="20191119 17:56:25.794"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 17:56:25.795" level="INFO">1</msg>
<status status="PASS" starttime="20191119 17:56:25.794" endtime="20191119 17:56:25.795"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 17:56:25.797" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 17:56:25.796" endtime="20191119 17:56:25.797"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 17:56:25.798" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 17:56:25.797" endtime="20191119 17:56:25.798"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 17:56:25.834" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 17:56:25.800" endtime="20191119 17:56:25.835"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 17:56:27.836" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:25.835" endtime="20191119 17:56:27.837"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 17:56:27.840" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:27.838" endtime="20191119 17:56:27.841"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:25.799" endtime="20191119 17:56:27.842"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:25.784" endtime="20191119 17:56:27.843"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 17:56:27.850" level="INFO">Length is 12</msg>
<msg timestamp="20191119 17:56:27.850" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 17:56:27.848" endtime="20191119 17:56:27.851"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 17:56:27.860" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 17:56:27.860" endtime="20191119 17:56:27.861"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:27.854" endtime="20191119 17:56:27.861"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:27.853" endtime="20191119 17:56:27.862"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:27.852" endtime="20191119 17:56:27.862"></status>
</kw>
<msg timestamp="20191119 17:56:27.863" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 17:56:27.846" endtime="20191119 17:56:27.863"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 17:56:27.865" level="INFO">1</msg>
<status status="PASS" starttime="20191119 17:56:27.864" endtime="20191119 17:56:27.865"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 17:56:27.866" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 17:56:27.866" endtime="20191119 17:56:27.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 17:56:27.868" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 17:56:27.867" endtime="20191119 17:56:27.869"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 17:56:27.891" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 17:56:27.870" endtime="20191119 17:56:27.892"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 17:56:29.910" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:27.892" endtime="20191119 17:56:29.911"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 17:56:29.913" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:29.912" endtime="20191119 17:56:29.914"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:27.869" endtime="20191119 17:56:29.915"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:27.845" endtime="20191119 17:56:29.915"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 17:56:29.921" level="INFO">Length is 12</msg>
<msg timestamp="20191119 17:56:29.922" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 17:56:29.920" endtime="20191119 17:56:29.922"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 17:56:29.930" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 17:56:29.929" endtime="20191119 17:56:29.930"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:29.924" endtime="20191119 17:56:29.930"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:29.924" endtime="20191119 17:56:29.930"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:29.923" endtime="20191119 17:56:29.931"></status>
</kw>
<msg timestamp="20191119 17:56:29.932" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 17:56:29.918" endtime="20191119 17:56:29.932"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 17:56:29.933" level="INFO">1</msg>
<status status="PASS" starttime="20191119 17:56:29.932" endtime="20191119 17:56:29.933"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 17:56:29.935" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 17:56:29.934" endtime="20191119 17:56:29.935"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 17:56:29.936" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 17:56:29.935" endtime="20191119 17:56:29.936"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 17:56:29.970" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 17:56:29.937" endtime="20191119 17:56:29.970"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 17:56:31.980" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:29.971" endtime="20191119 17:56:31.981"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 17:56:31.984" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:31.982" endtime="20191119 17:56:31.985"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:29.937" endtime="20191119 17:56:31.986"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:29.917" endtime="20191119 17:56:31.987"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 17:56:31.994" level="INFO">Length is 12</msg>
<msg timestamp="20191119 17:56:31.994" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 17:56:31.992" endtime="20191119 17:56:31.995"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 17:56:32.002" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 17:56:32.001" endtime="20191119 17:56:32.002"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:31.998" endtime="20191119 17:56:32.003"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:31.997" endtime="20191119 17:56:32.003"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:31.996" endtime="20191119 17:56:32.004"></status>
</kw>
<msg timestamp="20191119 17:56:32.005" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 17:56:31.990" endtime="20191119 17:56:32.005"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 17:56:32.006" level="INFO">1</msg>
<status status="PASS" starttime="20191119 17:56:32.006" endtime="20191119 17:56:32.007"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 17:56:32.008" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 17:56:32.007" endtime="20191119 17:56:32.008"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 17:56:32.010" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 17:56:32.009" endtime="20191119 17:56:32.010"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 17:56:32.046" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 17:56:32.011" endtime="20191119 17:56:32.046"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 17:56:34.060" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:32.047" endtime="20191119 17:56:34.060"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 17:56:34.063" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 17:56:34.063" endtime="20191119 17:56:34.063"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:32.011" endtime="20191119 17:56:34.063"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:31.989" endtime="20191119 17:56:34.063"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 17:56:34.100" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191119 17:56:34.070" endtime="20191119 17:56:34.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 17:56:34.100" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191119 17:56:34.100" endtime="20191119 17:56:34.179"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:34.100" endtime="20191119 17:56:34.180"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 17:56:34.700" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 17:56:34.180" endtime="20191119 17:56:34.700"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:34.180" endtime="20191119 17:56:34.700"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:34.100" endtime="20191119 17:56:34.700"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:34.100" endtime="20191119 17:56:34.700"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 17:56:34.710" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191119 17:56:34.700" endtime="20191119 17:56:34.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 17:56:34.710" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 17:56:34.710" endtime="20191119 17:56:34.740"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:34.710" endtime="20191119 17:56:34.741"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 17:56:35.243" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 17:56:34.742" endtime="20191119 17:56:35.244"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:34.741" endtime="20191119 17:56:35.245"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:34.710" endtime="20191119 17:56:35.246"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:34.710" endtime="20191119 17:56:35.247"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191119 17:56:35.248" endtime="20191119 17:56:37.390"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:34.063" endtime="20191119 17:56:37.390"></status>
</kw>
<status status="PASS" starttime="20191119 17:56:00.769" endtime="20191119 17:56:37.390" critical="yes"></status>
</test>
<status status="PASS" starttime="20191119 17:56:00.389" endtime="20191119 17:56:37.394"></status>
</suite>
<status status="PASS" starttime="20191119 17:56:00.389" endtime="20191119 17:56:37.403"></status>
</suite>
<status status="PASS" starttime="20191119 17:56:00.389" endtime="20191119 17:56:37.403"></status>
</suite>
<status status="PASS" starttime="20191119 17:56:00.389" endtime="20191119 17:56:37.410"></status>
</suite>
<status status="PASS" starttime="20191119 17:56:00.359" endtime="20191119 17:56:37.410"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="1" fail="0" id="s1-s1" name="Test Resources">BulkPatching Robot.Test Resources</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Test Suites">BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1" name="2. Insert All End As">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1-s1" name="2.4. Check End A when plugging correct tip in the middle of list of End A then replug">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As.2.4. Check End A when plugging correct tip in the middle of list of End A then replug</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
