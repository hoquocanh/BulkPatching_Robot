<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20191118 17:18:00.123" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1" name="Test Resources" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources">
<suite id="s1-s1-s1" name="Test Suites" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites">
<suite id="s1-s1-s1-s1" name="2. Insert All End As" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As">
<suite id="s1-s1-s1-s1-s1" name="2.1. Check header of End A and End B when openning Bulk Patching screen firstly" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As\2.1. Check header of End A and End B when openning Bulk Patching screen firstly.robot">
<test id="s1-s1-s1-s1-s1-t1" name="INSERT_END_A_02_02_08_Verify that all ImVisionXs in the zone show the bulk patching list correctly after plugging a connector into the End A list if there is a HDF panel">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:00.531" endtime="20191118 17:18:00.532"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191118 17:18:00.533" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191118 17:18:01.923" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191118 17:18:00.533" endtime="20191118 17:18:01.923"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:00.531" endtime="20191118 17:18:01.923"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General definitions">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191118 17:18:01.925" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191118 17:18:01.924" endtime="20191118 17:18:01.925"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191118 17:18:01.925" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191118 17:18:01.925" endtime="20191118 17:18:05.114"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191118 17:18:05.114" endtime="20191118 17:18:06.235"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191118 17:18:06.737" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191118 17:18:06.235" endtime="20191118 17:18:06.737"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General definitions">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191118 17:18:06.751" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191118 17:18:06.738" endtime="20191118 17:18:06.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:06.751" endtime="20191118 17:18:06.752"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191118 17:18:06.763" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191118 17:18:06.752" endtime="20191118 17:18:06.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:06.764" endtime="20191118 17:18:06.764"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191118 17:18:06.776" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191118 17:18:06.765" endtime="20191118 17:18:06.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:06.776" endtime="20191118 17:18:06.777"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:06.737" endtime="20191118 17:18:06.777"></status>
</kw>
<kw name="Go To Home Screen" library="General definitions">
<kw name="Click Web Button" library="General definitions">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191118 17:18:06.778" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191118 17:18:06.778" endtime="20191118 17:18:06.855"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:06.778" endtime="20191118 17:18:06.855"></status>
</kw>
<kw name="Wait For Page Load" library="General definitions">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191118 17:18:07.357" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191118 17:18:06.856" endtime="20191118 17:18:07.357"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:06.856" endtime="20191118 17:18:07.357"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:06.777" endtime="20191118 17:18:07.358"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:01.924" endtime="20191118 17:18:07.358"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:00.530" endtime="20191118 17:18:07.358"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home definitions">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191118 17:18:07.360" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191118 17:18:07.359" endtime="20191118 17:18:07.406"></status>
</kw>
<kw name="Wait For Page Load" library="General definitions">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191118 17:18:07.909" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191118 17:18:07.407" endtime="20191118 17:18:07.909"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.406" endtime="20191118 17:18:07.909"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.359" endtime="20191118 17:18:07.910"></status>
</kw>
<kw name="When Plugin HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;3&quot; Port &quot;1&quot;" library="Bulk Patching definitions">
<kw name="Get HDF Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191118 17:18:07.911" level="INFO">Length is 12</msg>
<msg timestamp="20191118 17:18:07.912" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191118 17:18:07.911" endtime="20191118 17:18:07.912"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:07.913" endtime="20191118 17:18:07.914"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.912" endtime="20191118 17:18:07.914"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:07.915" endtime="20191118 17:18:07.916"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.914" endtime="20191118 17:18:07.916"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:07.917" endtime="20191118 17:18:07.918"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.916" endtime="20191118 17:18:07.918"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:07.919" endtime="20191118 17:18:07.920"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.918" endtime="20191118 17:18:07.920"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:07.921" endtime="20191118 17:18:07.922"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.920" endtime="20191118 17:18:07.922"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:07.923" endtime="20191118 17:18:07.924"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.923" endtime="20191118 17:18:07.924"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191118 17:18:07.926" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191118 17:18:07.926" endtime="20191118 17:18:07.927"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.925" endtime="20191118 17:18:07.927"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.924" endtime="20191118 17:18:07.927"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.912" endtime="20191118 17:18:07.927"></status>
</kw>
<msg timestamp="20191118 17:18:07.928" level="INFO">${panel index} = 7</msg>
<status status="PASS" starttime="20191118 17:18:07.910" endtime="20191118 17:18:07.928"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191118 17:18:07.928" level="INFO">7</msg>
<status status="PASS" starttime="20191118 17:18:07.928" endtime="20191118 17:18:07.929"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191118 17:18:07.929" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 7 --port 1</msg>
<status status="PASS" starttime="20191118 17:18:07.929" endtime="20191118 17:18:07.929"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191118 17:18:07.930" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 7 --port 1</msg>
<status status="PASS" starttime="20191118 17:18:07.930" endtime="20191118 17:18:07.930"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191118 17:18:07.951" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 7 --port 1</msg>
<status status="PASS" starttime="20191118 17:18:07.931" endtime="20191118 17:18:07.951"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191118 17:18:09.954" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=7
type=hdf
panel_state=RUN
modulehd=3
orient=alpha
serial=27FFFF000003
count=11
# </msg>
<status status="PASS" starttime="20191118 17:18:07.952" endtime="20191118 17:18:09.954"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191118 17:18:09.955" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=7
type=hdf
panel_state=RUN
modulehd=3
orient=alpha
serial=27FFFF000003
count=11
# </msg>
<status status="PASS" starttime="20191118 17:18:09.954" endtime="20191118 17:18:09.955"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.930" endtime="20191118 17:18:09.955"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:07.910" endtime="20191118 17:18:09.956"></status>
</kw>
<kw name="Then Check and see if Rack &quot;1&quot; Panel &quot;4&quot; Module &quot;3&quot; Port &quot;1&quot; existed in End &quot;A&quot;" library="Bulk Patching definitions">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:09.957" endtime="20191118 17:18:09.958"></status>
</kw>
<msg timestamp="20191118 17:18:09.958" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191118 17:18:09.957" endtime="20191118 17:18:09.958"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191118 17:18:09.958" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191118 17:18:09.958" endtime="20191118 17:18:09.959"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191118 17:18:09.959" level="INFO">${input panel} = -Panel 4</msg>
<status status="PASS" starttime="20191118 17:18:09.959" endtime="20191118 17:18:09.959"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Module</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${input module}</var>
</assign>
<msg timestamp="20191118 17:18:09.960" level="INFO">${input module} = -Module 3</msg>
<status status="PASS" starttime="20191118 17:18:09.959" endtime="20191118 17:18:09.960"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191118 17:18:09.960" level="INFO">${input port} = -Port 1</msg>
<status status="PASS" starttime="20191118 17:18:09.960" endtime="20191118 17:18:09.961"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input module}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191118 17:18:09.961" level="INFO">${input port information} = Rack 1-Panel 4-Module 3-Port 1</msg>
<status status="PASS" starttime="20191118 17:18:09.961" endtime="20191118 17:18:09.961"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191118 17:18:09.962" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191118 17:18:09.962" endtime="20191118 17:18:09.962"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191118 17:18:09.963" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 3-Port 1')]</msg>
<status status="PASS" starttime="20191118 17:18:09.962" endtime="20191118 17:18:09.963"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191118 17:18:09.976" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191118 17:18:09.964" endtime="20191118 17:18:09.977"></status>
</kw>
<msg timestamp="20191118 17:18:09.977" level="INFO">${number of lines} = 1</msg>
<status status="PASS" starttime="20191118 17:18:09.963" endtime="20191118 17:18:09.977"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191118 17:18:09.978" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191118 17:18:09.978" endtime="20191118 17:18:09.978"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191118 17:18:09.979" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191118 17:18:09.979" endtime="20191118 17:18:09.979"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191118 17:18:09.980" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191118 17:18:09.980" endtime="20191118 17:18:09.980"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191118 17:18:09.981" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 3-Port 1')]</msg>
<status status="PASS" starttime="20191118 17:18:09.981" endtime="20191118 17:18:09.981"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191118 17:18:09.982" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 3-Port 1')]</msg>
<status status="PASS" starttime="20191118 17:18:09.981" endtime="20191118 17:18:09.982"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191118 17:18:09.993" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191118 17:18:09.982" endtime="20191118 17:18:09.993"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191118 17:18:09.993" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191118 17:18:09.993" endtime="20191118 17:18:09.994"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:09.979" endtime="20191118 17:18:09.994"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:09.978" endtime="20191118 17:18:09.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${count}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20191118 17:18:09.994" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191118 17:18:09.994" endtime="20191118 17:18:09.995"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:09.956" endtime="20191118 17:18:09.995"></status>
</kw>
<kw name="Then Plugout HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;3&quot; Port &quot;1&quot;" library="Bulk Patching definitions">
<kw name="Get HDF Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191118 17:18:09.996" level="INFO">Length is 12</msg>
<msg timestamp="20191118 17:18:09.997" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191118 17:18:09.996" endtime="20191118 17:18:09.997"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:09.997" endtime="20191118 17:18:09.999"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:09.997" endtime="20191118 17:18:09.999"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:09.999" endtime="20191118 17:18:10.001"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:09.999" endtime="20191118 17:18:10.001"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:10.001" endtime="20191118 17:18:10.003"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:10.001" endtime="20191118 17:18:10.003"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:10.003" endtime="20191118 17:18:10.005"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:10.003" endtime="20191118 17:18:10.005"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:10.005" endtime="20191118 17:18:10.007"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:10.005" endtime="20191118 17:18:10.007"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191118 17:18:10.008" endtime="20191118 17:18:10.009"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:10.007" endtime="20191118 17:18:10.009"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191118 17:18:10.011" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191118 17:18:10.011" endtime="20191118 17:18:10.012"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:10.010" endtime="20191118 17:18:10.012"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:10.009" endtime="20191118 17:18:10.012"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:09.997" endtime="20191118 17:18:10.012"></status>
</kw>
<msg timestamp="20191118 17:18:10.013" level="INFO">${panel index} = 7</msg>
<status status="PASS" starttime="20191118 17:18:09.996" endtime="20191118 17:18:10.013"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191118 17:18:10.013" level="INFO">7</msg>
<status status="PASS" starttime="20191118 17:18:10.013" endtime="20191118 17:18:10.013"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191118 17:18:10.014" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 7 --port 1</msg>
<status status="PASS" starttime="20191118 17:18:10.014" endtime="20191118 17:18:10.014"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191118 17:18:10.015" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 7 --port 1</msg>
<status status="PASS" starttime="20191118 17:18:10.014" endtime="20191118 17:18:10.015"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191118 17:18:10.049" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 7 --port 1</msg>
<status status="PASS" starttime="20191118 17:18:10.016" endtime="20191118 17:18:10.049"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191118 17:18:12.051" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=7
type=hdf
panel_state=RUN
modulehd=3
orient=alpha
serial=27FFFF000003
count=11
# </msg>
<status status="PASS" starttime="20191118 17:18:10.050" endtime="20191118 17:18:12.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191118 17:18:12.052" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=7
type=hdf
panel_state=RUN
modulehd=3
orient=alpha
serial=27FFFF000003
count=11
# </msg>
<status status="PASS" starttime="20191118 17:18:12.051" endtime="20191118 17:18:12.052"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:10.015" endtime="20191118 17:18:12.052"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:09.995" endtime="20191118 17:18:12.053"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General definitions" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191118 17:18:12.061" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191118 17:18:12.053" endtime="20191118 17:18:12.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General definitions">
<kw name="Click Web Button" library="General definitions">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191118 17:18:12.064" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191118 17:18:12.063" endtime="20191118 17:18:12.102"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:12.063" endtime="20191118 17:18:12.103"></status>
</kw>
<kw name="Wait For Page Load" library="General definitions">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191118 17:18:12.606" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191118 17:18:12.103" endtime="20191118 17:18:12.606"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:12.103" endtime="20191118 17:18:12.606"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:12.063" endtime="20191118 17:18:12.606"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:12.062" endtime="20191118 17:18:12.607"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191118 17:18:12.616" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191118 17:18:12.607" endtime="20191118 17:18:12.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General definitions">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191118 17:18:12.618" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191118 17:18:12.618" endtime="20191118 17:18:12.646"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:12.617" endtime="20191118 17:18:12.646"></status>
</kw>
<kw name="Wait For Page Load" library="General definitions">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191118 17:18:13.148" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191118 17:18:12.647" endtime="20191118 17:18:13.148"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:12.647" endtime="20191118 17:18:13.148"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:12.617" endtime="20191118 17:18:13.149"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:12.616" endtime="20191118 17:18:13.149"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191118 17:18:13.149" endtime="20191118 17:18:16.289"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:12.053" endtime="20191118 17:18:16.289"></status>
</kw>
<status status="PASS" starttime="20191118 17:18:00.523" endtime="20191118 17:18:16.290" critical="yes"></status>
</test>
<status status="PASS" starttime="20191118 17:18:00.180" endtime="20191118 17:18:16.291"></status>
</suite>
<status status="PASS" starttime="20191118 17:18:00.178" endtime="20191118 17:18:16.293"></status>
</suite>
<status status="PASS" starttime="20191118 17:18:00.175" endtime="20191118 17:18:16.295"></status>
</suite>
<status status="PASS" starttime="20191118 17:18:00.172" endtime="20191118 17:18:16.296"></status>
</suite>
<status status="PASS" starttime="20191118 17:18:00.149" endtime="20191118 17:18:16.298"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="1" fail="0" id="s1-s1" name="Test Resources">BulkPatching Robot.Test Resources</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Test Suites">BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1" name="2. Insert All End As">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1-s1" name="2.1. Check header of End A and End B when openning Bulk Patching screen firstly">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As.2.1. Check header of End A and End B when openning Bulk Patching screen firstly</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
