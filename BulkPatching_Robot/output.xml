<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20191114 15:05:11.983" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1" name="Test Resources" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources">
<suite id="s1-s1-s1" name="Test Suites" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites">
<suite id="s1-s1-s1-s1" name="2. Insert All End As" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As">
<suite id="s1-s1-s1-s1-s1" name="2.1. Check header of End A and End B when openning Bulk Patching screen firstly" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As\2.1. Check header of End A and End B when openning Bulk Patching screen firstly.robot">
<test id="s1-s1-s1-s1-s1-t1" name="INSERT_END_A_02_02_01_Verify that all ImVisionXs in the zone show the bulk patching list correctly after plugging a connector into the End A list if there is a 24-port Legacy Copper">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191114 15:05:12.368" endtime="20191114 15:05:12.369"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191114 15:05:12.369" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191114 15:05:13.772" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191114 15:05:12.369" endtime="20191114 15:05:13.772"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:12.368" endtime="20191114 15:05:13.772"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General definitions">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191114 15:05:13.774" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191114 15:05:13.773" endtime="20191114 15:05:13.774"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191114 15:05:13.775" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191114 15:05:13.774" endtime="20191114 15:05:17.218"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191114 15:05:17.218" endtime="20191114 15:05:18.365"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191114 15:05:18.868" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191114 15:05:18.365" endtime="20191114 15:05:18.868"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General definitions">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191114 15:05:18.894" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191114 15:05:18.870" endtime="20191114 15:05:18.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191114 15:05:18.895" endtime="20191114 15:05:18.896"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191114 15:05:18.907" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191114 15:05:18.896" endtime="20191114 15:05:18.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191114 15:05:18.908" endtime="20191114 15:05:18.908"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191114 15:05:18.919" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191114 15:05:18.908" endtime="20191114 15:05:18.919"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191114 15:05:18.919" endtime="20191114 15:05:18.920"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:18.869" endtime="20191114 15:05:18.920"></status>
</kw>
<kw name="Go To Home Screen" library="General definitions">
<kw name="Click Web Button" library="General definitions">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191114 15:05:18.921" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191114 15:05:18.921" endtime="20191114 15:05:19.004"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:18.921" endtime="20191114 15:05:19.004"></status>
</kw>
<kw name="Wait For Page Load" library="General definitions">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191114 15:05:19.506" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191114 15:05:19.005" endtime="20191114 15:05:19.507"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:19.004" endtime="20191114 15:05:19.508"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:18.920" endtime="20191114 15:05:19.509"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:13.773" endtime="20191114 15:05:19.510"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:12.367" endtime="20191114 15:05:19.511"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home definitions">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191114 15:05:19.516" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191114 15:05:19.514" endtime="20191114 15:05:19.590"></status>
</kw>
<kw name="Wait For Page Load" library="General definitions">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191114 15:05:20.093" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191114 15:05:19.591" endtime="20191114 15:05:20.094"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:19.590" endtime="20191114 15:05:20.094"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:19.512" endtime="20191114 15:05:20.095"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Port &quot;1&quot;" library="Bulk Patching definitions">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panelID}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191114 15:05:20.099" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191114 15:05:20.098" endtime="20191114 15:05:20.100"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191114 15:05:20.102" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191114 15:05:20.101" endtime="20191114 15:05:20.102"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191114 15:05:20.120" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191114 15:05:20.104" endtime="20191114 15:05:20.120"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191114 15:05:22.123" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191114 15:05:20.121" endtime="20191114 15:05:22.124"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191114 15:05:22.127" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191114 15:05:22.125" endtime="20191114 15:05:22.129"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:20.103" endtime="20191114 15:05:22.130"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:20.097" endtime="20191114 15:05:22.131"></status>
</kw>
<kw name="Then Check to see if Rack &quot;1&quot; Panel &quot;1&quot; Port &quot;1&quot; existed in End &quot;A&quot;" library="Bulk Patching definitions">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191114 15:05:22.136" endtime="20191114 15:05:22.137"></status>
</kw>
<msg timestamp="20191114 15:05:22.137" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191114 15:05:22.134" endtime="20191114 15:05:22.137"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191114 15:05:22.138" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191114 15:05:22.138" endtime="20191114 15:05:22.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191114 15:05:22.140" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191114 15:05:22.139" endtime="20191114 15:05:22.140"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191114 15:05:22.141" level="INFO">${input port} = -Port 1</msg>
<status status="PASS" starttime="20191114 15:05:22.140" endtime="20191114 15:05:22.141"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191114 15:05:22.142" level="INFO">${input port information} = Rack 1-Panel 1-Port 1</msg>
<status status="PASS" starttime="20191114 15:05:22.142" endtime="20191114 15:05:22.143"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191114 15:05:22.144" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191114 15:05:22.143" endtime="20191114 15:05:22.144"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191114 15:05:22.145" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 1')]</msg>
<status status="PASS" starttime="20191114 15:05:22.145" endtime="20191114 15:05:22.146"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191114 15:05:22.167" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191114 15:05:22.147" endtime="20191114 15:05:22.168"></status>
</kw>
<msg timestamp="20191114 15:05:22.168" level="INFO">${number of lines} = 1</msg>
<status status="PASS" starttime="20191114 15:05:22.146" endtime="20191114 15:05:22.168"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191114 15:05:22.169" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191114 15:05:22.168" endtime="20191114 15:05:22.169"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191114 15:05:22.170" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191114 15:05:22.169" endtime="20191114 15:05:22.170"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191114 15:05:22.171" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191114 15:05:22.170" endtime="20191114 15:05:22.171"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191114 15:05:22.171" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 1')]</msg>
<status status="PASS" starttime="20191114 15:05:22.171" endtime="20191114 15:05:22.171"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191114 15:05:22.172" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 1')]</msg>
<status status="PASS" starttime="20191114 15:05:22.172" endtime="20191114 15:05:22.172"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191114 15:05:22.185" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191114 15:05:22.172" endtime="20191114 15:05:22.185"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191114 15:05:22.185" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191114 15:05:22.185" endtime="20191114 15:05:22.186"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:22.169" endtime="20191114 15:05:22.186"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:22.169" endtime="20191114 15:05:22.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${count}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20191114 15:05:22.186" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191114 15:05:22.186" endtime="20191114 15:05:22.187"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:22.132" endtime="20191114 15:05:22.187"></status>
</kw>
<kw name="Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Port &quot;1&quot;" library="Bulk Patching definitions" type="teardown">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panelID}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191114 15:05:22.188" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191114 15:05:22.188" endtime="20191114 15:05:22.188"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191114 15:05:22.189" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191114 15:05:22.188" endtime="20191114 15:05:22.189"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191114 15:05:22.228" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191114 15:05:22.189" endtime="20191114 15:05:22.228"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191114 15:05:24.229" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191114 15:05:22.229" endtime="20191114 15:05:24.230"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191114 15:05:24.232" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191114 15:05:24.230" endtime="20191114 15:05:24.232"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:22.189" endtime="20191114 15:05:24.233"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:22.187" endtime="20191114 15:05:24.233"></status>
</kw>
<status status="PASS" starttime="20191114 15:05:12.366" endtime="20191114 15:05:24.234" critical="yes"></status>
</test>
<status status="PASS" starttime="20191114 15:05:12.040" endtime="20191114 15:05:24.236"></status>
</suite>
<status status="PASS" starttime="20191114 15:05:12.038" endtime="20191114 15:05:24.241"></status>
</suite>
<status status="PASS" starttime="20191114 15:05:12.035" endtime="20191114 15:05:24.246"></status>
</suite>
<status status="PASS" starttime="20191114 15:05:12.033" endtime="20191114 15:05:24.250"></status>
</suite>
<status status="PASS" starttime="20191114 15:05:12.009" endtime="20191114 15:05:24.253"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="1" fail="0" id="s1-s1" name="Test Resources">BulkPatching Robot.Test Resources</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Test Suites">BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1" name="2. Insert All End As">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1-s1" name="2.1. Check header of End A and End B when openning Bulk Patching screen firstly">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As.2.1. Check header of End A and End B when openning Bulk Patching screen firstly</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
