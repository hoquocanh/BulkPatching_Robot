<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20191224 16:28:28.101" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1" name="Test Resources" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources">
<suite id="s1-s1-s1" name="Test Suites" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites">
<suite id="s1-s1-s1-s1" name="4. Exit Bulk Patchings Screen" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\4. Exit Bulk Patchings Screen">
<suite id="s1-s1-s1-s1-s1" name="4.4.2. Check all patches on Bulk patching list are patched successfully after waiting for timeout" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\4. Exit Bulk Patchings Screen\4.4.2. Check all patches on Bulk patching list are patched successfully after waiting for timeout.robot">
<test id="s1-s1-s1-s1-s1-t1" name="Exit_Bulk_04_02_01_Verify that all patches on Bulk patching list are patched successfully after time out if patching on a 24-port Legacy Copper">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:28:28.538" endtime="20191224 16:28:28.538"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191224 16:28:28.539" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191224 16:28:30.008" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191224 16:28:28.539" endtime="20191224 16:28:30.009"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:28.537" endtime="20191224 16:28:30.010"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191224 16:28:30.015" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191224 16:28:30.013" endtime="20191224 16:28:30.015"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191224 16:28:30.018" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191224 16:28:30.016" endtime="20191224 16:28:33.665"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191224 16:28:33.665" endtime="20191224 16:28:34.807"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191224 16:28:35.810" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191224 16:28:34.808" endtime="20191224 16:28:35.810"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191224 16:28:35.838" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191224 16:28:35.813" endtime="20191224 16:28:35.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191224 16:28:35.838" endtime="20191224 16:28:35.839"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191224 16:28:35.855" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191224 16:28:35.840" endtime="20191224 16:28:35.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191224 16:28:35.856" endtime="20191224 16:28:35.857"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191224 16:28:35.870" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191224 16:28:35.857" endtime="20191224 16:28:35.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191224 16:28:35.870" endtime="20191224 16:28:35.870"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:35.811" endtime="20191224 16:28:35.871"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191224 16:28:35.883" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191224 16:28:35.872" endtime="20191224 16:28:35.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191224 16:28:35.885" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191224 16:28:35.885" endtime="20191224 16:28:35.960"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191224 16:28:36.965" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191224 16:28:35.963" endtime="20191224 16:28:36.965"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:35.962" endtime="20191224 16:28:36.966"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:35.884" endtime="20191224 16:28:36.966"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:35.884" endtime="20191224 16:28:36.966"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:35.883" endtime="20191224 16:28:36.967"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:35.871" endtime="20191224 16:28:36.967"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:35.871" endtime="20191224 16:28:36.967"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:30.011" endtime="20191224 16:28:36.968"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:28.537" endtime="20191224 16:28:36.968"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191224 16:28:36.970" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191224 16:28:36.970" endtime="20191224 16:28:37.026"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191224 16:28:38.028" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191224 16:28:37.027" endtime="20191224 16:28:38.028"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:37.026" endtime="20191224 16:28:38.029"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:36.969" endtime="20191224 16:28:38.030"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20191224 16:28:38.036" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20191224 16:28:38.034" endtime="20191224 16:28:38.037"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20191224 16:28:38.040" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20191224 16:28:38.038" endtime="20191224 16:28:38.040"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:28:38.049" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:28:38.049" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:28:38.048" endtime="20191224 16:28:38.050"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:28:38.056" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:28:38.055" endtime="20191224 16:28:38.056"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:38.052" endtime="20191224 16:28:38.056"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:38.052" endtime="20191224 16:28:38.057"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:38.051" endtime="20191224 16:28:38.057"></status>
</kw>
<msg timestamp="20191224 16:28:38.058" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:28:38.045" endtime="20191224 16:28:38.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:28:38.059" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:28:38.059" endtime="20191224 16:28:38.059"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:28:38.061" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191224 16:28:38.060" endtime="20191224 16:28:38.061"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:28:38.062" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191224 16:28:38.061" endtime="20191224 16:28:38.062"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:28:38.086" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191224 16:28:38.064" endtime="20191224 16:28:38.086"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:28:40.089" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:28:38.087" endtime="20191224 16:28:40.089"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:28:40.090" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:28:40.089" endtime="20191224 16:28:40.090"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:38.063" endtime="20191224 16:28:40.091"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:38.043" endtime="20191224 16:28:40.091"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:38.042" endtime="20191224 16:28:40.091"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:28:40.093" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:28:40.093" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:28:40.093" endtime="20191224 16:28:40.093"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:28:40.096" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:28:40.096" endtime="20191224 16:28:40.096"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:40.094" endtime="20191224 16:28:40.096"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:40.094" endtime="20191224 16:28:40.097"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:40.093" endtime="20191224 16:28:40.097"></status>
</kw>
<msg timestamp="20191224 16:28:40.097" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:28:40.092" endtime="20191224 16:28:40.097"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:28:40.098" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:28:40.098" endtime="20191224 16:28:40.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:28:40.099" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191224 16:28:40.098" endtime="20191224 16:28:40.099"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:28:40.099" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191224 16:28:40.099" endtime="20191224 16:28:40.100"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:28:40.117" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191224 16:28:40.100" endtime="20191224 16:28:40.118"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:28:42.119" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:28:40.118" endtime="20191224 16:28:42.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:28:42.120" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:28:42.119" endtime="20191224 16:28:42.120"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:40.100" endtime="20191224 16:28:42.121"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:40.092" endtime="20191224 16:28:42.121"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:40.091" endtime="20191224 16:28:42.121"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:28:42.123" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:28:42.123" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:28:42.123" endtime="20191224 16:28:42.123"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:28:42.126" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:28:42.126" endtime="20191224 16:28:42.126"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:42.124" endtime="20191224 16:28:42.127"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:42.124" endtime="20191224 16:28:42.127"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:42.123" endtime="20191224 16:28:42.127"></status>
</kw>
<msg timestamp="20191224 16:28:42.127" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:28:42.122" endtime="20191224 16:28:42.127"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:28:42.128" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:28:42.128" endtime="20191224 16:28:42.128"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:28:42.129" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191224 16:28:42.129" endtime="20191224 16:28:42.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:28:42.130" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191224 16:28:42.129" endtime="20191224 16:28:42.130"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:28:42.169" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191224 16:28:42.131" endtime="20191224 16:28:42.169"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:28:44.170" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:28:42.170" endtime="20191224 16:28:44.171"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:28:44.174" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:28:44.172" endtime="20191224 16:28:44.175"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:42.130" endtime="20191224 16:28:44.176"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:42.121" endtime="20191224 16:28:44.177"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:42.121" endtime="20191224 16:28:44.178"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:38.041" endtime="20191224 16:28:44.178"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:38.032" endtime="20191224 16:28:44.179"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="Bulk Patching Page">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20191224 16:28:44.184" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20191224 16:28:44.183" endtime="20191224 16:28:44.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191224 16:28:44.218" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191224 16:28:44.193" endtime="20191224 16:28:44.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191224 16:28:44.222" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20191224 16:28:44.221" endtime="20191224 16:28:44.264"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191224 16:28:45.266" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191224 16:28:44.265" endtime="20191224 16:28:45.267"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:44.265" endtime="20191224 16:28:45.268"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:44.221" endtime="20191224 16:28:45.269"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:44.220" endtime="20191224 16:28:45.270"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:44.219" endtime="20191224 16:28:45.270"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:44.191" endtime="20191224 16:28:45.271"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:44.186" endtime="20191224 16:28:45.272"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191224 16:28:46.276" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191224 16:28:45.275" endtime="20191224 16:28:46.277"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:45.273" endtime="20191224 16:28:46.278"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:44.181" endtime="20191224 16:28:46.279"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="Virtual Panel definitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20191224 16:28:46.285" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20191224 16:28:46.283" endtime="20191224 16:28:46.286"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20191224 16:28:46.289" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20191224 16:28:46.287" endtime="20191224 16:28:46.289"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:28:46.298" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:28:46.299" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:28:46.297" endtime="20191224 16:28:46.299"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:28:46.306" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:28:46.306" endtime="20191224 16:28:46.307"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:46.302" endtime="20191224 16:28:46.307"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:46.301" endtime="20191224 16:28:46.307"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:46.300" endtime="20191224 16:28:46.308"></status>
</kw>
<msg timestamp="20191224 16:28:46.309" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:28:46.294" endtime="20191224 16:28:46.309"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:28:46.310" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:28:46.310" endtime="20191224 16:28:46.310"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:28:46.312" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191224 16:28:46.311" endtime="20191224 16:28:46.312"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:28:46.314" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191224 16:28:46.313" endtime="20191224 16:28:46.314"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:28:46.325" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191224 16:28:46.315" endtime="20191224 16:28:46.325"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:28:48.328" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:28:46.326" endtime="20191224 16:28:48.329"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:28:48.331" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:28:48.329" endtime="20191224 16:28:48.331"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:46.314" endtime="20191224 16:28:48.332"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:46.292" endtime="20191224 16:28:48.332"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:46.291" endtime="20191224 16:28:48.333"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:28:48.337" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:28:48.338" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:28:48.336" endtime="20191224 16:28:48.338"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:28:48.345" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:28:48.344" endtime="20191224 16:28:48.346"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:48.340" endtime="20191224 16:28:48.346"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:48.339" endtime="20191224 16:28:48.347"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:48.338" endtime="20191224 16:28:48.347"></status>
</kw>
<msg timestamp="20191224 16:28:48.350" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:28:48.335" endtime="20191224 16:28:48.350"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:28:48.352" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:28:48.351" endtime="20191224 16:28:48.353"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:28:48.356" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191224 16:28:48.354" endtime="20191224 16:28:48.356"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:28:48.359" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191224 16:28:48.357" endtime="20191224 16:28:48.359"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:28:48.386" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191224 16:28:48.362" endtime="20191224 16:28:48.386"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:28:50.388" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:28:48.386" endtime="20191224 16:28:50.389"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:28:50.392" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:28:50.390" endtime="20191224 16:28:50.393"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:48.360" endtime="20191224 16:28:50.394"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:48.334" endtime="20191224 16:28:50.395"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:48.333" endtime="20191224 16:28:50.396"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:28:50.403" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:28:50.404" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:28:50.402" endtime="20191224 16:28:50.404"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:28:50.414" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:28:50.413" endtime="20191224 16:28:50.414"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:50.407" endtime="20191224 16:28:50.414"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:50.406" endtime="20191224 16:28:50.414"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:50.405" endtime="20191224 16:28:50.415"></status>
</kw>
<msg timestamp="20191224 16:28:50.416" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:28:50.400" endtime="20191224 16:28:50.416"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:28:50.417" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:28:50.417" endtime="20191224 16:28:50.418"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:28:50.419" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191224 16:28:50.418" endtime="20191224 16:28:50.419"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:28:50.420" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191224 16:28:50.420" endtime="20191224 16:28:50.421"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:28:50.450" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191224 16:28:50.422" endtime="20191224 16:28:50.450"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:28:52.453" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:28:50.451" endtime="20191224 16:28:52.454"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:28:52.457" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:28:52.455" endtime="20191224 16:28:52.458"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:50.421" endtime="20191224 16:28:52.459"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:50.398" endtime="20191224 16:28:52.460"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:50.397" endtime="20191224 16:28:52.461"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:46.290" endtime="20191224 16:28:52.461"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:46.281" endtime="20191224 16:28:52.462"></status>
</kw>
<kw name="And Wait For Bulk Patching Timeout" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${BULK PATCHING TIMEOUT}</arg>
</arguments>
<msg timestamp="20191224 16:33:52.468" level="INFO">Slept 5 minutes</msg>
<status status="PASS" starttime="20191224 16:28:52.465" endtime="20191224 16:33:52.469"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:52.464" endtime="20191224 16:33:52.471"></status>
</kw>
<kw name="Then Bulk Patching Screen Should Be &quot;disappeared&quot;" library="Bulk Patching definitions">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191224 16:33:52.477" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191224 16:33:52.475" endtime="20191224 16:33:52.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Page Should Contain Element</arg>
<arg>${lblBulk Patching Title}</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Page Should Not Contain Element</arg>
<arg>${lblBulk Patching Title}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Page Should Not Contain Element</arg>
<arg>${lblBulk Patching Title}</arg>
</arguments>
<kw name="Page Should Not Contain Element" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<arguments>
<arg>${lblBulk Patching Title}</arg>
</arguments>
<msg timestamp="20191224 16:33:52.524" level="INFO">Current page does not contain element '//div[@id='bulk-patch-title' and @style='display: block;']'.</msg>
<status status="PASS" starttime="20191224 16:33:52.482" endtime="20191224 16:33:52.525"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:52.481" endtime="20191224 16:33:52.525"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:52.478" endtime="20191224 16:33:52.526"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:52.473" endtime="20191224 16:33:52.526"></status>
</kw>
<kw name="Then Confirm Button is &quot;disappeared&quot;" library="General definitions">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191224 16:33:52.529" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191224 16:33:52.529" endtime="20191224 16:33:52.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Element Should Be Visible</arg>
<arg>${btnConfirm}</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Element Should Not Be Visible</arg>
<arg>${btnConfirm}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Should Not Be Visible</arg>
<arg>${btnConfirm}</arg>
</arguments>
<kw name="Element Should Not Be Visible" library="SeleniumLibrary">
<doc>Verifies that the element identified by ``locator`` is NOT visible.</doc>
<arguments>
<arg>${btnConfirm}</arg>
</arguments>
<msg timestamp="20191224 16:33:52.553" level="INFO">Element '//div[@id='confirms' and @style='visibility: visible;']//input[@type='submit']' did not exist.</msg>
<status status="PASS" starttime="20191224 16:33:52.533" endtime="20191224 16:33:52.553"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:52.532" endtime="20191224 16:33:52.554"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:52.530" endtime="20191224 16:33:52.554"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:52.527" endtime="20191224 16:33:52.554"></status>
</kw>
<kw name="And Press Copper port at Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot; with keymode &quot;short&quot;" library="Virtual Panel definitions">
<doc>This keyword is used to press on a specific Copper port regarding to type of keymode</doc>
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:33:52.557" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:33:52.557" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:33:52.556" endtime="20191224 16:33:52.557"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:33:52.561" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:33:52.560" endtime="20191224 16:33:52.561"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:52.558" endtime="20191224 16:33:52.561"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:52.558" endtime="20191224 16:33:52.561"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:52.557" endtime="20191224 16:33:52.562"></status>
</kw>
<msg timestamp="20191224 16:33:52.562" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:33:52.556" endtime="20191224 16:33:52.562"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:33:52.563" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:33:52.563" endtime="20191224 16:33:52.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --press --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
<arg>--keymode</arg>
<arg>${keyMode}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:33:52.565" level="INFO">${completed command} = vp_cmd_helper --press --rack 1 --panel 1 --port 1 --keymode short</msg>
<status status="PASS" starttime="20191224 16:33:52.564" endtime="20191224 16:33:52.565"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:33:52.566" level="INFO">vp_cmd_helper --press --rack 1 --panel 1 --port 1 --keymode short</msg>
<status status="PASS" starttime="20191224 16:33:52.565" endtime="20191224 16:33:52.566"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:33:52.600" level="INFO">vp_cmd_helper --press --rack 1 --panel 1 --port 1 --keymode short</msg>
<status status="PASS" starttime="20191224 16:33:52.567" endtime="20191224 16:33:52.600"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:33:54.601" level="INFO">${stdout} = result=success
command=press
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:33:52.601" endtime="20191224 16:33:54.602"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:33:54.605" level="INFO">result=success
command=press
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:33:54.603" endtime="20191224 16:33:54.606"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:52.566" endtime="20191224 16:33:54.607"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:52.555" endtime="20191224 16:33:54.608"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; &quot;appeared&quot; in Trace screen" library="Trace definitions">
<doc>This keyword is used to check the information of Copper panel displaying in the same information rectangle area</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191224 16:33:54.613" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191224 16:33:54.612" endtime="20191224 16:33:54.614"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191224 16:33:54.616" level="INFO">${input panel} = Panel 1</msg>
<status status="PASS" starttime="20191224 16:33:54.615" endtime="20191224 16:33:54.617"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191224 16:33:54.619" level="INFO">${input port} = Port 1</msg>
<status status="PASS" starttime="20191224 16:33:54.618" endtime="20191224 16:33:54.620"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input rack}</arg>
</arguments>
<assign>
<var>${temp rack 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.625" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Rack 1')]</msg>
<status status="PASS" starttime="20191224 16:33:54.623" endtime="20191224 16:33:54.625"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.656" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.626" endtime="20191224 16:33:54.656"></status>
</kw>
<msg timestamp="20191224 16:33:54.657" level="INFO">${temp rack 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.621" endtime="20191224 16:33:54.657"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input panel}</arg>
</arguments>
<assign>
<var>${temp panel 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.659" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Panel 1')]</msg>
<status status="PASS" starttime="20191224 16:33:54.658" endtime="20191224 16:33:54.659"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.676" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.660" endtime="20191224 16:33:54.676"></status>
</kw>
<msg timestamp="20191224 16:33:54.677" level="INFO">${temp panel 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.658" endtime="20191224 16:33:54.677"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${temp port 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.678" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Port 1')]</msg>
<status status="PASS" starttime="20191224 16:33:54.678" endtime="20191224 16:33:54.678"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.689" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.678" endtime="20191224 16:33:54.689"></status>
</kw>
<msg timestamp="20191224 16:33:54.690" level="INFO">${temp port 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.677" endtime="20191224 16:33:54.690"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input rack}</arg>
</arguments>
<assign>
<var>${temp rack 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.691" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Rack 1')]</msg>
<status status="PASS" starttime="20191224 16:33:54.691" endtime="20191224 16:33:54.691"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.702" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.691" endtime="20191224 16:33:54.702"></status>
</kw>
<msg timestamp="20191224 16:33:54.702" level="INFO">${temp rack 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.690" endtime="20191224 16:33:54.702"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input panel}</arg>
</arguments>
<assign>
<var>${temp panel 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.704" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Panel 1')]</msg>
<status status="PASS" starttime="20191224 16:33:54.703" endtime="20191224 16:33:54.704"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.715" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.704" endtime="20191224 16:33:54.715"></status>
</kw>
<msg timestamp="20191224 16:33:54.715" level="INFO">${temp panel 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.703" endtime="20191224 16:33:54.715"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${temp port 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.716" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Port 1')]</msg>
<status status="PASS" starttime="20191224 16:33:54.716" endtime="20191224 16:33:54.717"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.727" level="INFO">${result} = 0</msg>
<status status="PASS" starttime="20191224 16:33:54.717" endtime="20191224 16:33:54.727"></status>
</kw>
<msg timestamp="20191224 16:33:54.727" level="INFO">${temp port 2} = 0</msg>
<status status="PASS" starttime="20191224 16:33:54.715" endtime="20191224 16:33:54.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${temp rack 1} == 1 and ${temp panel 1} == 1 and ${temp port 1} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${infor belong to left rectangle}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.729" endtime="20191224 16:33:54.729"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.728" endtime="20191224 16:33:54.729"></status>
</kw>
<msg timestamp="20191224 16:33:54.730" level="INFO">${infor belong to left rectangle} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.728" endtime="20191224 16:33:54.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${temp rack 2} == 1 and ${temp panel 2} == 1 and ${temp port 2} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${infor belong to right rectangle}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.731" endtime="20191224 16:33:54.731"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.731" endtime="20191224 16:33:54.732"></status>
</kw>
<msg timestamp="20191224 16:33:54.732" level="INFO">${infor belong to right rectangle} = 0</msg>
<status status="PASS" starttime="20191224 16:33:54.730" endtime="20191224 16:33:54.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${infor belong to left rectangle} == 1 or ${infor belong to right rectangle} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.733" endtime="20191224 16:33:54.733"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.733" endtime="20191224 16:33:54.733"></status>
</kw>
<msg timestamp="20191224 16:33:54.734" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.732" endtime="20191224 16:33:54.734"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191224 16:33:54.734" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191224 16:33:54.734" endtime="20191224 16:33:54.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.736" endtime="20191224 16:33:54.736"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.736" endtime="20191224 16:33:54.737"></status>
</kw>
<msg timestamp="20191224 16:33:54.737" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.735" endtime="20191224 16:33:54.737"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.738" endtime="20191224 16:33:54.738"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.737" endtime="20191224 16:33:54.738"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.610" endtime="20191224 16:33:54.738"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;4&quot; &quot;appeared&quot; in Trace screen" library="Trace definitions">
<doc>This keyword is used to check the information of Copper panel displaying in the same information rectangle area</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191224 16:33:54.740" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191224 16:33:54.739" endtime="20191224 16:33:54.740"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191224 16:33:54.740" level="INFO">${input panel} = Panel 1</msg>
<status status="PASS" starttime="20191224 16:33:54.740" endtime="20191224 16:33:54.741"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191224 16:33:54.741" level="INFO">${input port} = Port 4</msg>
<status status="PASS" starttime="20191224 16:33:54.741" endtime="20191224 16:33:54.741"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input rack}</arg>
</arguments>
<assign>
<var>${temp rack 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.742" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Rack 1')]</msg>
<status status="PASS" starttime="20191224 16:33:54.742" endtime="20191224 16:33:54.742"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.750" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.743" endtime="20191224 16:33:54.750"></status>
</kw>
<msg timestamp="20191224 16:33:54.751" level="INFO">${temp rack 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.742" endtime="20191224 16:33:54.751"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input panel}</arg>
</arguments>
<assign>
<var>${temp panel 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.752" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Panel 1')]</msg>
<status status="PASS" starttime="20191224 16:33:54.752" endtime="20191224 16:33:54.752"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.759" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.752" endtime="20191224 16:33:54.759"></status>
</kw>
<msg timestamp="20191224 16:33:54.760" level="INFO">${temp panel 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.751" endtime="20191224 16:33:54.760"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${temp port 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.761" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Port 4')]</msg>
<status status="PASS" starttime="20191224 16:33:54.761" endtime="20191224 16:33:54.761"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.772" level="INFO">${result} = 0</msg>
<status status="PASS" starttime="20191224 16:33:54.762" endtime="20191224 16:33:54.773"></status>
</kw>
<msg timestamp="20191224 16:33:54.773" level="INFO">${temp port 1} = 0</msg>
<status status="PASS" starttime="20191224 16:33:54.760" endtime="20191224 16:33:54.773"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input rack}</arg>
</arguments>
<assign>
<var>${temp rack 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.774" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Rack 1')]</msg>
<status status="PASS" starttime="20191224 16:33:54.774" endtime="20191224 16:33:54.775"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.782" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.775" endtime="20191224 16:33:54.782"></status>
</kw>
<msg timestamp="20191224 16:33:54.783" level="INFO">${temp rack 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.773" endtime="20191224 16:33:54.783"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input panel}</arg>
</arguments>
<assign>
<var>${temp panel 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.784" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Panel 1')]</msg>
<status status="PASS" starttime="20191224 16:33:54.784" endtime="20191224 16:33:54.784"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.791" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.785" endtime="20191224 16:33:54.792"></status>
</kw>
<msg timestamp="20191224 16:33:54.792" level="INFO">${temp panel 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.783" endtime="20191224 16:33:54.792"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${temp port 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.793" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Port 4')]</msg>
<status status="PASS" starttime="20191224 16:33:54.793" endtime="20191224 16:33:54.794"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.804" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.794" endtime="20191224 16:33:54.804"></status>
</kw>
<msg timestamp="20191224 16:33:54.804" level="INFO">${temp port 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.792" endtime="20191224 16:33:54.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${temp rack 1} == 1 and ${temp panel 1} == 1 and ${temp port 1} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${infor belong to left rectangle}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.806" endtime="20191224 16:33:54.806"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.806" endtime="20191224 16:33:54.807"></status>
</kw>
<msg timestamp="20191224 16:33:54.807" level="INFO">${infor belong to left rectangle} = 0</msg>
<status status="PASS" starttime="20191224 16:33:54.805" endtime="20191224 16:33:54.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${temp rack 2} == 1 and ${temp panel 2} == 1 and ${temp port 2} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${infor belong to right rectangle}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.808" endtime="20191224 16:33:54.808"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.808" endtime="20191224 16:33:54.809"></status>
</kw>
<msg timestamp="20191224 16:33:54.809" level="INFO">${infor belong to right rectangle} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.807" endtime="20191224 16:33:54.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${infor belong to left rectangle} == 1 or ${infor belong to right rectangle} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.810" endtime="20191224 16:33:54.810"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.810" endtime="20191224 16:33:54.810"></status>
</kw>
<msg timestamp="20191224 16:33:54.810" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.809" endtime="20191224 16:33:54.811"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191224 16:33:54.811" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191224 16:33:54.811" endtime="20191224 16:33:54.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.813" endtime="20191224 16:33:54.813"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.812" endtime="20191224 16:33:54.813"></status>
</kw>
<msg timestamp="20191224 16:33:54.813" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.812" endtime="20191224 16:33:54.813"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.814" endtime="20191224 16:33:54.814"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.813" endtime="20191224 16:33:54.814"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.739" endtime="20191224 16:33:54.815"></status>
</kw>
<kw name="Then Check if the &quot;full&quot; of &quot;Copper&quot; Patching Bar &quot;appeared&quot; in Trace screen" library="Trace definitions">
<doc>This keyword is used to check the portion of patching bar of Copper/ LC panel appeared/ disappeared in Trace screen</doc>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${portion}</arg>
</arguments>
<assign>
<var>${temp portion}</var>
</assign>
<msg timestamp="20191224 16:33:54.816" level="INFO">${temp portion} = full</msg>
<status status="PASS" starttime="20191224 16:33:54.816" endtime="20191224 16:33:54.816"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${panel type}</arg>
</arguments>
<assign>
<var>${temp panel type}</var>
</assign>
<msg timestamp="20191224 16:33:54.817" level="INFO">${temp panel type} = copper</msg>
<status status="PASS" starttime="20191224 16:33:54.816" endtime="20191224 16:33:54.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp portion}' == 'full' and '${temp panel type}' == 'copper'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>${barFullCopper}</arg>
<arg>ELSE IF</arg>
<arg>'${temp portion}' == 'haft' and '${temp panel type}' == 'copper'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>${barHaftCopper}</arg>
</arguments>
<assign>
<var>${replace panel type}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>${barFullCopper}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${barFullCopper}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.818" endtime="20191224 16:33:54.819"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.818" endtime="20191224 16:33:54.819"></status>
</kw>
<msg timestamp="20191224 16:33:54.819" level="INFO">${replace panel type} = patch-cord-copper</msg>
<status status="PASS" starttime="20191224 16:33:54.817" endtime="20191224 16:33:54.819"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic patching bar}</arg>
<arg>Panel Type</arg>
<arg>${replace panel type}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:54.820" level="INFO">${xPath syntax} = //div[@id='connectivity-icon' and @class='patch-cord-copper']</msg>
<status status="PASS" starttime="20191224 16:33:54.819" endtime="20191224 16:33:54.820"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:54.830" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.820" endtime="20191224 16:33:54.830"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191224 16:33:54.831" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191224 16:33:54.831" endtime="20191224 16:33:54.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.833" endtime="20191224 16:33:54.833"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.832" endtime="20191224 16:33:54.833"></status>
</kw>
<msg timestamp="20191224 16:33:54.833" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.831" endtime="20191224 16:33:54.833"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>The patching bar is not ${status}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>The patching bar is not ${status}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:54.834" endtime="20191224 16:33:54.835"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.834" endtime="20191224 16:33:54.835"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.815" endtime="20191224 16:33:54.835"></status>
</kw>
<kw name="And Press Copper port at Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot; with keymode &quot;short&quot;" library="Virtual Panel definitions">
<doc>This keyword is used to press on a specific Copper port regarding to type of keymode</doc>
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:33:54.837" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:33:54.837" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:33:54.836" endtime="20191224 16:33:54.837"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:33:54.839" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:33:54.839" endtime="20191224 16:33:54.840"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.838" endtime="20191224 16:33:54.840"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.837" endtime="20191224 16:33:54.840"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.837" endtime="20191224 16:33:54.840"></status>
</kw>
<msg timestamp="20191224 16:33:54.840" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:33:54.836" endtime="20191224 16:33:54.840"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:33:54.841" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:33:54.841" endtime="20191224 16:33:54.841"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --press --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
<arg>--keymode</arg>
<arg>${keyMode}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:33:54.842" level="INFO">${completed command} = vp_cmd_helper --press --rack 1 --panel 1 --port 2 --keymode short</msg>
<status status="PASS" starttime="20191224 16:33:54.841" endtime="20191224 16:33:54.842"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:33:54.842" level="INFO">vp_cmd_helper --press --rack 1 --panel 1 --port 2 --keymode short</msg>
<status status="PASS" starttime="20191224 16:33:54.842" endtime="20191224 16:33:54.843"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:33:54.883" level="INFO">vp_cmd_helper --press --rack 1 --panel 1 --port 2 --keymode short</msg>
<status status="PASS" starttime="20191224 16:33:54.843" endtime="20191224 16:33:54.883"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:33:56.886" level="INFO">${stdout} = result=success
command=press
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:33:54.884" endtime="20191224 16:33:56.887"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:33:56.890" level="INFO">result=success
command=press
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:33:56.888" endtime="20191224 16:33:56.891"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.843" endtime="20191224 16:33:56.892"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:54.835" endtime="20191224 16:33:56.893"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;2&quot; &quot;appeared&quot; in Trace screen" library="Trace definitions">
<doc>This keyword is used to check the information of Copper panel displaying in the same information rectangle area</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191224 16:33:56.898" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191224 16:33:56.897" endtime="20191224 16:33:56.898"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191224 16:33:56.901" level="INFO">${input panel} = Panel 1</msg>
<status status="PASS" starttime="20191224 16:33:56.900" endtime="20191224 16:33:56.901"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191224 16:33:56.904" level="INFO">${input port} = Port 2</msg>
<status status="PASS" starttime="20191224 16:33:56.902" endtime="20191224 16:33:56.904"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input rack}</arg>
</arguments>
<assign>
<var>${temp rack 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:56.909" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Rack 1')]</msg>
<status status="PASS" starttime="20191224 16:33:56.907" endtime="20191224 16:33:56.909"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:56.932" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:56.910" endtime="20191224 16:33:56.932"></status>
</kw>
<msg timestamp="20191224 16:33:56.932" level="INFO">${temp rack 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:56.905" endtime="20191224 16:33:56.932"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input panel}</arg>
</arguments>
<assign>
<var>${temp panel 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:56.935" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Panel 1')]</msg>
<status status="PASS" starttime="20191224 16:33:56.934" endtime="20191224 16:33:56.935"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:56.946" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:56.935" endtime="20191224 16:33:56.946"></status>
</kw>
<msg timestamp="20191224 16:33:56.947" level="INFO">${temp panel 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:56.933" endtime="20191224 16:33:56.947"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${temp port 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:56.949" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Port 2')]</msg>
<status status="PASS" starttime="20191224 16:33:56.948" endtime="20191224 16:33:56.949"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:56.963" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:56.950" endtime="20191224 16:33:56.963"></status>
</kw>
<msg timestamp="20191224 16:33:56.964" level="INFO">${temp port 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:56.948" endtime="20191224 16:33:56.964"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input rack}</arg>
</arguments>
<assign>
<var>${temp rack 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:56.965" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Rack 1')]</msg>
<status status="PASS" starttime="20191224 16:33:56.965" endtime="20191224 16:33:56.965"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:56.972" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:56.965" endtime="20191224 16:33:56.972"></status>
</kw>
<msg timestamp="20191224 16:33:56.973" level="INFO">${temp rack 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:56.964" endtime="20191224 16:33:56.973"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input panel}</arg>
</arguments>
<assign>
<var>${temp panel 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:56.974" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Panel 1')]</msg>
<status status="PASS" starttime="20191224 16:33:56.973" endtime="20191224 16:33:56.974"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:56.981" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:56.974" endtime="20191224 16:33:56.981"></status>
</kw>
<msg timestamp="20191224 16:33:56.981" level="INFO">${temp panel 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:56.973" endtime="20191224 16:33:56.981"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${temp port 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:56.982" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Port 2')]</msg>
<status status="PASS" starttime="20191224 16:33:56.982" endtime="20191224 16:33:56.982"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:56.992" level="INFO">${result} = 0</msg>
<status status="PASS" starttime="20191224 16:33:56.983" endtime="20191224 16:33:56.993"></status>
</kw>
<msg timestamp="20191224 16:33:56.993" level="INFO">${temp port 2} = 0</msg>
<status status="PASS" starttime="20191224 16:33:56.981" endtime="20191224 16:33:56.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${temp rack 1} == 1 and ${temp panel 1} == 1 and ${temp port 1} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${infor belong to left rectangle}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:56.995" endtime="20191224 16:33:56.995"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:56.994" endtime="20191224 16:33:56.995"></status>
</kw>
<msg timestamp="20191224 16:33:56.995" level="INFO">${infor belong to left rectangle} = 1</msg>
<status status="PASS" starttime="20191224 16:33:56.993" endtime="20191224 16:33:56.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${temp rack 2} == 1 and ${temp panel 2} == 1 and ${temp port 2} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${infor belong to right rectangle}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:56.997" endtime="20191224 16:33:56.997"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:56.996" endtime="20191224 16:33:56.997"></status>
</kw>
<msg timestamp="20191224 16:33:56.997" level="INFO">${infor belong to right rectangle} = 0</msg>
<status status="PASS" starttime="20191224 16:33:56.996" endtime="20191224 16:33:56.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${infor belong to left rectangle} == 1 or ${infor belong to right rectangle} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:56.999" endtime="20191224 16:33:56.999"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:56.998" endtime="20191224 16:33:56.999"></status>
</kw>
<msg timestamp="20191224 16:33:56.999" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:56.998" endtime="20191224 16:33:56.999"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191224 16:33:57.000" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191224 16:33:57.000" endtime="20191224 16:33:57.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:57.001" endtime="20191224 16:33:57.002"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.001" endtime="20191224 16:33:57.002"></status>
</kw>
<msg timestamp="20191224 16:33:57.002" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.000" endtime="20191224 16:33:57.002"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:57.003" endtime="20191224 16:33:57.003"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.002" endtime="20191224 16:33:57.003"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:56.895" endtime="20191224 16:33:57.003"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;5&quot; &quot;appeared&quot; in Trace screen" library="Trace definitions">
<doc>This keyword is used to check the information of Copper panel displaying in the same information rectangle area</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191224 16:33:57.005" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191224 16:33:57.004" endtime="20191224 16:33:57.005"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191224 16:33:57.005" level="INFO">${input panel} = Panel 1</msg>
<status status="PASS" starttime="20191224 16:33:57.005" endtime="20191224 16:33:57.006"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191224 16:33:57.006" level="INFO">${input port} = Port 5</msg>
<status status="PASS" starttime="20191224 16:33:57.006" endtime="20191224 16:33:57.007"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input rack}</arg>
</arguments>
<assign>
<var>${temp rack 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:57.008" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Rack 1')]</msg>
<status status="PASS" starttime="20191224 16:33:57.007" endtime="20191224 16:33:57.008"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:57.015" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.008" endtime="20191224 16:33:57.015"></status>
</kw>
<msg timestamp="20191224 16:33:57.015" level="INFO">${temp rack 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.007" endtime="20191224 16:33:57.015"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input panel}</arg>
</arguments>
<assign>
<var>${temp panel 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:57.017" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Panel 1')]</msg>
<status status="PASS" starttime="20191224 16:33:57.016" endtime="20191224 16:33:57.017"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:57.024" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.017" endtime="20191224 16:33:57.024"></status>
</kw>
<msg timestamp="20191224 16:33:57.024" level="INFO">${temp panel 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.016" endtime="20191224 16:33:57.024"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${temp port 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:57.026" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Port 5')]</msg>
<status status="PASS" starttime="20191224 16:33:57.025" endtime="20191224 16:33:57.026"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:57.036" level="INFO">${result} = 0</msg>
<status status="PASS" starttime="20191224 16:33:57.026" endtime="20191224 16:33:57.036"></status>
</kw>
<msg timestamp="20191224 16:33:57.037" level="INFO">${temp port 1} = 0</msg>
<status status="PASS" starttime="20191224 16:33:57.025" endtime="20191224 16:33:57.037"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input rack}</arg>
</arguments>
<assign>
<var>${temp rack 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:57.038" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Rack 1')]</msg>
<status status="PASS" starttime="20191224 16:33:57.038" endtime="20191224 16:33:57.039"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:57.046" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.039" endtime="20191224 16:33:57.046"></status>
</kw>
<msg timestamp="20191224 16:33:57.046" level="INFO">${temp rack 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.037" endtime="20191224 16:33:57.047"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input panel}</arg>
</arguments>
<assign>
<var>${temp panel 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:57.048" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Panel 1')]</msg>
<status status="PASS" starttime="20191224 16:33:57.047" endtime="20191224 16:33:57.048"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:57.055" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.048" endtime="20191224 16:33:57.055"></status>
</kw>
<msg timestamp="20191224 16:33:57.056" level="INFO">${temp panel 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.047" endtime="20191224 16:33:57.056"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${temp port 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:57.057" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Port 5')]</msg>
<status status="PASS" starttime="20191224 16:33:57.057" endtime="20191224 16:33:57.057"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:57.068" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.058" endtime="20191224 16:33:57.068"></status>
</kw>
<msg timestamp="20191224 16:33:57.069" level="INFO">${temp port 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.056" endtime="20191224 16:33:57.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${temp rack 1} == 1 and ${temp panel 1} == 1 and ${temp port 1} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${infor belong to left rectangle}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:57.071" endtime="20191224 16:33:57.071"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.070" endtime="20191224 16:33:57.071"></status>
</kw>
<msg timestamp="20191224 16:33:57.071" level="INFO">${infor belong to left rectangle} = 0</msg>
<status status="PASS" starttime="20191224 16:33:57.069" endtime="20191224 16:33:57.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${temp rack 2} == 1 and ${temp panel 2} == 1 and ${temp port 2} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${infor belong to right rectangle}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:57.073" endtime="20191224 16:33:57.073"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.072" endtime="20191224 16:33:57.073"></status>
</kw>
<msg timestamp="20191224 16:33:57.073" level="INFO">${infor belong to right rectangle} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.072" endtime="20191224 16:33:57.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${infor belong to left rectangle} == 1 or ${infor belong to right rectangle} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:57.075" endtime="20191224 16:33:57.075"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.074" endtime="20191224 16:33:57.075"></status>
</kw>
<msg timestamp="20191224 16:33:57.076" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.074" endtime="20191224 16:33:57.076"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191224 16:33:57.076" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191224 16:33:57.076" endtime="20191224 16:33:57.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:57.078" endtime="20191224 16:33:57.078"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.077" endtime="20191224 16:33:57.078"></status>
</kw>
<msg timestamp="20191224 16:33:57.078" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.077" endtime="20191224 16:33:57.079"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:57.079" endtime="20191224 16:33:57.080"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.079" endtime="20191224 16:33:57.080"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.004" endtime="20191224 16:33:57.080"></status>
</kw>
<kw name="Then Check if the &quot;full&quot; of &quot;Copper&quot; Patching Bar &quot;appeared&quot; in Trace screen" library="Trace definitions">
<doc>This keyword is used to check the portion of patching bar of Copper/ LC panel appeared/ disappeared in Trace screen</doc>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${portion}</arg>
</arguments>
<assign>
<var>${temp portion}</var>
</assign>
<msg timestamp="20191224 16:33:57.081" level="INFO">${temp portion} = full</msg>
<status status="PASS" starttime="20191224 16:33:57.081" endtime="20191224 16:33:57.081"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${panel type}</arg>
</arguments>
<assign>
<var>${temp panel type}</var>
</assign>
<msg timestamp="20191224 16:33:57.082" level="INFO">${temp panel type} = copper</msg>
<status status="PASS" starttime="20191224 16:33:57.082" endtime="20191224 16:33:57.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp portion}' == 'full' and '${temp panel type}' == 'copper'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>${barFullCopper}</arg>
<arg>ELSE IF</arg>
<arg>'${temp portion}' == 'haft' and '${temp panel type}' == 'copper'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>${barHaftCopper}</arg>
</arguments>
<assign>
<var>${replace panel type}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>${barFullCopper}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${barFullCopper}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:57.083" endtime="20191224 16:33:57.084"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.083" endtime="20191224 16:33:57.084"></status>
</kw>
<msg timestamp="20191224 16:33:57.084" level="INFO">${replace panel type} = patch-cord-copper</msg>
<status status="PASS" starttime="20191224 16:33:57.082" endtime="20191224 16:33:57.084"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic patching bar}</arg>
<arg>Panel Type</arg>
<arg>${replace panel type}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:57.085" level="INFO">${xPath syntax} = //div[@id='connectivity-icon' and @class='patch-cord-copper']</msg>
<status status="PASS" starttime="20191224 16:33:57.085" endtime="20191224 16:33:57.085"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:57.093" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.085" endtime="20191224 16:33:57.093"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191224 16:33:57.094" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191224 16:33:57.093" endtime="20191224 16:33:57.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:57.096" endtime="20191224 16:33:57.096"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.095" endtime="20191224 16:33:57.096"></status>
</kw>
<msg timestamp="20191224 16:33:57.096" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.094" endtime="20191224 16:33:57.096"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>The patching bar is not ${status}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>The patching bar is not ${status}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:57.097" endtime="20191224 16:33:57.098"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.097" endtime="20191224 16:33:57.098"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.080" endtime="20191224 16:33:57.098"></status>
</kw>
<kw name="And Press Copper port at Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot; with keymode &quot;short&quot;" library="Virtual Panel definitions">
<doc>This keyword is used to press on a specific Copper port regarding to type of keymode</doc>
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:33:57.100" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:33:57.100" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:33:57.100" endtime="20191224 16:33:57.100"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:33:57.103" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:33:57.103" endtime="20191224 16:33:57.103"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.101" endtime="20191224 16:33:57.103"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.101" endtime="20191224 16:33:57.104"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.100" endtime="20191224 16:33:57.104"></status>
</kw>
<msg timestamp="20191224 16:33:57.104" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:33:57.099" endtime="20191224 16:33:57.104"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:33:57.105" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:33:57.105" endtime="20191224 16:33:57.105"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --press --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
<arg>--keymode</arg>
<arg>${keyMode}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:33:57.106" level="INFO">${completed command} = vp_cmd_helper --press --rack 1 --panel 1 --port 3 --keymode short</msg>
<status status="PASS" starttime="20191224 16:33:57.105" endtime="20191224 16:33:57.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:33:57.106" level="INFO">vp_cmd_helper --press --rack 1 --panel 1 --port 3 --keymode short</msg>
<status status="PASS" starttime="20191224 16:33:57.106" endtime="20191224 16:33:57.107"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:33:57.141" level="INFO">vp_cmd_helper --press --rack 1 --panel 1 --port 3 --keymode short</msg>
<status status="PASS" starttime="20191224 16:33:57.107" endtime="20191224 16:33:57.142"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:33:59.143" level="INFO">${stdout} = result=success
command=press
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:33:57.142" endtime="20191224 16:33:59.144"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:33:59.147" level="INFO">result=success
command=press
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:33:59.145" endtime="20191224 16:33:59.148"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.107" endtime="20191224 16:33:59.149"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:57.099" endtime="20191224 16:33:59.150"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;3&quot; &quot;appeared&quot; in Trace screen" library="Trace definitions">
<doc>This keyword is used to check the information of Copper panel displaying in the same information rectangle area</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191224 16:33:59.155" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191224 16:33:59.154" endtime="20191224 16:33:59.156"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191224 16:33:59.158" level="INFO">${input panel} = Panel 1</msg>
<status status="PASS" starttime="20191224 16:33:59.157" endtime="20191224 16:33:59.159"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191224 16:33:59.161" level="INFO">${input port} = Port 3</msg>
<status status="PASS" starttime="20191224 16:33:59.160" endtime="20191224 16:33:59.162"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input rack}</arg>
</arguments>
<assign>
<var>${temp rack 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.166" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Rack 1')]</msg>
<status status="PASS" starttime="20191224 16:33:59.165" endtime="20191224 16:33:59.167"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.187" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.168" endtime="20191224 16:33:59.187"></status>
</kw>
<msg timestamp="20191224 16:33:59.188" level="INFO">${temp rack 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.163" endtime="20191224 16:33:59.188"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input panel}</arg>
</arguments>
<assign>
<var>${temp panel 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.190" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Panel 1')]</msg>
<status status="PASS" starttime="20191224 16:33:59.189" endtime="20191224 16:33:59.190"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.203" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.191" endtime="20191224 16:33:59.204"></status>
</kw>
<msg timestamp="20191224 16:33:59.204" level="INFO">${temp panel 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.189" endtime="20191224 16:33:59.204"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${temp port 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.206" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Port 3')]</msg>
<status status="PASS" starttime="20191224 16:33:59.205" endtime="20191224 16:33:59.206"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.217" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.206" endtime="20191224 16:33:59.217"></status>
</kw>
<msg timestamp="20191224 16:33:59.217" level="INFO">${temp port 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.205" endtime="20191224 16:33:59.217"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input rack}</arg>
</arguments>
<assign>
<var>${temp rack 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.218" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Rack 1')]</msg>
<status status="PASS" starttime="20191224 16:33:59.218" endtime="20191224 16:33:59.219"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.226" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.219" endtime="20191224 16:33:59.226"></status>
</kw>
<msg timestamp="20191224 16:33:59.226" level="INFO">${temp rack 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.217" endtime="20191224 16:33:59.227"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input panel}</arg>
</arguments>
<assign>
<var>${temp panel 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.228" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Panel 1')]</msg>
<status status="PASS" starttime="20191224 16:33:59.227" endtime="20191224 16:33:59.228"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.235" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.228" endtime="20191224 16:33:59.235"></status>
</kw>
<msg timestamp="20191224 16:33:59.236" level="INFO">${temp panel 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.227" endtime="20191224 16:33:59.236"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${temp port 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.237" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Port 3')]</msg>
<status status="PASS" starttime="20191224 16:33:59.237" endtime="20191224 16:33:59.237"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.248" level="INFO">${result} = 0</msg>
<status status="PASS" starttime="20191224 16:33:59.237" endtime="20191224 16:33:59.248"></status>
</kw>
<msg timestamp="20191224 16:33:59.248" level="INFO">${temp port 2} = 0</msg>
<status status="PASS" starttime="20191224 16:33:59.236" endtime="20191224 16:33:59.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${temp rack 1} == 1 and ${temp panel 1} == 1 and ${temp port 1} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${infor belong to left rectangle}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.250" endtime="20191224 16:33:59.250"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.250" endtime="20191224 16:33:59.250"></status>
</kw>
<msg timestamp="20191224 16:33:59.251" level="INFO">${infor belong to left rectangle} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.249" endtime="20191224 16:33:59.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${temp rack 2} == 1 and ${temp panel 2} == 1 and ${temp port 2} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${infor belong to right rectangle}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.252" endtime="20191224 16:33:59.252"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.252" endtime="20191224 16:33:59.252"></status>
</kw>
<msg timestamp="20191224 16:33:59.252" level="INFO">${infor belong to right rectangle} = 0</msg>
<status status="PASS" starttime="20191224 16:33:59.251" endtime="20191224 16:33:59.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${infor belong to left rectangle} == 1 or ${infor belong to right rectangle} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.254" endtime="20191224 16:33:59.254"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.253" endtime="20191224 16:33:59.254"></status>
</kw>
<msg timestamp="20191224 16:33:59.254" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.253" endtime="20191224 16:33:59.254"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191224 16:33:59.255" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191224 16:33:59.255" endtime="20191224 16:33:59.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.256" endtime="20191224 16:33:59.257"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.256" endtime="20191224 16:33:59.257"></status>
</kw>
<msg timestamp="20191224 16:33:59.257" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.256" endtime="20191224 16:33:59.257"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.258" endtime="20191224 16:33:59.258"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.257" endtime="20191224 16:33:59.258"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.152" endtime="20191224 16:33:59.259"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;6&quot; &quot;appeared&quot; in Trace screen" library="Trace definitions">
<doc>This keyword is used to check the information of Copper panel displaying in the same information rectangle area</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191224 16:33:59.260" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191224 16:33:59.259" endtime="20191224 16:33:59.260"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191224 16:33:59.260" level="INFO">${input panel} = Panel 1</msg>
<status status="PASS" starttime="20191224 16:33:59.260" endtime="20191224 16:33:59.260"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191224 16:33:59.261" level="INFO">${input port} = Port 6</msg>
<status status="PASS" starttime="20191224 16:33:59.261" endtime="20191224 16:33:59.261"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input rack}</arg>
</arguments>
<assign>
<var>${temp rack 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.262" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Rack 1')]</msg>
<status status="PASS" starttime="20191224 16:33:59.262" endtime="20191224 16:33:59.262"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.270" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.262" endtime="20191224 16:33:59.270"></status>
</kw>
<msg timestamp="20191224 16:33:59.270" level="INFO">${temp rack 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.261" endtime="20191224 16:33:59.271"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input panel}</arg>
</arguments>
<assign>
<var>${temp panel 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.272" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Panel 1')]</msg>
<status status="PASS" starttime="20191224 16:33:59.271" endtime="20191224 16:33:59.272"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.279" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.272" endtime="20191224 16:33:59.279"></status>
</kw>
<msg timestamp="20191224 16:33:59.279" level="INFO">${temp panel 1} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.271" endtime="20191224 16:33:59.280"></status>
</kw>
<kw name="Is Information Belong to Left Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${temp port 1}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on left rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.281" level="INFO">${xPath syntax} = //div[@id='row-left-center' and contains(@style,'visible')]/div[contains(text(),'Port 6')]</msg>
<status status="PASS" starttime="20191224 16:33:59.280" endtime="20191224 16:33:59.281"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.291" level="INFO">${result} = 0</msg>
<status status="PASS" starttime="20191224 16:33:59.281" endtime="20191224 16:33:59.291"></status>
</kw>
<msg timestamp="20191224 16:33:59.292" level="INFO">${temp port 1} = 0</msg>
<status status="PASS" starttime="20191224 16:33:59.280" endtime="20191224 16:33:59.292"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input rack}</arg>
</arguments>
<assign>
<var>${temp rack 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.293" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Rack 1')]</msg>
<status status="PASS" starttime="20191224 16:33:59.293" endtime="20191224 16:33:59.294"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.301" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.294" endtime="20191224 16:33:59.301"></status>
</kw>
<msg timestamp="20191224 16:33:59.301" level="INFO">${temp rack 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.292" endtime="20191224 16:33:59.301"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input panel}</arg>
</arguments>
<assign>
<var>${temp panel 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.302" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Panel 1')]</msg>
<status status="PASS" starttime="20191224 16:33:59.302" endtime="20191224 16:33:59.302"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.310" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.303" endtime="20191224 16:33:59.310"></status>
</kw>
<msg timestamp="20191224 16:33:59.311" level="INFO">${temp panel 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.301" endtime="20191224 16:33:59.311"></status>
</kw>
<kw name="Is Information Belong to Right Rectangle Area" library="Trace definitions">
<arguments>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${temp port 2}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic trace port position on right rectangle}</arg>
<arg>Port Information</arg>
<arg>${infor}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.312" level="INFO">${xPath syntax} = //div[@id='row-right-center' and contains(@style,'visible')]/div[contains(text(),'Port 6')]</msg>
<status status="PASS" starttime="20191224 16:33:59.311" endtime="20191224 16:33:59.312"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.323" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.312" endtime="20191224 16:33:59.323"></status>
</kw>
<msg timestamp="20191224 16:33:59.323" level="INFO">${temp port 2} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.311" endtime="20191224 16:33:59.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${temp rack 1} == 1 and ${temp panel 1} == 1 and ${temp port 1} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${infor belong to left rectangle}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.325" endtime="20191224 16:33:59.325"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.324" endtime="20191224 16:33:59.325"></status>
</kw>
<msg timestamp="20191224 16:33:59.325" level="INFO">${infor belong to left rectangle} = 0</msg>
<status status="PASS" starttime="20191224 16:33:59.324" endtime="20191224 16:33:59.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${temp rack 2} == 1 and ${temp panel 2} == 1 and ${temp port 2} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${infor belong to right rectangle}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.327" endtime="20191224 16:33:59.327"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.326" endtime="20191224 16:33:59.327"></status>
</kw>
<msg timestamp="20191224 16:33:59.327" level="INFO">${infor belong to right rectangle} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.326" endtime="20191224 16:33:59.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${infor belong to left rectangle} == 1 or ${infor belong to right rectangle} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.329" endtime="20191224 16:33:59.329"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.328" endtime="20191224 16:33:59.329"></status>
</kw>
<msg timestamp="20191224 16:33:59.330" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.328" endtime="20191224 16:33:59.330"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191224 16:33:59.330" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191224 16:33:59.330" endtime="20191224 16:33:59.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.332" endtime="20191224 16:33:59.332"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.331" endtime="20191224 16:33:59.332"></status>
</kw>
<msg timestamp="20191224 16:33:59.332" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.331" endtime="20191224 16:33:59.332"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>Port information is not ${status}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.333" endtime="20191224 16:33:59.333"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.333" endtime="20191224 16:33:59.334"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.259" endtime="20191224 16:33:59.334"></status>
</kw>
<kw name="Then Check if the &quot;full&quot; of &quot;Copper&quot; Patching Bar &quot;appeared&quot; in Trace screen" library="Trace definitions">
<doc>This keyword is used to check the portion of patching bar of Copper/ LC panel appeared/ disappeared in Trace screen</doc>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${portion}</arg>
</arguments>
<assign>
<var>${temp portion}</var>
</assign>
<msg timestamp="20191224 16:33:59.335" level="INFO">${temp portion} = full</msg>
<status status="PASS" starttime="20191224 16:33:59.335" endtime="20191224 16:33:59.335"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${panel type}</arg>
</arguments>
<assign>
<var>${temp panel type}</var>
</assign>
<msg timestamp="20191224 16:33:59.336" level="INFO">${temp panel type} = copper</msg>
<status status="PASS" starttime="20191224 16:33:59.335" endtime="20191224 16:33:59.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp portion}' == 'full' and '${temp panel type}' == 'copper'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>${barFullCopper}</arg>
<arg>ELSE IF</arg>
<arg>'${temp portion}' == 'haft' and '${temp panel type}' == 'copper'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>${barHaftCopper}</arg>
</arguments>
<assign>
<var>${replace panel type}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>${barFullCopper}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${barFullCopper}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.337" endtime="20191224 16:33:59.337"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.337" endtime="20191224 16:33:59.338"></status>
</kw>
<msg timestamp="20191224 16:33:59.338" level="INFO">${replace panel type} = patch-cord-copper</msg>
<status status="PASS" starttime="20191224 16:33:59.336" endtime="20191224 16:33:59.338"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic patching bar}</arg>
<arg>Panel Type</arg>
<arg>${replace panel type}</arg>
</arguments>
<assign>
<var>${xPath syntax}</var>
</assign>
<msg timestamp="20191224 16:33:59.339" level="INFO">${xPath syntax} = //div[@id='connectivity-icon' and @class='patch-cord-copper']</msg>
<status status="PASS" starttime="20191224 16:33:59.338" endtime="20191224 16:33:59.339"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20191224 16:33:59.346" level="INFO">${result} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.339" endtime="20191224 16:33:59.347"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191224 16:33:59.347" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20191224 16:33:59.347" endtime="20191224 16:33:59.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Set Variable</arg>
<arg>1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.349" endtime="20191224 16:33:59.349"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.348" endtime="20191224 16:33:59.349"></status>
</kw>
<msg timestamp="20191224 16:33:59.349" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.348" endtime="20191224 16:33:59.349"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>The patching bar is not ${status}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${result}'</arg>
<arg>'${expected value}'</arg>
<arg>The patching bar is not ${status}</arg>
</arguments>
<status status="PASS" starttime="20191224 16:33:59.350" endtime="20191224 16:33:59.351"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.350" endtime="20191224 16:33:59.351"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.334" endtime="20191224 16:33:59.351"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:33:59.352" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:33:59.353" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:33:59.352" endtime="20191224 16:33:59.353"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:33:59.355" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:33:59.355" endtime="20191224 16:33:59.355"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.353" endtime="20191224 16:33:59.355"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.353" endtime="20191224 16:33:59.355"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.353" endtime="20191224 16:33:59.356"></status>
</kw>
<msg timestamp="20191224 16:33:59.356" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:33:59.352" endtime="20191224 16:33:59.356"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:33:59.357" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:33:59.357" endtime="20191224 16:33:59.357"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:33:59.358" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191224 16:33:59.357" endtime="20191224 16:33:59.358"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:33:59.358" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191224 16:33:59.358" endtime="20191224 16:33:59.358"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:33:59.385" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191224 16:33:59.359" endtime="20191224 16:33:59.385"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:34:01.387" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:33:59.386" endtime="20191224 16:34:01.388"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:34:01.390" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:34:01.389" endtime="20191224 16:34:01.391"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.359" endtime="20191224 16:34:01.392"></status>
</kw>
<status status="PASS" starttime="20191224 16:33:59.351" endtime="20191224 16:34:01.393"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:34:01.398" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:34:01.399" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:34:01.397" endtime="20191224 16:34:01.399"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:34:01.407" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:34:01.406" endtime="20191224 16:34:01.408"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:01.401" endtime="20191224 16:34:01.408"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:01.400" endtime="20191224 16:34:01.409"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:01.399" endtime="20191224 16:34:01.409"></status>
</kw>
<msg timestamp="20191224 16:34:01.411" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:34:01.395" endtime="20191224 16:34:01.411"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:34:01.413" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:34:01.412" endtime="20191224 16:34:01.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:34:01.416" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191224 16:34:01.415" endtime="20191224 16:34:01.416"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:34:01.419" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191224 16:34:01.417" endtime="20191224 16:34:01.419"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:34:01.451" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191224 16:34:01.422" endtime="20191224 16:34:01.451"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:34:03.453" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:34:01.452" endtime="20191224 16:34:03.454"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:34:03.458" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:34:03.456" endtime="20191224 16:34:03.459"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:01.420" endtime="20191224 16:34:03.460"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:01.394" endtime="20191224 16:34:03.461"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:34:03.467" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:34:03.468" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:34:03.466" endtime="20191224 16:34:03.468"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:34:03.479" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:34:03.478" endtime="20191224 16:34:03.480"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:03.471" endtime="20191224 16:34:03.480"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:03.470" endtime="20191224 16:34:03.481"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:03.469" endtime="20191224 16:34:03.481"></status>
</kw>
<msg timestamp="20191224 16:34:03.484" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:34:03.464" endtime="20191224 16:34:03.484"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:34:03.486" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:34:03.485" endtime="20191224 16:34:03.487"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:34:03.490" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191224 16:34:03.488" endtime="20191224 16:34:03.490"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:34:03.493" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191224 16:34:03.492" endtime="20191224 16:34:03.493"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:34:03.518" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191224 16:34:03.495" endtime="20191224 16:34:03.518"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:34:05.519" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:34:03.519" endtime="20191224 16:34:05.520"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:34:05.523" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:34:05.521" endtime="20191224 16:34:05.524"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:03.494" endtime="20191224 16:34:05.525"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:03.462" endtime="20191224 16:34:05.526"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;5&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:34:05.533" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:34:05.534" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:34:05.532" endtime="20191224 16:34:05.534"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:34:05.545" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:34:05.544" endtime="20191224 16:34:05.546"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:05.538" endtime="20191224 16:34:05.547"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:05.536" endtime="20191224 16:34:05.547"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:05.535" endtime="20191224 16:34:05.548"></status>
</kw>
<msg timestamp="20191224 16:34:05.550" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:34:05.529" endtime="20191224 16:34:05.551"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:34:05.553" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:34:05.552" endtime="20191224 16:34:05.554"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:34:05.557" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191224 16:34:05.555" endtime="20191224 16:34:05.557"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:34:05.559" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191224 16:34:05.558" endtime="20191224 16:34:05.560"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:34:05.573" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191224 16:34:05.563" endtime="20191224 16:34:05.573"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:34:07.575" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:34:05.574" endtime="20191224 16:34:07.576"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:34:07.580" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:34:07.578" endtime="20191224 16:34:07.580"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:05.561" endtime="20191224 16:34:07.581"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:05.528" endtime="20191224 16:34:07.582"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:34:07.589" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:34:07.590" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:34:07.588" endtime="20191224 16:34:07.590"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:34:07.601" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:34:07.600" endtime="20191224 16:34:07.601"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:07.593" endtime="20191224 16:34:07.602"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:07.592" endtime="20191224 16:34:07.602"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:07.591" endtime="20191224 16:34:07.603"></status>
</kw>
<msg timestamp="20191224 16:34:07.605" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:34:07.586" endtime="20191224 16:34:07.605"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:34:07.606" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:34:07.606" endtime="20191224 16:34:07.606"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:34:07.608" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191224 16:34:07.607" endtime="20191224 16:34:07.608"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:34:07.609" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191224 16:34:07.608" endtime="20191224 16:34:07.609"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:34:07.639" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191224 16:34:07.611" endtime="20191224 16:34:07.639"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:34:09.642" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:34:07.640" endtime="20191224 16:34:09.643"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:34:09.646" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:34:09.644" endtime="20191224 16:34:09.646"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:07.610" endtime="20191224 16:34:09.647"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:07.584" endtime="20191224 16:34:09.647"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;6&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191224 16:34:09.651" level="INFO">Length is 12</msg>
<msg timestamp="20191224 16:34:09.651" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191224 16:34:09.650" endtime="20191224 16:34:09.652"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191224 16:34:09.658" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191224 16:34:09.657" endtime="20191224 16:34:09.658"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:09.653" endtime="20191224 16:34:09.658"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:09.653" endtime="20191224 16:34:09.659"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:09.652" endtime="20191224 16:34:09.659"></status>
</kw>
<msg timestamp="20191224 16:34:09.660" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191224 16:34:09.649" endtime="20191224 16:34:09.660"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191224 16:34:09.662" level="INFO">1</msg>
<status status="PASS" starttime="20191224 16:34:09.661" endtime="20191224 16:34:09.662"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191224 16:34:09.664" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191224 16:34:09.663" endtime="20191224 16:34:09.664"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191224 16:34:09.665" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191224 16:34:09.664" endtime="20191224 16:34:09.665"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191224 16:34:09.678" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191224 16:34:09.667" endtime="20191224 16:34:09.679"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191224 16:34:11.680" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:34:09.679" endtime="20191224 16:34:11.681"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191224 16:34:11.684" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191224 16:34:11.682" endtime="20191224 16:34:11.685"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:09.666" endtime="20191224 16:34:11.686"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:09.648" endtime="20191224 16:34:11.687"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191224 16:34:11.740" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191224 16:34:11.690" endtime="20191224 16:34:11.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191224 16:34:11.752" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191224 16:34:11.744" endtime="20191224 16:34:11.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191224 16:34:11.754" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191224 16:34:11.754" endtime="20191224 16:34:11.795"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191224 16:34:12.797" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191224 16:34:11.796" endtime="20191224 16:34:12.798"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:11.796" endtime="20191224 16:34:12.799"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:11.753" endtime="20191224 16:34:12.800"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:11.753" endtime="20191224 16:34:12.800"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:11.752" endtime="20191224 16:34:12.801"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:11.743" endtime="20191224 16:34:12.802"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191224 16:34:13.807" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191224 16:34:12.805" endtime="20191224 16:34:13.808"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:12.803" endtime="20191224 16:34:13.809"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:11.742" endtime="20191224 16:34:13.810"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:11.741" endtime="20191224 16:34:13.811"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191224 16:34:13.849" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191224 16:34:13.812" endtime="20191224 16:34:13.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20191224 16:34:13.871" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20191224 16:34:13.852" endtime="20191224 16:34:13.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191224 16:34:13.875" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191224 16:34:13.874" endtime="20191224 16:34:13.912"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191224 16:34:14.915" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191224 16:34:13.913" endtime="20191224 16:34:14.915"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:13.913" endtime="20191224 16:34:14.916"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:13.874" endtime="20191224 16:34:14.916"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:13.873" endtime="20191224 16:34:14.917"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:13.872" endtime="20191224 16:34:14.917"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:13.851" endtime="20191224 16:34:14.918"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191224 16:34:15.922" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191224 16:34:14.919" endtime="20191224 16:34:15.923"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:14.918" endtime="20191224 16:34:15.924"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:13.851" endtime="20191224 16:34:15.925"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:13.850" endtime="20191224 16:34:15.926"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191224 16:34:15.927" endtime="20191224 16:34:18.052"></status>
</kw>
<status status="PASS" starttime="20191224 16:34:11.688" endtime="20191224 16:34:18.053"></status>
</kw>
<status status="PASS" starttime="20191224 16:28:28.536" endtime="20191224 16:34:18.054" critical="yes"></status>
</test>
<status status="PASS" starttime="20191224 16:28:28.158" endtime="20191224 16:34:18.056"></status>
</suite>
<status status="PASS" starttime="20191224 16:28:28.156" endtime="20191224 16:34:18.066"></status>
</suite>
<status status="PASS" starttime="20191224 16:28:28.154" endtime="20191224 16:34:18.072"></status>
</suite>
<status status="PASS" starttime="20191224 16:28:28.151" endtime="20191224 16:34:18.076"></status>
</suite>
<status status="PASS" starttime="20191224 16:28:28.128" endtime="20191224 16:34:18.079"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="1" fail="0" id="s1-s1" name="Test Resources">BulkPatching Robot.Test Resources</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Test Suites">BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1" name="4. Exit Bulk Patchings Screen">BulkPatching Robot.Test Resources.Test Suites.4. Exit Bulk Patchings Screen</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1-s1" name="4.4.2. Check all patches on Bulk patching list are patched successfully after waiting for timeout">BulkPatching Robot.Test Resources.Test Suites.4. Exit Bulk Patchings Screen.4.4.2. Check all patches on Bulk patching list are patched successfully after waiting for timeout</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
