<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20191119 14:15:26.720" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1" name="Test Resources" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources">
<suite id="s1-s1-s1" name="Test Suites" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites">
<suite id="s1-s1-s1-s1" name="2. Insert All End As" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As">
<suite id="s1-s1-s1-s1-s1" name="2.3. Check End A when plugging correct tip in the middle of list of End A" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As\2.3. Check End A when plugging correct tip in the middle of list of End A.robot">
<test id="s1-s1-s1-s1-s1-t1" name="INSERT_END_A_03_02_Verify that imVision X shall show correctly when any connector in the middle of the End A list is unplugged and generating beep">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191119 14:15:27.134" endtime="20191119 14:15:27.134"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191119 14:15:27.134" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191119 14:15:28.520" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191119 14:15:27.134" endtime="20191119 14:15:28.520"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:27.134" endtime="20191119 14:15:28.520"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General definitions">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191119 14:15:28.520" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191119 14:15:28.520" endtime="20191119 14:15:28.520"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191119 14:15:28.520" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191119 14:15:28.520" endtime="20191119 14:15:32.938"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191119 14:15:32.939" endtime="20191119 14:15:34.091"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:15:34.610" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:15:34.091" endtime="20191119 14:15:34.610"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General definitions">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191119 14:15:34.620" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191119 14:15:34.610" endtime="20191119 14:15:34.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:15:34.620" endtime="20191119 14:15:34.630"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191119 14:15:34.644" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191119 14:15:34.630" endtime="20191119 14:15:34.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191119 14:15:34.644" endtime="20191119 14:15:34.644"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191119 14:15:34.650" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191119 14:15:34.644" endtime="20191119 14:15:34.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191119 14:15:34.650" endtime="20191119 14:15:34.650"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:34.610" endtime="20191119 14:15:34.650"></status>
</kw>
<kw name="Go To Home Screen" library="General definitions">
<kw name="Click Web Button" library="General definitions">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191119 14:15:34.660" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191119 14:15:34.660" endtime="20191119 14:15:34.742"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:34.650" endtime="20191119 14:15:34.743"></status>
</kw>
<kw name="Wait For Page Load" library="General definitions">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:15:35.260" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:15:34.744" endtime="20191119 14:15:35.260"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:34.743" endtime="20191119 14:15:35.260"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:34.650" endtime="20191119 14:15:35.260"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:28.520" endtime="20191119 14:15:35.260"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:27.121" endtime="20191119 14:15:35.260"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home definitions">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191119 14:15:35.270" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191119 14:15:35.270" endtime="20191119 14:15:35.359"></status>
</kw>
<kw name="Wait For Page Load" library="General definitions">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191119 14:15:35.880" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191119 14:15:35.360" endtime="20191119 14:15:35.880"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:35.360" endtime="20191119 14:15:35.880"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:35.260" endtime="20191119 14:15:35.880"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Bulk Patching definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:15:35.884" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:15:35.884" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:15:35.884" endtime="20191119 14:15:35.884"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:15:35.892" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:15:35.890" endtime="20191119 14:15:35.892"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:35.884" endtime="20191119 14:15:35.892"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:35.884" endtime="20191119 14:15:35.892"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:35.884" endtime="20191119 14:15:35.893"></status>
</kw>
<msg timestamp="20191119 14:15:35.893" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:15:35.880" endtime="20191119 14:15:35.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:15:35.893" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:15:35.893" endtime="20191119 14:15:35.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:15:35.893" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:15:35.893" endtime="20191119 14:15:35.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:15:35.893" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:15:35.893" endtime="20191119 14:15:35.893"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:15:35.921" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:15:35.900" endtime="20191119 14:15:35.921"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:15:37.930" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:35.921" endtime="20191119 14:15:37.930"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:15:37.932" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:37.931" endtime="20191119 14:15:37.933"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:35.893" endtime="20191119 14:15:37.933"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:35.880" endtime="20191119 14:15:37.934"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Bulk Patching definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:15:37.937" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:15:37.938" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:15:37.937" endtime="20191119 14:15:37.938"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:15:37.944" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:15:37.944" endtime="20191119 14:15:37.944"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:37.940" endtime="20191119 14:15:37.945"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:37.939" endtime="20191119 14:15:37.945"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:37.938" endtime="20191119 14:15:37.945"></status>
</kw>
<msg timestamp="20191119 14:15:37.947" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:15:37.936" endtime="20191119 14:15:37.947"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:15:37.948" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:15:37.948" endtime="20191119 14:15:37.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:15:37.950" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 14:15:37.949" endtime="20191119 14:15:37.950"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:15:37.952" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 14:15:37.951" endtime="20191119 14:15:37.952"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:15:37.964" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 14:15:37.953" endtime="20191119 14:15:37.964"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:15:39.981" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:37.965" endtime="20191119 14:15:39.981"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:15:39.983" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:39.982" endtime="20191119 14:15:39.983"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:37.953" endtime="20191119 14:15:39.983"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:37.935" endtime="20191119 14:15:39.983"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Bulk Patching definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:15:39.985" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:15:39.985" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:15:39.985" endtime="20191119 14:15:39.986"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:15:39.988" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:15:39.988" endtime="20191119 14:15:39.989"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:39.986" endtime="20191119 14:15:39.989"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:39.986" endtime="20191119 14:15:39.989"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:39.986" endtime="20191119 14:15:39.989"></status>
</kw>
<msg timestamp="20191119 14:15:39.990" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:15:39.984" endtime="20191119 14:15:39.990"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:15:39.990" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:15:39.990" endtime="20191119 14:15:39.991"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:15:39.991" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 14:15:39.991" endtime="20191119 14:15:39.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:15:39.992" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 14:15:39.992" endtime="20191119 14:15:39.992"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:15:40.022" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 14:15:39.993" endtime="20191119 14:15:40.022"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:15:42.060" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:40.023" endtime="20191119 14:15:42.060"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:15:42.060" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:42.060" endtime="20191119 14:15:42.060"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:39.992" endtime="20191119 14:15:42.060"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:39.984" endtime="20191119 14:15:42.060"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Bulk Patching definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:15:42.073" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:15:42.073" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:15:42.073" endtime="20191119 14:15:42.073"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:15:42.083" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:15:42.083" endtime="20191119 14:15:42.083"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:42.080" endtime="20191119 14:15:42.083"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:42.073" endtime="20191119 14:15:42.083"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:42.073" endtime="20191119 14:15:42.083"></status>
</kw>
<msg timestamp="20191119 14:15:42.083" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:15:42.070" endtime="20191119 14:15:42.083"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:15:42.090" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:15:42.090" endtime="20191119 14:15:42.090"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:15:42.090" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 14:15:42.090" endtime="20191119 14:15:42.093"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:15:42.093" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 14:15:42.093" endtime="20191119 14:15:42.093"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:15:42.186" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 14:15:42.093" endtime="20191119 14:15:42.187"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:15:44.212" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:42.187" endtime="20191119 14:15:44.212"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:15:44.212" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:44.212" endtime="20191119 14:15:44.212"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:42.093" endtime="20191119 14:15:44.212"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:42.070" endtime="20191119 14:15:44.212"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Bulk Patching definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:15:44.225" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:15:44.225" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:15:44.221" endtime="20191119 14:15:44.225"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:15:44.233" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:15:44.233" endtime="20191119 14:15:44.233"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:44.225" endtime="20191119 14:15:44.233"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:44.225" endtime="20191119 14:15:44.233"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:44.225" endtime="20191119 14:15:44.233"></status>
</kw>
<msg timestamp="20191119 14:15:44.240" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:15:44.221" endtime="20191119 14:15:44.240"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:15:44.243" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:15:44.243" endtime="20191119 14:15:44.243"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:15:44.243" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 14:15:44.243" endtime="20191119 14:15:44.243"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:15:44.243" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 14:15:44.243" endtime="20191119 14:15:44.243"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:15:44.271" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191119 14:15:44.243" endtime="20191119 14:15:44.271"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:15:46.291" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:44.271" endtime="20191119 14:15:46.291"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:15:46.293" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:46.293" endtime="20191119 14:15:46.293"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:44.243" endtime="20191119 14:15:46.293"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:44.221" endtime="20191119 14:15:46.293"></status>
</kw>
<kw name="Then Check to see if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot; in End &quot;A&quot; color &quot;red&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the color of port information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191119 14:15:46.303" endtime="20191119 14:15:46.303"></status>
</kw>
<msg timestamp="20191119 14:15:46.303" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191119 14:15:46.300" endtime="20191119 14:15:46.303"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191119 14:15:46.311" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191119 14:15:46.303" endtime="20191119 14:15:46.311"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191119 14:15:46.311" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191119 14:15:46.311" endtime="20191119 14:15:46.311"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191119 14:15:46.311" level="INFO">${input port} = -Port 2</msg>
<status status="PASS" starttime="20191119 14:15:46.311" endtime="20191119 14:15:46.311"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191119 14:15:46.311" level="INFO">${input port information} = Rack 1-Panel 1-Port 2</msg>
<status status="PASS" starttime="20191119 14:15:46.311" endtime="20191119 14:15:46.321"></status>
</kw>
<kw name="Get Color Code of Port Information" library="Bulk Patching definitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20191119 14:15:46.323" level="INFO">${color} = red</msg>
<status status="PASS" starttime="20191119 14:15:46.323" endtime="20191119 14:15:46.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#F00;</arg>
</arguments>
<status status="PASS" starttime="20191119 14:15:46.323" endtime="20191119 14:15:46.323"></status>
</kw>
<msg timestamp="20191119 14:15:46.323" level="INFO">${color code} = color:#F00;</msg>
<status status="PASS" starttime="20191119 14:15:46.323" endtime="20191119 14:15:46.331"></status>
</kw>
<msg timestamp="20191119 14:15:46.331" level="INFO">${input color} = color:#F00;</msg>
<status status="PASS" starttime="20191119 14:15:46.321" endtime="20191119 14:15:46.331"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position with color}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191119 14:15:46.331" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='Color']/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191119 14:15:46.331" endtime="20191119 14:15:46.331"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191119 14:15:46.331" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='Color']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191119 14:15:46.331" endtime="20191119 14:15:46.331"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20191119 14:15:46.341" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191119 14:15:46.341" endtime="20191119 14:15:46.341"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:15:46.370" level="INFO">${count} = 4</msg>
<status status="PASS" starttime="20191119 14:15:46.344" endtime="20191119 14:15:46.370"></status>
</kw>
<msg timestamp="20191119 14:15:46.370" level="INFO">${number of lines} = 4</msg>
<status status="PASS" starttime="20191119 14:15:46.344" endtime="20191119 14:15:46.370"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:15:46.370" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191119 14:15:46.370" endtime="20191119 14:15:46.370"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191119 14:15:46.370" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191119 14:15:46.370" endtime="20191119 14:15:46.370"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191119 14:15:46.370" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191119 14:15:46.370" endtime="20191119 14:15:46.380"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191119 14:15:46.380" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191119 14:15:46.380" endtime="20191119 14:15:46.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191119 14:15:46.380" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191119 14:15:46.380" endtime="20191119 14:15:46.380"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:15:46.394" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191119 14:15:46.380" endtime="20191119 14:15:46.394"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191119 14:15:46.394" endtime="20191119 14:15:46.394"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:46.370" endtime="20191119 14:15:46.394"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191119 14:15:46.401" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191119 14:15:46.394" endtime="20191119 14:15:46.401"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191119 14:15:46.401" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191119 14:15:46.401" endtime="20191119 14:15:46.401"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191119 14:15:46.401" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191119 14:15:46.401" endtime="20191119 14:15:46.401"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191119 14:15:46.404" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2][@style='color:#F00;']/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191119 14:15:46.401" endtime="20191119 14:15:46.404"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191119 14:15:46.410" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20191119 14:15:46.404" endtime="20191119 14:15:46.410"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20191119 14:15:46.410" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:15:46.410" endtime="20191119 14:15:46.410"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:46.394" endtime="20191119 14:15:46.410"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:46.370" endtime="20191119 14:15:46.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${count}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20191119 14:15:46.410" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191119 14:15:46.410" endtime="20191119 14:15:46.410"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:46.300" endtime="20191119 14:15:46.410"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Bulk Patching definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:15:46.410" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:15:46.410" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:15:46.410" endtime="20191119 14:15:46.410"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:15:46.422" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:15:46.422" endtime="20191119 14:15:46.422"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:46.421" endtime="20191119 14:15:46.422"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:46.410" endtime="20191119 14:15:46.422"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:46.410" endtime="20191119 14:15:46.422"></status>
</kw>
<msg timestamp="20191119 14:15:46.422" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:15:46.410" endtime="20191119 14:15:46.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:15:46.422" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:15:46.422" endtime="20191119 14:15:46.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:15:46.422" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 14:15:46.422" endtime="20191119 14:15:46.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:15:46.422" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 14:15:46.422" endtime="20191119 14:15:46.422"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:15:46.490" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191119 14:15:46.422" endtime="20191119 14:15:46.490"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:15:48.521" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:46.490" endtime="20191119 14:15:48.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:15:48.523" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:48.523" endtime="20191119 14:15:48.523"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:46.422" endtime="20191119 14:15:48.523"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:46.410" endtime="20191119 14:15:48.523"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Bulk Patching definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:15:48.533" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:15:48.533" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:15:48.533" endtime="20191119 14:15:48.533"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:15:48.541" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:15:48.541" endtime="20191119 14:15:48.541"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:48.533" endtime="20191119 14:15:48.541"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:48.533" endtime="20191119 14:15:48.541"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:48.533" endtime="20191119 14:15:48.541"></status>
</kw>
<msg timestamp="20191119 14:15:48.541" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:15:48.531" endtime="20191119 14:15:48.541"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:15:48.541" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:15:48.541" endtime="20191119 14:15:48.541"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:15:48.541" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 14:15:48.541" endtime="20191119 14:15:48.541"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:15:48.551" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 14:15:48.541" endtime="20191119 14:15:48.551"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:15:48.600" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191119 14:15:48.551" endtime="20191119 14:15:48.600"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:15:50.601" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:48.600" endtime="20191119 14:15:50.602"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:15:50.605" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:50.603" endtime="20191119 14:15:50.606"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:48.551" endtime="20191119 14:15:50.607"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:48.530" endtime="20191119 14:15:50.608"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Bulk Patching definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191119 14:15:50.615" level="INFO">Length is 12</msg>
<msg timestamp="20191119 14:15:50.616" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191119 14:15:50.614" endtime="20191119 14:15:50.616"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191119 14:15:50.627" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191119 14:15:50.626" endtime="20191119 14:15:50.627"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:50.619" endtime="20191119 14:15:50.628"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:50.618" endtime="20191119 14:15:50.629"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:50.617" endtime="20191119 14:15:50.629"></status>
</kw>
<msg timestamp="20191119 14:15:50.632" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191119 14:15:50.611" endtime="20191119 14:15:50.632"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191119 14:15:50.633" level="INFO">1</msg>
<status status="PASS" starttime="20191119 14:15:50.633" endtime="20191119 14:15:50.634"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191119 14:15:50.635" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:15:50.634" endtime="20191119 14:15:50.635"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191119 14:15:50.636" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:15:50.636" endtime="20191119 14:15:50.637"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191119 14:15:50.649" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191119 14:15:50.638" endtime="20191119 14:15:50.649"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191119 14:15:52.661" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:50.650" endtime="20191119 14:15:52.661"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191119 14:15:52.664" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191119 14:15:52.662" endtime="20191119 14:15:52.664"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:50.637" endtime="20191119 14:15:52.665"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:50.610" endtime="20191119 14:15:52.666"></status>
</kw>
<status status="PASS" starttime="20191119 14:15:27.121" endtime="20191119 14:15:52.667" critical="yes"></status>
</test>
<status status="PASS" starttime="20191119 14:15:26.774" endtime="20191119 14:15:52.669"></status>
</suite>
<status status="PASS" starttime="20191119 14:15:26.774" endtime="20191119 14:15:52.675"></status>
</suite>
<status status="PASS" starttime="20191119 14:15:26.769" endtime="20191119 14:15:52.680"></status>
</suite>
<status status="PASS" starttime="20191119 14:15:26.769" endtime="20191119 14:15:52.684"></status>
</suite>
<status status="PASS" starttime="20191119 14:15:26.741" endtime="20191119 14:15:52.688"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="1" fail="0" id="s1-s1" name="Test Resources">BulkPatching Robot.Test Resources</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Test Suites">BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1" name="2. Insert All End As">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1-s1" name="2.3. Check End A when plugging correct tip in the middle of list of End A">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As.2.3. Check End A when plugging correct tip in the middle of list of End A</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
