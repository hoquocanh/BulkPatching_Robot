<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20191120 15:41:43.224" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1" name="Test Resources" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources">
<suite id="s1-s1-s1" name="Test Suites" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites">
<suite id="s1-s1-s1-s1" name="2. Insert All End As" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As">
<suite id="s1-s1-s1-s1-s1" name="2.5. Check End A when plugging correct tip in the middle of list of End A then delete it" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\2. Insert All End As\2.5. Check End A when plugging correct tip in the middle of list of End A then delete it.robot">
<test id="s1-s1-s1-s1-s1-t1" name="INSERT_END_A_05_01_Verify that imVision X will remove all unplugged ports from the End A list, and turn off all port LEDs after selecting Delete button in the bottom bar if doing on a 24-port Legacy Copper">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191120 15:41:43.668" endtime="20191120 15:41:43.669"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191120 15:41:43.670" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191120 15:41:45.068" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191120 15:41:43.669" endtime="20191120 15:41:45.068"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:43.668" endtime="20191120 15:41:45.068"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191120 15:41:45.071" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191120 15:41:45.071" endtime="20191120 15:41:45.071"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191120 15:41:45.071" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191120 15:41:45.071" endtime="20191120 15:41:51.692"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191120 15:41:51.693" endtime="20191120 15:41:52.817"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:41:53.319" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:41:52.817" endtime="20191120 15:41:53.319"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 15:41:53.335" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191120 15:41:53.320" endtime="20191120 15:41:53.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 15:41:53.336" endtime="20191120 15:41:53.337"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191120 15:41:53.350" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191120 15:41:53.337" endtime="20191120 15:41:53.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 15:41:53.351" endtime="20191120 15:41:53.352"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 15:41:53.365" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191120 15:41:53.352" endtime="20191120 15:41:53.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191120 15:41:53.365" endtime="20191120 15:41:53.366"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:53.320" endtime="20191120 15:41:53.366"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:41:53.368" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 15:41:53.368" endtime="20191120 15:41:53.453"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:53.367" endtime="20191120 15:41:53.454"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:41:53.956" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:41:53.455" endtime="20191120 15:41:53.956"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:53.454" endtime="20191120 15:41:53.956"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:53.367" endtime="20191120 15:41:53.957"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:45.068" endtime="20191120 15:41:53.957"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:43.667" endtime="20191120 15:41:53.957"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191120 15:41:53.959" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191120 15:41:53.958" endtime="20191120 15:41:54.013"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:41:54.516" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:41:54.014" endtime="20191120 15:41:54.516"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:54.014" endtime="20191120 15:41:54.517"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:53.958" endtime="20191120 15:41:54.518"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:41:54.522" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:41:54.522" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:41:54.521" endtime="20191120 15:41:54.523"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:41:54.529" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:41:54.528" endtime="20191120 15:41:54.529"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:54.524" endtime="20191120 15:41:54.530"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:54.524" endtime="20191120 15:41:54.530"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:54.523" endtime="20191120 15:41:54.531"></status>
</kw>
<msg timestamp="20191120 15:41:54.532" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 15:41:54.520" endtime="20191120 15:41:54.532"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:41:54.534" level="INFO">1</msg>
<status status="PASS" starttime="20191120 15:41:54.533" endtime="20191120 15:41:54.534"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:41:54.536" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 15:41:54.535" endtime="20191120 15:41:54.536"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:41:54.538" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 15:41:54.537" endtime="20191120 15:41:54.538"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:41:54.562" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 15:41:54.540" endtime="20191120 15:41:54.562"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:41:56.578" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:41:54.563" endtime="20191120 15:41:56.579"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:41:56.583" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:41:56.581" endtime="20191120 15:41:56.583"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:54.539" endtime="20191120 15:41:56.584"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:54.519" endtime="20191120 15:41:56.585"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:41:56.593" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:41:56.593" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:41:56.591" endtime="20191120 15:41:56.594"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:41:56.600" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:41:56.599" endtime="20191120 15:41:56.600"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:56.596" endtime="20191120 15:41:56.600"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:56.596" endtime="20191120 15:41:56.601"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:56.595" endtime="20191120 15:41:56.601"></status>
</kw>
<msg timestamp="20191120 15:41:56.602" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 15:41:56.589" endtime="20191120 15:41:56.602"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:41:56.603" level="INFO">1</msg>
<status status="PASS" starttime="20191120 15:41:56.603" endtime="20191120 15:41:56.604"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:41:56.605" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 15:41:56.604" endtime="20191120 15:41:56.605"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:41:56.606" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 15:41:56.606" endtime="20191120 15:41:56.606"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:41:56.636" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 15:41:56.608" endtime="20191120 15:41:56.636"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:41:58.637" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:41:56.637" endtime="20191120 15:41:58.638"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:41:58.641" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:41:58.639" endtime="20191120 15:41:58.642"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:56.607" endtime="20191120 15:41:58.643"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:56.587" endtime="20191120 15:41:58.644"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:41:58.650" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:41:58.651" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:41:58.649" endtime="20191120 15:41:58.652"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:41:58.663" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:41:58.661" endtime="20191120 15:41:58.663"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:58.655" endtime="20191120 15:41:58.664"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:58.653" endtime="20191120 15:41:58.665"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:58.652" endtime="20191120 15:41:58.665"></status>
</kw>
<msg timestamp="20191120 15:41:58.666" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 15:41:58.647" endtime="20191120 15:41:58.667"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:41:58.668" level="INFO">1</msg>
<status status="PASS" starttime="20191120 15:41:58.667" endtime="20191120 15:41:58.668"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:41:58.669" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 15:41:58.669" endtime="20191120 15:41:58.670"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:41:58.671" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 15:41:58.670" endtime="20191120 15:41:58.671"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:41:58.683" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 15:41:58.672" endtime="20191120 15:41:58.683"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:00.685" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:41:58.684" endtime="20191120 15:42:00.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:00.690" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:00.687" endtime="20191120 15:42:00.691"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:58.671" endtime="20191120 15:42:00.692"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:58.645" endtime="20191120 15:42:00.693"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:00.700" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:00.700" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:00.698" endtime="20191120 15:42:00.701"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:00.711" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:00.710" endtime="20191120 15:42:00.712"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:00.704" endtime="20191120 15:42:00.712"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:00.703" endtime="20191120 15:42:00.713"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:00.701" endtime="20191120 15:42:00.714"></status>
</kw>
<msg timestamp="20191120 15:42:00.716" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 15:42:00.696" endtime="20191120 15:42:00.716"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:00.719" level="INFO">1</msg>
<status status="PASS" starttime="20191120 15:42:00.717" endtime="20191120 15:42:00.719"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:00.723" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:00.721" endtime="20191120 15:42:00.723"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:00.725" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:00.724" endtime="20191120 15:42:00.726"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:00.752" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:00.729" endtime="20191120 15:42:00.752"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:02.754" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:00.753" endtime="20191120 15:42:02.755"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:02.758" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:02.756" endtime="20191120 15:42:02.759"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:00.727" endtime="20191120 15:42:02.760"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:00.694" endtime="20191120 15:42:02.761"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:02.768" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:02.768" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:02.766" endtime="20191120 15:42:02.769"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:02.777" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:02.777" endtime="20191120 15:42:02.778"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:02.772" endtime="20191120 15:42:02.778"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:02.771" endtime="20191120 15:42:02.778"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:02.769" endtime="20191120 15:42:02.779"></status>
</kw>
<msg timestamp="20191120 15:42:02.780" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 15:42:02.764" endtime="20191120 15:42:02.780"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:02.781" level="INFO">1</msg>
<status status="PASS" starttime="20191120 15:42:02.781" endtime="20191120 15:42:02.782"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:02.783" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 15:42:02.782" endtime="20191120 15:42:02.784"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:02.785" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 15:42:02.784" endtime="20191120 15:42:02.785"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:02.831" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191120 15:42:02.787" endtime="20191120 15:42:02.831"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:04.832" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:02.832" endtime="20191120 15:42:04.833"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:04.836" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:04.835" endtime="20191120 15:42:04.837"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:02.786" endtime="20191120 15:42:04.838"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:02.763" endtime="20191120 15:42:04.839"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:04.846" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:04.846" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:04.845" endtime="20191120 15:42:04.847"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:04.857" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:04.856" endtime="20191120 15:42:04.858"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:04.850" endtime="20191120 15:42:04.858"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:04.849" endtime="20191120 15:42:04.859"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:04.848" endtime="20191120 15:42:04.860"></status>
</kw>
<msg timestamp="20191120 15:42:04.862" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 15:42:04.842" endtime="20191120 15:42:04.862"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:04.864" level="INFO">1</msg>
<status status="PASS" starttime="20191120 15:42:04.863" endtime="20191120 15:42:04.865"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:04.868" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 15:42:04.866" endtime="20191120 15:42:04.868"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:04.871" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 15:42:04.869" endtime="20191120 15:42:04.871"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:04.891" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191120 15:42:04.874" endtime="20191120 15:42:04.891"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:06.893" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:04.892" endtime="20191120 15:42:06.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:06.895" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:06.894" endtime="20191120 15:42:06.895"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:04.872" endtime="20191120 15:42:06.896"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:04.841" endtime="20191120 15:42:06.896"></status>
</kw>
<kw name="Then Click Delete Button" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnDelete}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:42:06.899" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='delete-button']'.</msg>
<status status="PASS" starttime="20191120 15:42:06.899" endtime="20191120 15:42:06.968"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:06.898" endtime="20191120 15:42:06.969"></status>
</kw>
<kw name="Wait For Page Update" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE UPDATE TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:42:07.071" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20191120 15:42:06.970" endtime="20191120 15:42:07.071"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:06.969" endtime="20191120 15:42:07.071"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:06.897" endtime="20191120 15:42:07.072"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot; &quot;disappeared&quot; in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of Coper panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:07.073" endtime="20191120 15:42:07.073"></status>
</kw>
<msg timestamp="20191120 15:42:07.074" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 15:42:07.072" endtime="20191120 15:42:07.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 15:42:07.074" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 15:42:07.074" endtime="20191120 15:42:07.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 15:42:07.075" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191120 15:42:07.075" endtime="20191120 15:42:07.075"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 15:42:07.076" level="INFO">${input port} = -Port 2</msg>
<status status="PASS" starttime="20191120 15:42:07.075" endtime="20191120 15:42:07.076"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 15:42:07.076" level="INFO">${input port information} = Rack 1-Panel 1-Port 2</msg>
<status status="PASS" starttime="20191120 15:42:07.076" endtime="20191120 15:42:07.077"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 15:42:07.077" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 15:42:07.077" endtime="20191120 15:42:07.077"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 15:42:07.078" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:07.078" endtime="20191120 15:42:07.078"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:07.091" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20191120 15:42:07.079" endtime="20191120 15:42:07.091"></status>
</kw>
<msg timestamp="20191120 15:42:07.091" level="INFO">${number of lines} = 2</msg>
<status status="PASS" starttime="20191120 15:42:07.078" endtime="20191120 15:42:07.091"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:07.091" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:07.091" endtime="20191120 15:42:07.091"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:42:07.091" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 15:42:07.091" endtime="20191120 15:42:07.091"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:42:07.091" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 15:42:07.091" endtime="20191120 15:42:07.091"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:42:07.091" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:07.091" endtime="20191120 15:42:07.091"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:42:07.091" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:07.091" endtime="20191120 15:42:07.091"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:07.097" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:07.091" endtime="20191120 15:42:07.097"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:07.108" endtime="20191120 15:42:07.108"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.091" endtime="20191120 15:42:07.108"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:42:07.108" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 15:42:07.108" endtime="20191120 15:42:07.108"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:42:07.108" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 15:42:07.108" endtime="20191120 15:42:07.108"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:42:07.111" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:07.111" endtime="20191120 15:42:07.111"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:42:07.111" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:07.111" endtime="20191120 15:42:07.111"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:07.118" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:07.111" endtime="20191120 15:42:07.118"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:07.118" endtime="20191120 15:42:07.118"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.108" endtime="20191120 15:42:07.118"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:42:07.118" level="INFO">${index temp} = 3</msg>
<status status="PASS" starttime="20191120 15:42:07.118" endtime="20191120 15:42:07.118"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:42:07.118" level="INFO">${index string} = 3</msg>
<status status="PASS" starttime="20191120 15:42:07.118" endtime="20191120 15:42:07.118"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:42:07.118" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:07.118" endtime="20191120 15:42:07.118"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:42:07.118" level="INFO">//ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:07.118" endtime="20191120 15:42:07.118"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:07.138" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:07.118" endtime="20191120 15:42:07.138"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:07.138" endtime="20191120 15:42:07.138"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.118" endtime="20191120 15:42:07.138"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.091" endtime="20191120 15:42:07.138"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191120 15:42:07.138" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191120 15:42:07.138" endtime="20191120 15:42:07.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:07.138" endtime="20191120 15:42:07.138"></status>
</kw>
<msg timestamp="20191120 15:42:07.138" level="INFO">${expected value} = 0</msg>
<status status="PASS" starttime="20191120 15:42:07.138" endtime="20191120 15:42:07.138"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:07.138" endtime="20191120 15:42:07.138"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.138" endtime="20191120 15:42:07.138"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.072" endtime="20191120 15:42:07.138"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot; &quot;disappeared&quot; in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of Coper panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:07.138" endtime="20191120 15:42:07.138"></status>
</kw>
<msg timestamp="20191120 15:42:07.138" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 15:42:07.138" endtime="20191120 15:42:07.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 15:42:07.138" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 15:42:07.138" endtime="20191120 15:42:07.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 15:42:07.138" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20191120 15:42:07.138" endtime="20191120 15:42:07.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 15:42:07.138" level="INFO">${input port} = -Port 3</msg>
<status status="PASS" starttime="20191120 15:42:07.138" endtime="20191120 15:42:07.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 15:42:07.147" level="INFO">${input port information} = Rack 1-Panel 1-Port 3</msg>
<status status="PASS" starttime="20191120 15:42:07.147" endtime="20191120 15:42:07.147"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 15:42:07.147" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 15:42:07.147" endtime="20191120 15:42:07.147"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 15:42:07.147" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:07.147" endtime="20191120 15:42:07.147"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:07.147" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20191120 15:42:07.147" endtime="20191120 15:42:07.158"></status>
</kw>
<msg timestamp="20191120 15:42:07.158" level="INFO">${number of lines} = 2</msg>
<status status="PASS" starttime="20191120 15:42:07.147" endtime="20191120 15:42:07.158"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:07.158" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:07.158" endtime="20191120 15:42:07.158"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:42:07.158" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 15:42:07.158" endtime="20191120 15:42:07.158"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:42:07.158" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 15:42:07.158" endtime="20191120 15:42:07.158"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:42:07.161" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:07.161" endtime="20191120 15:42:07.161"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:42:07.161" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:07.161" endtime="20191120 15:42:07.161"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:07.168" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:07.161" endtime="20191120 15:42:07.168"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:07.168" endtime="20191120 15:42:07.168"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.158" endtime="20191120 15:42:07.168"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:42:07.168" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 15:42:07.168" endtime="20191120 15:42:07.168"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:42:07.168" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 15:42:07.168" endtime="20191120 15:42:07.168"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:42:07.168" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:07.168" endtime="20191120 15:42:07.168"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:42:07.177" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:07.168" endtime="20191120 15:42:07.177"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:07.188" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:07.177" endtime="20191120 15:42:07.188"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:07.188" endtime="20191120 15:42:07.188"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.168" endtime="20191120 15:42:07.188"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:42:07.191" level="INFO">${index temp} = 3</msg>
<status status="PASS" starttime="20191120 15:42:07.188" endtime="20191120 15:42:07.191"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:42:07.191" level="INFO">${index string} = 3</msg>
<status status="PASS" starttime="20191120 15:42:07.191" endtime="20191120 15:42:07.191"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:42:07.191" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:07.191" endtime="20191120 15:42:07.191"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:42:07.191" level="INFO">//ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:07.191" endtime="20191120 15:42:07.191"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:07.196" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:07.191" endtime="20191120 15:42:07.196"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:07.196" endtime="20191120 15:42:07.196"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.188" endtime="20191120 15:42:07.196"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.158" endtime="20191120 15:42:07.196"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191120 15:42:07.196" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191120 15:42:07.196" endtime="20191120 15:42:07.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:07.208" endtime="20191120 15:42:07.208"></status>
</kw>
<msg timestamp="20191120 15:42:07.208" level="INFO">${expected value} = 0</msg>
<status status="PASS" starttime="20191120 15:42:07.208" endtime="20191120 15:42:07.208"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:07.210" endtime="20191120 15:42:07.210"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.208" endtime="20191120 15:42:07.210"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.138" endtime="20191120 15:42:07.210"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:07.210" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:07.210" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:07.210" endtime="20191120 15:42:07.210"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:07.210" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:07.210" endtime="20191120 15:42:07.210"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.210" endtime="20191120 15:42:07.210"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.210" endtime="20191120 15:42:07.210"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.210" endtime="20191120 15:42:07.210"></status>
</kw>
<msg timestamp="20191120 15:42:07.210" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 15:42:07.210" endtime="20191120 15:42:07.210"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:07.210" level="INFO">1</msg>
<status status="PASS" starttime="20191120 15:42:07.210" endtime="20191120 15:42:07.210"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:07.210" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:07.210" endtime="20191120 15:42:07.210"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:07.218" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:07.210" endtime="20191120 15:42:07.218"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:07.293" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:07.218" endtime="20191120 15:42:07.294"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:09.308" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:07.294" endtime="20191120 15:42:09.308"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:09.310" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:09.309" endtime="20191120 15:42:09.311"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.218" endtime="20191120 15:42:09.311"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:07.210" endtime="20191120 15:42:09.312"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:09.315" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:09.316" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:09.315" endtime="20191120 15:42:09.316"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:09.322" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:09.321" endtime="20191120 15:42:09.322"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:09.318" endtime="20191120 15:42:09.322"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:09.317" endtime="20191120 15:42:09.323"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:09.317" endtime="20191120 15:42:09.323"></status>
</kw>
<msg timestamp="20191120 15:42:09.324" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191120 15:42:09.313" endtime="20191120 15:42:09.324"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:09.326" level="INFO">1</msg>
<status status="PASS" starttime="20191120 15:42:09.325" endtime="20191120 15:42:09.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:09.327" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 15:42:09.327" endtime="20191120 15:42:09.328"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:09.329" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 15:42:09.328" endtime="20191120 15:42:09.329"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:09.342" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191120 15:42:09.331" endtime="20191120 15:42:09.342"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:11.348" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:09.343" endtime="20191120 15:42:11.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:11.352" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:11.351" endtime="20191120 15:42:11.353"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:09.330" endtime="20191120 15:42:11.354"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:09.312" endtime="20191120 15:42:11.355"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 15:42:11.387" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191120 15:42:11.358" endtime="20191120 15:42:11.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:42:11.391" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191120 15:42:11.390" endtime="20191120 15:42:11.440"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:11.389" endtime="20191120 15:42:11.441"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:42:11.943" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:42:11.442" endtime="20191120 15:42:11.943"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:11.441" endtime="20191120 15:42:11.944"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:11.389" endtime="20191120 15:42:11.944"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:11.388" endtime="20191120 15:42:11.944"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 15:42:11.956" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191120 15:42:11.945" endtime="20191120 15:42:11.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:42:11.958" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 15:42:11.958" endtime="20191120 15:42:11.987"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:11.958" endtime="20191120 15:42:11.987"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:42:12.490" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:42:11.988" endtime="20191120 15:42:12.491"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:11.988" endtime="20191120 15:42:12.492"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:11.957" endtime="20191120 15:42:12.493"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:11.957" endtime="20191120 15:42:12.494"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191120 15:42:12.495" endtime="20191120 15:42:14.648"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:11.357" endtime="20191120 15:42:14.649"></status>
</kw>
<status status="PASS" starttime="20191120 15:41:43.665" endtime="20191120 15:42:14.650" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t2" name="INSERT_END_A_05_02_Verify that imVision X will remove all unplugged ports from the End A list, and turn off all port LEDs after selecting Delete button in the bottom bar if doing on a 48-port Legacy Copper">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:14.661" endtime="20191120 15:42:14.662"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191120 15:42:14.665" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191120 15:42:16.508" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191120 15:42:14.663" endtime="20191120 15:42:16.508"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:14.659" endtime="20191120 15:42:16.508"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191120 15:42:16.508" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191120 15:42:16.508" endtime="20191120 15:42:16.508"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191120 15:42:16.511" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191120 15:42:16.511" endtime="20191120 15:42:20.585"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191120 15:42:20.586" endtime="20191120 15:42:21.727"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:42:22.228" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:42:21.727" endtime="20191120 15:42:22.228"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 15:42:22.271" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191120 15:42:22.231" endtime="20191120 15:42:22.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:22.278" endtime="20191120 15:42:22.278"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191120 15:42:22.298" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191120 15:42:22.278" endtime="20191120 15:42:22.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:22.298" endtime="20191120 15:42:22.298"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 15:42:22.308" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191120 15:42:22.298" endtime="20191120 15:42:22.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:22.308" endtime="20191120 15:42:22.308"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:22.231" endtime="20191120 15:42:22.308"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:42:22.318" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 15:42:22.318" endtime="20191120 15:42:22.412"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:22.318" endtime="20191120 15:42:22.413"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:42:22.918" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:42:22.414" endtime="20191120 15:42:22.918"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:22.414" endtime="20191120 15:42:22.918"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:22.318" endtime="20191120 15:42:22.918"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:16.508" endtime="20191120 15:42:22.918"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:14.656" endtime="20191120 15:42:22.918"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191120 15:42:22.928" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191120 15:42:22.918" endtime="20191120 15:42:23.026"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:42:23.538" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:42:23.027" endtime="20191120 15:42:23.538"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:23.026" endtime="20191120 15:42:23.538"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:22.918" endtime="20191120 15:42:23.541"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:23.541" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:23.541" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:23.541" endtime="20191120 15:42:23.541"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:23.541" endtime="20191120 15:42:23.541"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:23.541" endtime="20191120 15:42:23.541"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:23.541" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:23.541" endtime="20191120 15:42:23.541"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:23.541" endtime="20191120 15:42:23.548"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:23.541" endtime="20191120 15:42:23.548"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:23.541" endtime="20191120 15:42:23.548"></status>
</kw>
<msg timestamp="20191120 15:42:23.548" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20191120 15:42:23.541" endtime="20191120 15:42:23.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:23.548" level="INFO">2</msg>
<status status="PASS" starttime="20191120 15:42:23.548" endtime="20191120 15:42:23.548"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:23.548" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 2 --port 1</msg>
<status status="PASS" starttime="20191120 15:42:23.548" endtime="20191120 15:42:23.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:23.548" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 1</msg>
<status status="PASS" starttime="20191120 15:42:23.548" endtime="20191120 15:42:23.548"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:23.671" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 1</msg>
<status status="PASS" starttime="20191120 15:42:23.548" endtime="20191120 15:42:23.672"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:25.674" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:23.672" endtime="20191120 15:42:25.675"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:25.677" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:25.675" endtime="20191120 15:42:25.677"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:23.548" endtime="20191120 15:42:25.678"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:23.541" endtime="20191120 15:42:25.678"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:25.682" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:25.683" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:25.681" endtime="20191120 15:42:25.683"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:25.685" endtime="20191120 15:42:25.688"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:25.684" endtime="20191120 15:42:25.689"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:25.694" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:25.694" endtime="20191120 15:42:25.695"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:25.690" endtime="20191120 15:42:25.695"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:25.689" endtime="20191120 15:42:25.695"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:25.683" endtime="20191120 15:42:25.696"></status>
</kw>
<msg timestamp="20191120 15:42:25.697" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20191120 15:42:25.680" endtime="20191120 15:42:25.697"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:25.697" level="INFO">2</msg>
<status status="PASS" starttime="20191120 15:42:25.697" endtime="20191120 15:42:25.698"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:25.698" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 2 --port 2</msg>
<status status="PASS" starttime="20191120 15:42:25.698" endtime="20191120 15:42:25.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:25.699" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 2</msg>
<status status="PASS" starttime="20191120 15:42:25.699" endtime="20191120 15:42:25.699"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:25.738" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 2</msg>
<status status="PASS" starttime="20191120 15:42:25.700" endtime="20191120 15:42:25.738"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:27.758" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:25.739" endtime="20191120 15:42:27.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:27.758" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:27.758" endtime="20191120 15:42:27.758"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:25.699" endtime="20191120 15:42:27.758"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:25.679" endtime="20191120 15:42:27.758"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:27.758" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:27.758" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:27.758" endtime="20191120 15:42:27.758"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:27.758" endtime="20191120 15:42:27.758"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:27.758" endtime="20191120 15:42:27.758"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:27.758" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:27.758" endtime="20191120 15:42:27.758"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:27.758" endtime="20191120 15:42:27.758"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:27.758" endtime="20191120 15:42:27.758"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:27.758" endtime="20191120 15:42:27.758"></status>
</kw>
<msg timestamp="20191120 15:42:27.758" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20191120 15:42:27.758" endtime="20191120 15:42:27.768"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:27.768" level="INFO">2</msg>
<status status="PASS" starttime="20191120 15:42:27.768" endtime="20191120 15:42:27.768"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:27.768" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 2 --port 3</msg>
<status status="PASS" starttime="20191120 15:42:27.768" endtime="20191120 15:42:27.768"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:27.768" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 3</msg>
<status status="PASS" starttime="20191120 15:42:27.768" endtime="20191120 15:42:27.768"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:27.898" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 3</msg>
<status status="PASS" starttime="20191120 15:42:27.771" endtime="20191120 15:42:27.898"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:29.909" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:27.898" endtime="20191120 15:42:29.909"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:29.910" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:29.910" endtime="20191120 15:42:29.910"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:27.768" endtime="20191120 15:42:29.911"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:27.758" endtime="20191120 15:42:29.911"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:29.913" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:29.913" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:29.912" endtime="20191120 15:42:29.913"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:29.914" endtime="20191120 15:42:29.915"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:29.913" endtime="20191120 15:42:29.915"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:29.917" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:29.917" endtime="20191120 15:42:29.918"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:29.916" endtime="20191120 15:42:29.918"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:29.915" endtime="20191120 15:42:29.918"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:29.913" endtime="20191120 15:42:29.918"></status>
</kw>
<msg timestamp="20191120 15:42:29.919" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20191120 15:42:29.912" endtime="20191120 15:42:29.919"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:29.919" level="INFO">2</msg>
<status status="PASS" starttime="20191120 15:42:29.919" endtime="20191120 15:42:29.920"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:29.920" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:29.920" endtime="20191120 15:42:29.920"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:29.921" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:29.921" endtime="20191120 15:42:29.921"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:29.938" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:29.922" endtime="20191120 15:42:29.939"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:31.941" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:29.939" endtime="20191120 15:42:31.941"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:31.944" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:31.942" endtime="20191120 15:42:31.945"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:29.921" endtime="20191120 15:42:31.946"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:29.911" endtime="20191120 15:42:31.947"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:31.953" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:31.954" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:31.952" endtime="20191120 15:42:31.955"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:31.958" endtime="20191120 15:42:31.963"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:31.956" endtime="20191120 15:42:31.964"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:31.969" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:31.968" endtime="20191120 15:42:31.969"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:31.966" endtime="20191120 15:42:31.970"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:31.965" endtime="20191120 15:42:31.970"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:31.955" endtime="20191120 15:42:31.970"></status>
</kw>
<msg timestamp="20191120 15:42:31.971" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20191120 15:42:31.950" endtime="20191120 15:42:31.971"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:31.972" level="INFO">2</msg>
<status status="PASS" starttime="20191120 15:42:31.972" endtime="20191120 15:42:31.973"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:31.974" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 2 --port 2</msg>
<status status="PASS" starttime="20191120 15:42:31.973" endtime="20191120 15:42:31.974"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:31.975" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 2</msg>
<status status="PASS" starttime="20191120 15:42:31.974" endtime="20191120 15:42:31.975"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:32.062" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 2</msg>
<status status="PASS" starttime="20191120 15:42:31.976" endtime="20191120 15:42:32.062"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:34.065" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:32.062" endtime="20191120 15:42:34.066"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:34.069" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:34.068" endtime="20191120 15:42:34.070"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:31.976" endtime="20191120 15:42:34.071"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:31.948" endtime="20191120 15:42:34.072"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:34.079" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:34.080" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:34.078" endtime="20191120 15:42:34.080"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:34.083" endtime="20191120 15:42:34.089"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:34.082" endtime="20191120 15:42:34.090"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:34.098" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:34.098" endtime="20191120 15:42:34.098"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:34.092" endtime="20191120 15:42:34.098"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:34.091" endtime="20191120 15:42:34.098"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:34.081" endtime="20191120 15:42:34.098"></status>
</kw>
<msg timestamp="20191120 15:42:34.098" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20191120 15:42:34.076" endtime="20191120 15:42:34.098"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:34.098" level="INFO">2</msg>
<status status="PASS" starttime="20191120 15:42:34.098" endtime="20191120 15:42:34.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:34.098" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 2 --port 3</msg>
<status status="PASS" starttime="20191120 15:42:34.098" endtime="20191120 15:42:34.098"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:34.098" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 3</msg>
<status status="PASS" starttime="20191120 15:42:34.098" endtime="20191120 15:42:34.098"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:34.128" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 3</msg>
<status status="PASS" starttime="20191120 15:42:34.098" endtime="20191120 15:42:34.128"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:36.129" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:34.128" endtime="20191120 15:42:36.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:36.131" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:36.130" endtime="20191120 15:42:36.131"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:34.098" endtime="20191120 15:42:36.132"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:34.074" endtime="20191120 15:42:36.133"></status>
</kw>
<kw name="Then Click Delete Button" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnDelete}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:42:36.136" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='delete-button']'.</msg>
<status status="PASS" starttime="20191120 15:42:36.135" endtime="20191120 15:42:36.182"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.134" endtime="20191120 15:42:36.182"></status>
</kw>
<kw name="Wait For Page Update" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE UPDATE TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:42:36.285" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20191120 15:42:36.183" endtime="20191120 15:42:36.286"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.183" endtime="20191120 15:42:36.287"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.133" endtime="20191120 15:42:36.288"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;2&quot; &quot;disappeared&quot; in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of Coper panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.294" endtime="20191120 15:42:36.296"></status>
</kw>
<msg timestamp="20191120 15:42:36.297" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 15:42:36.292" endtime="20191120 15:42:36.297"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 15:42:36.300" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 15:42:36.298" endtime="20191120 15:42:36.300"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 15:42:36.303" level="INFO">${input panel} = -Panel 2</msg>
<status status="PASS" starttime="20191120 15:42:36.301" endtime="20191120 15:42:36.303"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 15:42:36.306" level="INFO">${input port} = -Port 2</msg>
<status status="PASS" starttime="20191120 15:42:36.304" endtime="20191120 15:42:36.307"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 15:42:36.310" level="INFO">${input port information} = Rack 1-Panel 2-Port 2</msg>
<status status="PASS" starttime="20191120 15:42:36.308" endtime="20191120 15:42:36.310"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 15:42:36.313" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 15:42:36.311" endtime="20191120 15:42:36.313"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 15:42:36.316" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:36.315" endtime="20191120 15:42:36.316"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:36.335" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20191120 15:42:36.317" endtime="20191120 15:42:36.336"></status>
</kw>
<msg timestamp="20191120 15:42:36.336" level="INFO">${number of lines} = 2</msg>
<status status="PASS" starttime="20191120 15:42:36.317" endtime="20191120 15:42:36.336"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:36.337" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:36.337" endtime="20191120 15:42:36.337"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:42:36.340" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 15:42:36.339" endtime="20191120 15:42:36.340"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:42:36.341" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 15:42:36.341" endtime="20191120 15:42:36.341"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:42:36.343" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:36.342" endtime="20191120 15:42:36.343"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:42:36.344" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:36.343" endtime="20191120 15:42:36.344"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:36.355" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:36.344" endtime="20191120 15:42:36.355"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.356" endtime="20191120 15:42:36.356"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.338" endtime="20191120 15:42:36.356"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:42:36.357" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 15:42:36.357" endtime="20191120 15:42:36.357"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:42:36.358" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 15:42:36.358" endtime="20191120 15:42:36.358"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:42:36.359" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:36.358" endtime="20191120 15:42:36.359"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:42:36.359" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:36.359" endtime="20191120 15:42:36.360"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:36.370" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:36.360" endtime="20191120 15:42:36.370"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.371" endtime="20191120 15:42:36.371"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.357" endtime="20191120 15:42:36.371"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:42:36.372" level="INFO">${index temp} = 3</msg>
<status status="PASS" starttime="20191120 15:42:36.372" endtime="20191120 15:42:36.372"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:42:36.373" level="INFO">${index string} = 3</msg>
<status status="PASS" starttime="20191120 15:42:36.372" endtime="20191120 15:42:36.373"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:42:36.374" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:36.373" endtime="20191120 15:42:36.374"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:42:36.374" level="INFO">//ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:42:36.374" endtime="20191120 15:42:36.374"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:36.385" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:36.375" endtime="20191120 15:42:36.385"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.385" endtime="20191120 15:42:36.386"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.371" endtime="20191120 15:42:36.386"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.338" endtime="20191120 15:42:36.386"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191120 15:42:36.386" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191120 15:42:36.386" endtime="20191120 15:42:36.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.387" endtime="20191120 15:42:36.388"></status>
</kw>
<msg timestamp="20191120 15:42:36.388" level="INFO">${expected value} = 0</msg>
<status status="PASS" starttime="20191120 15:42:36.387" endtime="20191120 15:42:36.388"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.389" endtime="20191120 15:42:36.389"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.388" endtime="20191120 15:42:36.389"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.290" endtime="20191120 15:42:36.389"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;3&quot; &quot;disappeared&quot; in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of Coper panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.391" endtime="20191120 15:42:36.391"></status>
</kw>
<msg timestamp="20191120 15:42:36.391" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 15:42:36.390" endtime="20191120 15:42:36.391"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 15:42:36.392" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 15:42:36.392" endtime="20191120 15:42:36.392"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 15:42:36.393" level="INFO">${input panel} = -Panel 2</msg>
<status status="PASS" starttime="20191120 15:42:36.392" endtime="20191120 15:42:36.393"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 15:42:36.393" level="INFO">${input port} = -Port 3</msg>
<status status="PASS" starttime="20191120 15:42:36.393" endtime="20191120 15:42:36.394"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 15:42:36.394" level="INFO">${input port information} = Rack 1-Panel 2-Port 3</msg>
<status status="PASS" starttime="20191120 15:42:36.394" endtime="20191120 15:42:36.394"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 15:42:36.395" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 15:42:36.395" endtime="20191120 15:42:36.395"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 15:42:36.396" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:36.395" endtime="20191120 15:42:36.396"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:36.403" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20191120 15:42:36.397" endtime="20191120 15:42:36.403"></status>
</kw>
<msg timestamp="20191120 15:42:36.404" level="INFO">${number of lines} = 2</msg>
<status status="PASS" starttime="20191120 15:42:36.396" endtime="20191120 15:42:36.404"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:36.404" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:36.404" endtime="20191120 15:42:36.405"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:42:36.406" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 15:42:36.405" endtime="20191120 15:42:36.406"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:42:36.406" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 15:42:36.406" endtime="20191120 15:42:36.407"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:42:36.407" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:36.407" endtime="20191120 15:42:36.407"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:42:36.408" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:36.408" endtime="20191120 15:42:36.408"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:36.418" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:36.408" endtime="20191120 15:42:36.419"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.419" endtime="20191120 15:42:36.419"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.405" endtime="20191120 15:42:36.420"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:42:36.420" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 15:42:36.420" endtime="20191120 15:42:36.421"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:42:36.421" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 15:42:36.421" endtime="20191120 15:42:36.421"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:42:36.422" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:36.422" endtime="20191120 15:42:36.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:42:36.423" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:36.422" endtime="20191120 15:42:36.423"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:36.434" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:36.423" endtime="20191120 15:42:36.434"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.434" endtime="20191120 15:42:36.435"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.420" endtime="20191120 15:42:36.435"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:42:36.436" level="INFO">${index temp} = 3</msg>
<status status="PASS" starttime="20191120 15:42:36.435" endtime="20191120 15:42:36.436"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:42:36.436" level="INFO">${index string} = 3</msg>
<status status="PASS" starttime="20191120 15:42:36.436" endtime="20191120 15:42:36.437"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:42:36.437" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:36.437" endtime="20191120 15:42:36.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:42:36.438" level="INFO">//ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 2-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:42:36.438" endtime="20191120 15:42:36.438"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:42:36.450" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:42:36.438" endtime="20191120 15:42:36.450"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.450" endtime="20191120 15:42:36.451"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.435" endtime="20191120 15:42:36.451"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.405" endtime="20191120 15:42:36.451"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191120 15:42:36.452" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191120 15:42:36.451" endtime="20191120 15:42:36.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.453" endtime="20191120 15:42:36.453"></status>
</kw>
<msg timestamp="20191120 15:42:36.453" level="INFO">${expected value} = 0</msg>
<status status="PASS" starttime="20191120 15:42:36.452" endtime="20191120 15:42:36.453"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.454" endtime="20191120 15:42:36.454"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.453" endtime="20191120 15:42:36.454"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.390" endtime="20191120 15:42:36.455"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:36.457" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:36.457" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:36.456" endtime="20191120 15:42:36.457"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:36.457" endtime="20191120 15:42:36.459"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.457" endtime="20191120 15:42:36.459"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:36.461" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:36.461" endtime="20191120 15:42:36.461"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.459" endtime="20191120 15:42:36.461"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.459" endtime="20191120 15:42:36.461"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.457" endtime="20191120 15:42:36.462"></status>
</kw>
<msg timestamp="20191120 15:42:36.462" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20191120 15:42:36.456" endtime="20191120 15:42:36.462"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:36.463" level="INFO">2</msg>
<status status="PASS" starttime="20191120 15:42:36.462" endtime="20191120 15:42:36.463"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:36.463" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:36.463" endtime="20191120 15:42:36.464"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:36.464" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:36.464" endtime="20191120 15:42:36.464"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:36.486" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:36.465" endtime="20191120 15:42:36.486"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:38.489" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:36.487" endtime="20191120 15:42:38.489"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:38.493" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:38.491" endtime="20191120 15:42:38.493"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.464" endtime="20191120 15:42:38.494"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:36.455" endtime="20191120 15:42:38.495"></status>
</kw>
<kw name="Then Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:38.502" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:38.503" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:38.501" endtime="20191120 15:42:38.503"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:38.506" endtime="20191120 15:42:38.510"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:38.505" endtime="20191120 15:42:38.510"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:38.516" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:38.515" endtime="20191120 15:42:38.517"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:38.511" endtime="20191120 15:42:38.517"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:38.510" endtime="20191120 15:42:38.517"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:38.504" endtime="20191120 15:42:38.518"></status>
</kw>
<msg timestamp="20191120 15:42:38.519" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20191120 15:42:38.499" endtime="20191120 15:42:38.519"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:38.521" level="INFO">2</msg>
<status status="PASS" starttime="20191120 15:42:38.520" endtime="20191120 15:42:38.521"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:38.523" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 2 --port 1</msg>
<status status="PASS" starttime="20191120 15:42:38.522" endtime="20191120 15:42:38.523"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:38.524" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 1</msg>
<status status="PASS" starttime="20191120 15:42:38.524" endtime="20191120 15:42:38.525"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:38.549" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 1</msg>
<status status="PASS" starttime="20191120 15:42:38.526" endtime="20191120 15:42:38.550"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:40.552" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:38.550" endtime="20191120 15:42:40.552"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:40.553" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:40.552" endtime="20191120 15:42:40.553"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:38.525" endtime="20191120 15:42:40.553"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:38.497" endtime="20191120 15:42:40.554"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 15:42:40.563" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191120 15:42:40.554" endtime="20191120 15:42:40.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:42:40.565" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191120 15:42:40.565" endtime="20191120 15:42:40.603"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:40.564" endtime="20191120 15:42:40.603"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:42:41.108" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:42:40.604" endtime="20191120 15:42:41.108"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:40.604" endtime="20191120 15:42:41.108"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:40.564" endtime="20191120 15:42:41.111"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:40.563" endtime="20191120 15:42:41.111"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 15:42:41.140" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191120 15:42:41.111" endtime="20191120 15:42:41.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:42:41.148" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 15:42:41.148" endtime="20191120 15:42:41.201"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:41.140" endtime="20191120 15:42:41.201"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:42:41.708" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:42:41.202" endtime="20191120 15:42:41.708"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:41.202" endtime="20191120 15:42:41.708"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:41.140" endtime="20191120 15:42:41.708"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:41.140" endtime="20191120 15:42:41.708"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191120 15:42:41.708" endtime="20191120 15:42:43.858"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:40.554" endtime="20191120 15:42:43.858"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:14.652" endtime="20191120 15:42:43.858" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t3" name="INSERT_END_A_05_06_Verify that imVision X will remove all unplugged ports from the End A list, and turn off all port LEDs after selecting Delete button in the bottom bar if doing on a LC Fiber panel">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:43.871" endtime="20191120 15:42:43.871"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191120 15:42:43.871" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191120 15:42:45.688" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191120 15:42:43.871" endtime="20191120 15:42:45.689"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:43.868" endtime="20191120 15:42:45.691"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191120 15:42:45.695" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191120 15:42:45.694" endtime="20191120 15:42:45.696"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191120 15:42:45.698" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191120 15:42:45.697" endtime="20191120 15:42:50.062"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191120 15:42:50.063" endtime="20191120 15:42:51.196"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:42:51.697" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:42:51.196" endtime="20191120 15:42:51.697"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 15:42:51.738" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191120 15:42:51.699" endtime="20191120 15:42:51.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:51.739" endtime="20191120 15:42:51.740"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191120 15:42:51.759" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191120 15:42:51.740" endtime="20191120 15:42:51.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:51.760" endtime="20191120 15:42:51.760"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 15:42:51.775" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191120 15:42:51.761" endtime="20191120 15:42:51.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:51.775" endtime="20191120 15:42:51.776"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:51.698" endtime="20191120 15:42:51.776"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:42:51.778" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 15:42:51.777" endtime="20191120 15:42:51.889"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:51.777" endtime="20191120 15:42:51.889"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:42:52.408" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:42:51.891" endtime="20191120 15:42:52.408"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:51.890" endtime="20191120 15:42:52.408"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:51.776" endtime="20191120 15:42:52.408"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:45.692" endtime="20191120 15:42:52.408"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:43.868" endtime="20191120 15:42:52.408"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191120 15:42:52.408" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191120 15:42:52.408" endtime="20191120 15:42:52.488"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:42:52.998" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:42:52.489" endtime="20191120 15:42:52.998"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:52.488" endtime="20191120 15:42:52.998"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:52.408" endtime="20191120 15:42:52.998"></status>
</kw>
<kw name="When Plugin LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get LC Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:52.998" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:52.998" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:52.998" endtime="20191120 15:42:52.998"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:52.998" endtime="20191120 15:42:52.998"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:52.998" endtime="20191120 15:42:52.998"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:52.998" endtime="20191120 15:42:52.998"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:52.998" endtime="20191120 15:42:52.998"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:52.998" endtime="20191120 15:42:52.998"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:52.998" endtime="20191120 15:42:52.998"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:53.008" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:53.008" endtime="20191120 15:42:53.008"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:52.998" endtime="20191120 15:42:53.008"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:52.998" endtime="20191120 15:42:53.008"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:52.998" endtime="20191120 15:42:53.008"></status>
</kw>
<msg timestamp="20191120 15:42:53.008" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20191120 15:42:52.998" endtime="20191120 15:42:53.008"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:53.008" level="INFO">4</msg>
<status status="PASS" starttime="20191120 15:42:53.008" endtime="20191120 15:42:53.008"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:53.008" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20191120 15:42:53.008" endtime="20191120 15:42:53.008"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:53.008" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20191120 15:42:53.008" endtime="20191120 15:42:53.008"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:53.038" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20191120 15:42:53.008" endtime="20191120 15:42:53.038"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:55.039" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:53.038" endtime="20191120 15:42:55.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:55.043" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:55.041" endtime="20191120 15:42:55.044"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:53.008" endtime="20191120 15:42:55.045"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:52.998" endtime="20191120 15:42:55.046"></status>
</kw>
<kw name="When Plugin LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get LC Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:55.053" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:55.054" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:55.052" endtime="20191120 15:42:55.055"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:55.058" endtime="20191120 15:42:55.062"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:55.056" endtime="20191120 15:42:55.063"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:55.065" endtime="20191120 15:42:55.067"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:55.064" endtime="20191120 15:42:55.068"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:55.069" endtime="20191120 15:42:55.071"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:55.068" endtime="20191120 15:42:55.071"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:55.075" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:55.074" endtime="20191120 15:42:55.075"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:55.072" endtime="20191120 15:42:55.075"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:55.071" endtime="20191120 15:42:55.076"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:55.055" endtime="20191120 15:42:55.076"></status>
</kw>
<msg timestamp="20191120 15:42:55.077" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20191120 15:42:55.049" endtime="20191120 15:42:55.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:55.078" level="INFO">4</msg>
<status status="PASS" starttime="20191120 15:42:55.078" endtime="20191120 15:42:55.079"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:55.080" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 2</msg>
<status status="PASS" starttime="20191120 15:42:55.079" endtime="20191120 15:42:55.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:55.081" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 2</msg>
<status status="PASS" starttime="20191120 15:42:55.081" endtime="20191120 15:42:55.081"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:55.099" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 2</msg>
<status status="PASS" starttime="20191120 15:42:55.083" endtime="20191120 15:42:55.100"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:57.128" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:55.100" endtime="20191120 15:42:57.128"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:57.131" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:57.131" endtime="20191120 15:42:57.131"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:55.082" endtime="20191120 15:42:57.131"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:55.047" endtime="20191120 15:42:57.131"></status>
</kw>
<kw name="When Plugin LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get LC Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:57.138" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:57.138" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:57.138" endtime="20191120 15:42:57.138"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:57.138" endtime="20191120 15:42:57.151"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:57.138" endtime="20191120 15:42:57.151"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:57.151" endtime="20191120 15:42:57.158"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:57.151" endtime="20191120 15:42:57.158"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:57.158" endtime="20191120 15:42:57.158"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:57.158" endtime="20191120 15:42:57.168"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:57.168" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:57.168" endtime="20191120 15:42:57.168"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:57.168" endtime="20191120 15:42:57.168"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:57.168" endtime="20191120 15:42:57.168"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:57.138" endtime="20191120 15:42:57.168"></status>
</kw>
<msg timestamp="20191120 15:42:57.168" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20191120 15:42:57.138" endtime="20191120 15:42:57.168"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:57.168" level="INFO">4</msg>
<status status="PASS" starttime="20191120 15:42:57.168" endtime="20191120 15:42:57.168"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:57.178" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 3</msg>
<status status="PASS" starttime="20191120 15:42:57.168" endtime="20191120 15:42:57.178"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:57.179" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 3</msg>
<status status="PASS" starttime="20191120 15:42:57.179" endtime="20191120 15:42:57.179"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:57.308" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 3</msg>
<status status="PASS" starttime="20191120 15:42:57.179" endtime="20191120 15:42:57.308"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:42:59.309" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:57.308" endtime="20191120 15:42:59.309"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:42:59.310" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:59.310" endtime="20191120 15:42:59.310"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:57.179" endtime="20191120 15:42:59.311"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:57.131" endtime="20191120 15:42:59.311"></status>
</kw>
<kw name="When Plugin LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get LC Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:42:59.313" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:42:59.313" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:42:59.313" endtime="20191120 15:42:59.313"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:59.314" endtime="20191120 15:42:59.315"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:59.314" endtime="20191120 15:42:59.315"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:59.316" endtime="20191120 15:42:59.317"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:59.316" endtime="20191120 15:42:59.317"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:42:59.318" endtime="20191120 15:42:59.319"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:59.317" endtime="20191120 15:42:59.319"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:42:59.322" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:42:59.321" endtime="20191120 15:42:59.322"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:59.320" endtime="20191120 15:42:59.322"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:59.319" endtime="20191120 15:42:59.322"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:59.313" endtime="20191120 15:42:59.322"></status>
</kw>
<msg timestamp="20191120 15:42:59.323" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20191120 15:42:59.312" endtime="20191120 15:42:59.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:42:59.324" level="INFO">4</msg>
<status status="PASS" starttime="20191120 15:42:59.323" endtime="20191120 15:42:59.324"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:42:59.324" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:59.324" endtime="20191120 15:42:59.325"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:42:59.325" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:59.325" endtime="20191120 15:42:59.325"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:42:59.398" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20191120 15:42:59.326" endtime="20191120 15:42:59.398"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:01.408" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:42:59.399" endtime="20191120 15:43:01.408"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:01.408" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:01.408" endtime="20191120 15:43:01.408"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:59.326" endtime="20191120 15:43:01.408"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:59.312" endtime="20191120 15:43:01.408"></status>
</kw>
<kw name="When Plugout LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get LC Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:01.413" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:01.413" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:01.413" endtime="20191120 15:43:01.413"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:01.413" endtime="20191120 15:43:01.413"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:01.413" endtime="20191120 15:43:01.413"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:01.413" endtime="20191120 15:43:01.418"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:01.413" endtime="20191120 15:43:01.418"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:01.418" endtime="20191120 15:43:01.418"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:01.418" endtime="20191120 15:43:01.418"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:01.422" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:01.422" endtime="20191120 15:43:01.422"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:01.418" endtime="20191120 15:43:01.422"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:01.418" endtime="20191120 15:43:01.422"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:01.413" endtime="20191120 15:43:01.422"></status>
</kw>
<msg timestamp="20191120 15:43:01.422" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20191120 15:43:01.413" endtime="20191120 15:43:01.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:01.422" level="INFO">4</msg>
<status status="PASS" starttime="20191120 15:43:01.422" endtime="20191120 15:43:01.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:01.422" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 2</msg>
<status status="PASS" starttime="20191120 15:43:01.422" endtime="20191120 15:43:01.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:01.422" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 2</msg>
<status status="PASS" starttime="20191120 15:43:01.422" endtime="20191120 15:43:01.422"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:01.488" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 2</msg>
<status status="PASS" starttime="20191120 15:43:01.422" endtime="20191120 15:43:01.488"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:03.509" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:01.488" endtime="20191120 15:43:03.509"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:03.510" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:03.509" endtime="20191120 15:43:03.510"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:01.422" endtime="20191120 15:43:03.511"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:01.413" endtime="20191120 15:43:03.511"></status>
</kw>
<kw name="When Plugout LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get LC Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:03.513" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:03.513" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:03.512" endtime="20191120 15:43:03.513"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:03.514" endtime="20191120 15:43:03.515"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:03.513" endtime="20191120 15:43:03.515"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:03.516" endtime="20191120 15:43:03.517"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:03.515" endtime="20191120 15:43:03.517"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:03.518" endtime="20191120 15:43:03.519"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:03.517" endtime="20191120 15:43:03.519"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:03.521" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:03.521" endtime="20191120 15:43:03.521"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:03.519" endtime="20191120 15:43:03.521"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:03.519" endtime="20191120 15:43:03.522"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:03.513" endtime="20191120 15:43:03.522"></status>
</kw>
<msg timestamp="20191120 15:43:03.522" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20191120 15:43:03.512" endtime="20191120 15:43:03.522"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:03.523" level="INFO">4</msg>
<status status="PASS" starttime="20191120 15:43:03.523" endtime="20191120 15:43:03.523"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:03.524" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 3</msg>
<status status="PASS" starttime="20191120 15:43:03.524" endtime="20191120 15:43:03.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:03.525" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 3</msg>
<status status="PASS" starttime="20191120 15:43:03.524" endtime="20191120 15:43:03.525"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:03.543" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 3</msg>
<status status="PASS" starttime="20191120 15:43:03.526" endtime="20191120 15:43:03.544"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:05.545" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:03.544" endtime="20191120 15:43:05.545"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:05.546" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:05.545" endtime="20191120 15:43:05.546"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:03.525" endtime="20191120 15:43:05.546"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:03.511" endtime="20191120 15:43:05.547"></status>
</kw>
<kw name="Then Click Delete Button" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnDelete}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:43:05.548" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='delete-button']'.</msg>
<status status="PASS" starttime="20191120 15:43:05.548" endtime="20191120 15:43:05.595"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.548" endtime="20191120 15:43:05.596"></status>
</kw>
<kw name="Wait For Page Update" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE UPDATE TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:43:05.699" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20191120 15:43:05.596" endtime="20191120 15:43:05.699"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.596" endtime="20191120 15:43:05.699"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.547" endtime="20191120 15:43:05.700"></status>
</kw>
<kw name="Then Check to see if Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;2&quot; &quot;disappeared&quot; in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.702" endtime="20191120 15:43:05.702"></status>
</kw>
<msg timestamp="20191120 15:43:05.702" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 15:43:05.701" endtime="20191120 15:43:05.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 15:43:05.703" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 15:43:05.703" endtime="20191120 15:43:05.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 15:43:05.704" level="INFO">${input panel} = -Panel 3</msg>
<status status="PASS" starttime="20191120 15:43:05.703" endtime="20191120 15:43:05.704"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 15:43:05.704" level="INFO">${input port} = -Port 2</msg>
<status status="PASS" starttime="20191120 15:43:05.704" endtime="20191120 15:43:05.704"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 15:43:05.705" level="INFO">${input port information} = Rack 1-Panel 3-Port 2</msg>
<status status="PASS" starttime="20191120 15:43:05.705" endtime="20191120 15:43:05.705"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 15:43:05.706" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 15:43:05.706" endtime="20191120 15:43:05.706"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 15:43:05.707" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:05.706" endtime="20191120 15:43:05.707"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:05.720" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20191120 15:43:05.708" endtime="20191120 15:43:05.720"></status>
</kw>
<msg timestamp="20191120 15:43:05.721" level="INFO">${number of lines} = 2</msg>
<status status="PASS" starttime="20191120 15:43:05.707" endtime="20191120 15:43:05.721"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:05.722" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:05.721" endtime="20191120 15:43:05.722"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:43:05.723" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 15:43:05.722" endtime="20191120 15:43:05.723"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:43:05.724" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 15:43:05.723" endtime="20191120 15:43:05.724"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:43:05.724" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:05.724" endtime="20191120 15:43:05.724"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:43:05.725" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:05.725" endtime="20191120 15:43:05.725"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:05.737" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:05.725" endtime="20191120 15:43:05.737"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.738" endtime="20191120 15:43:05.738"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.722" endtime="20191120 15:43:05.738"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:43:05.739" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 15:43:05.739" endtime="20191120 15:43:05.739"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:43:05.740" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 15:43:05.740" endtime="20191120 15:43:05.740"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:43:05.741" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:05.740" endtime="20191120 15:43:05.741"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:43:05.741" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:05.741" endtime="20191120 15:43:05.742"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:05.753" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:05.742" endtime="20191120 15:43:05.753"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.753" endtime="20191120 15:43:05.754"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.739" endtime="20191120 15:43:05.754"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:43:05.755" level="INFO">${index temp} = 3</msg>
<status status="PASS" starttime="20191120 15:43:05.754" endtime="20191120 15:43:05.755"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:43:05.756" level="INFO">${index string} = 3</msg>
<status status="PASS" starttime="20191120 15:43:05.755" endtime="20191120 15:43:05.756"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:43:05.757" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:05.756" endtime="20191120 15:43:05.757"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:43:05.757" level="INFO">//ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:05.757" endtime="20191120 15:43:05.757"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:05.768" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:05.758" endtime="20191120 15:43:05.768"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.769" endtime="20191120 15:43:05.769"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.754" endtime="20191120 15:43:05.769"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.722" endtime="20191120 15:43:05.770"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191120 15:43:05.770" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191120 15:43:05.770" endtime="20191120 15:43:05.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.771" endtime="20191120 15:43:05.772"></status>
</kw>
<msg timestamp="20191120 15:43:05.772" level="INFO">${expected value} = 0</msg>
<status status="PASS" starttime="20191120 15:43:05.771" endtime="20191120 15:43:05.772"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.773" endtime="20191120 15:43:05.773"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.772" endtime="20191120 15:43:05.773"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.700" endtime="20191120 15:43:05.773"></status>
</kw>
<kw name="Then Check to see if Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;3&quot; &quot;disappeared&quot; in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.775" endtime="20191120 15:43:05.775"></status>
</kw>
<msg timestamp="20191120 15:43:05.775" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 15:43:05.774" endtime="20191120 15:43:05.775"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 15:43:05.776" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 15:43:05.775" endtime="20191120 15:43:05.776"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 15:43:05.776" level="INFO">${input panel} = -Panel 3</msg>
<status status="PASS" starttime="20191120 15:43:05.776" endtime="20191120 15:43:05.777"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 15:43:05.777" level="INFO">${input port} = -Port 3</msg>
<status status="PASS" starttime="20191120 15:43:05.777" endtime="20191120 15:43:05.777"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 15:43:05.778" level="INFO">${input port information} = Rack 1-Panel 3-Port 3</msg>
<status status="PASS" starttime="20191120 15:43:05.777" endtime="20191120 15:43:05.778"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 15:43:05.779" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 15:43:05.778" endtime="20191120 15:43:05.779"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 15:43:05.779" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:05.779" endtime="20191120 15:43:05.779"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:05.787" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20191120 15:43:05.780" endtime="20191120 15:43:05.787"></status>
</kw>
<msg timestamp="20191120 15:43:05.787" level="INFO">${number of lines} = 2</msg>
<status status="PASS" starttime="20191120 15:43:05.780" endtime="20191120 15:43:05.787"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:05.788" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:05.788" endtime="20191120 15:43:05.788"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:43:05.789" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 15:43:05.789" endtime="20191120 15:43:05.789"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:43:05.790" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 15:43:05.790" endtime="20191120 15:43:05.790"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:43:05.791" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:05.790" endtime="20191120 15:43:05.791"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:43:05.791" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:05.791" endtime="20191120 15:43:05.792"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:05.802" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:05.792" endtime="20191120 15:43:05.803"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.803" endtime="20191120 15:43:05.803"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.789" endtime="20191120 15:43:05.804"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:43:05.804" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 15:43:05.804" endtime="20191120 15:43:05.805"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:43:05.805" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 15:43:05.805" endtime="20191120 15:43:05.806"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:43:05.806" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:05.806" endtime="20191120 15:43:05.806"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:43:05.807" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:05.807" endtime="20191120 15:43:05.807"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:05.818" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:05.807" endtime="20191120 15:43:05.818"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.818" endtime="20191120 15:43:05.819"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.804" endtime="20191120 15:43:05.819"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:43:05.820" level="INFO">${index temp} = 3</msg>
<status status="PASS" starttime="20191120 15:43:05.820" endtime="20191120 15:43:05.820"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:43:05.821" level="INFO">${index string} = 3</msg>
<status status="PASS" starttime="20191120 15:43:05.820" endtime="20191120 15:43:05.821"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:43:05.822" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:05.821" endtime="20191120 15:43:05.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:43:05.822" level="INFO">//ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 3-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:05.822" endtime="20191120 15:43:05.822"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:05.834" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:05.823" endtime="20191120 15:43:05.834"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.834" endtime="20191120 15:43:05.835"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.819" endtime="20191120 15:43:05.835"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.788" endtime="20191120 15:43:05.835"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191120 15:43:05.836" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191120 15:43:05.835" endtime="20191120 15:43:05.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.837" endtime="20191120 15:43:05.837"></status>
</kw>
<msg timestamp="20191120 15:43:05.837" level="INFO">${expected value} = 0</msg>
<status status="PASS" starttime="20191120 15:43:05.836" endtime="20191120 15:43:05.837"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.838" endtime="20191120 15:43:05.838"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.838" endtime="20191120 15:43:05.839"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.774" endtime="20191120 15:43:05.839"></status>
</kw>
<kw name="Then Plugout LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get LC Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:05.840" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:05.841" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:05.840" endtime="20191120 15:43:05.841"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.841" endtime="20191120 15:43:05.842"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.841" endtime="20191120 15:43:05.843"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.843" endtime="20191120 15:43:05.844"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.843" endtime="20191120 15:43:05.844"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:05.845" endtime="20191120 15:43:05.846"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.844" endtime="20191120 15:43:05.846"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:05.848" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:05.848" endtime="20191120 15:43:05.848"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.846" endtime="20191120 15:43:05.848"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.846" endtime="20191120 15:43:05.849"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.841" endtime="20191120 15:43:05.849"></status>
</kw>
<msg timestamp="20191120 15:43:05.849" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20191120 15:43:05.840" endtime="20191120 15:43:05.849"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:05.850" level="INFO">4</msg>
<status status="PASS" starttime="20191120 15:43:05.850" endtime="20191120 15:43:05.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:05.851" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20191120 15:43:05.850" endtime="20191120 15:43:05.851"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:05.851" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20191120 15:43:05.851" endtime="20191120 15:43:05.851"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:05.869" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20191120 15:43:05.852" endtime="20191120 15:43:05.870"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:07.871" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:05.870" endtime="20191120 15:43:07.871"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:07.872" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:07.871" endtime="20191120 15:43:07.872"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.852" endtime="20191120 15:43:07.872"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:05.839" endtime="20191120 15:43:07.873"></status>
</kw>
<kw name="Then Plugout LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get LC Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:07.874" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:07.875" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:07.874" endtime="20191120 15:43:07.875"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:07.875" endtime="20191120 15:43:07.877"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:07.875" endtime="20191120 15:43:07.877"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:07.877" endtime="20191120 15:43:07.879"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:07.877" endtime="20191120 15:43:07.879"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:07.879" endtime="20191120 15:43:07.880"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:07.879" endtime="20191120 15:43:07.881"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:07.883" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:07.882" endtime="20191120 15:43:07.883"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:07.881" endtime="20191120 15:43:07.883"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:07.881" endtime="20191120 15:43:07.883"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:07.875" endtime="20191120 15:43:07.883"></status>
</kw>
<msg timestamp="20191120 15:43:07.884" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20191120 15:43:07.874" endtime="20191120 15:43:07.884"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:07.884" level="INFO">4</msg>
<status status="PASS" starttime="20191120 15:43:07.884" endtime="20191120 15:43:07.884"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:07.885" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20191120 15:43:07.885" endtime="20191120 15:43:07.885"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:07.886" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20191120 15:43:07.885" endtime="20191120 15:43:07.886"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:07.921" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20191120 15:43:07.887" endtime="20191120 15:43:07.922"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:09.928" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:07.922" endtime="20191120 15:43:09.928"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:09.928" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:09.928" endtime="20191120 15:43:09.928"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:07.886" endtime="20191120 15:43:09.928"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:07.873" endtime="20191120 15:43:09.928"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 15:43:09.938" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191120 15:43:09.928" endtime="20191120 15:43:09.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:43:09.938" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191120 15:43:09.938" endtime="20191120 15:43:09.976"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:09.938" endtime="20191120 15:43:09.976"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:43:10.480" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:43:09.977" endtime="20191120 15:43:10.480"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:09.977" endtime="20191120 15:43:10.480"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:09.938" endtime="20191120 15:43:10.481"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:09.938" endtime="20191120 15:43:10.481"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 15:43:10.490" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191120 15:43:10.481" endtime="20191120 15:43:10.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:43:10.492" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 15:43:10.492" endtime="20191120 15:43:10.523"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:10.492" endtime="20191120 15:43:10.523"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:43:11.028" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:43:10.524" endtime="20191120 15:43:11.028"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:10.523" endtime="20191120 15:43:11.028"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:10.491" endtime="20191120 15:43:11.028"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:10.491" endtime="20191120 15:43:11.028"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191120 15:43:11.028" endtime="20191120 15:43:13.148"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:09.928" endtime="20191120 15:43:13.148"></status>
</kw>
<status status="PASS" starttime="20191120 15:42:43.863" endtime="20191120 15:43:13.149" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t4" name="INSERT_END_A_05_08_Verify that imVision X will remove all unplugged ports from the End A list, and turn off all port LEDs after selecting Delete button in the bottom bar if doing on a HDF panel">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:13.151" endtime="20191120 15:43:13.152"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191120 15:43:13.152" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191120 15:43:14.998" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191120 15:43:13.152" endtime="20191120 15:43:14.998"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:13.151" endtime="20191120 15:43:14.998"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191120 15:43:14.998" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191120 15:43:14.998" endtime="20191120 15:43:14.998"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191120 15:43:14.998" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191120 15:43:14.998" endtime="20191120 15:43:19.050"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191120 15:43:19.050" endtime="20191120 15:43:20.168"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:43:20.668" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:43:20.168" endtime="20191120 15:43:20.668"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 15:43:20.678" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191120 15:43:20.668" endtime="20191120 15:43:20.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:20.678" endtime="20191120 15:43:20.678"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191120 15:43:20.691" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191120 15:43:20.678" endtime="20191120 15:43:20.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:20.691" endtime="20191120 15:43:20.691"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 15:43:20.698" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191120 15:43:20.691" endtime="20191120 15:43:20.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:20.698" endtime="20191120 15:43:20.698"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:20.668" endtime="20191120 15:43:20.698"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:43:20.698" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 15:43:20.698" endtime="20191120 15:43:20.797"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:20.698" endtime="20191120 15:43:20.797"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:43:21.299" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:43:20.798" endtime="20191120 15:43:21.299"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:20.797" endtime="20191120 15:43:21.299"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:20.698" endtime="20191120 15:43:21.300"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:14.998" endtime="20191120 15:43:21.300"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:13.150" endtime="20191120 15:43:21.300"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191120 15:43:21.302" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191120 15:43:21.301" endtime="20191120 15:43:21.348"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:43:21.850" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:43:21.349" endtime="20191120 15:43:21.850"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:21.349" endtime="20191120 15:43:21.850"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:21.301" endtime="20191120 15:43:21.850"></status>
</kw>
<kw name="When Plugin HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get HDF Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:21.853" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:21.853" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:21.852" endtime="20191120 15:43:21.853"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:21.854" endtime="20191120 15:43:21.855"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:21.854" endtime="20191120 15:43:21.855"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:21.856" endtime="20191120 15:43:21.857"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:21.856" endtime="20191120 15:43:21.857"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:21.858" endtime="20191120 15:43:21.859"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:21.858" endtime="20191120 15:43:21.860"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:21.860" endtime="20191120 15:43:21.861"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:21.860" endtime="20191120 15:43:21.862"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:21.864" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:21.863" endtime="20191120 15:43:21.864"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:21.862" endtime="20191120 15:43:21.864"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:21.862" endtime="20191120 15:43:21.864"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:21.853" endtime="20191120 15:43:21.864"></status>
</kw>
<msg timestamp="20191120 15:43:21.865" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20191120 15:43:21.851" endtime="20191120 15:43:21.865"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:21.866" level="INFO">5</msg>
<status status="PASS" starttime="20191120 15:43:21.865" endtime="20191120 15:43:21.866"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:21.866" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20191120 15:43:21.866" endtime="20191120 15:43:21.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:21.867" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20191120 15:43:21.867" endtime="20191120 15:43:21.867"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:21.878" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20191120 15:43:21.868" endtime="20191120 15:43:21.878"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:23.889" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:21.879" endtime="20191120 15:43:23.889"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:23.889" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:23.889" endtime="20191120 15:43:23.889"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:21.867" endtime="20191120 15:43:23.889"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:21.851" endtime="20191120 15:43:23.891"></status>
</kw>
<kw name="When Plugin HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get HDF Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:23.891" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:23.891" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:23.891" endtime="20191120 15:43:23.891"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:23.891" endtime="20191120 15:43:23.891"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:23.891" endtime="20191120 15:43:23.891"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:23.891" endtime="20191120 15:43:23.891"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:23.891" endtime="20191120 15:43:23.891"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:23.891" endtime="20191120 15:43:23.899"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:23.891" endtime="20191120 15:43:23.899"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:23.899" endtime="20191120 15:43:23.899"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:23.899" endtime="20191120 15:43:23.899"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:23.902" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:23.902" endtime="20191120 15:43:23.902"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:23.899" endtime="20191120 15:43:23.902"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:23.899" endtime="20191120 15:43:23.902"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:23.891" endtime="20191120 15:43:23.902"></status>
</kw>
<msg timestamp="20191120 15:43:23.902" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20191120 15:43:23.891" endtime="20191120 15:43:23.902"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:23.902" level="INFO">5</msg>
<status status="PASS" starttime="20191120 15:43:23.902" endtime="20191120 15:43:23.902"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:23.902" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 2</msg>
<status status="PASS" starttime="20191120 15:43:23.902" endtime="20191120 15:43:23.902"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:23.902" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 2</msg>
<status status="PASS" starttime="20191120 15:43:23.902" endtime="20191120 15:43:23.902"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:24.009" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 2</msg>
<status status="PASS" starttime="20191120 15:43:23.902" endtime="20191120 15:43:24.009"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:26.009" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:24.009" endtime="20191120 15:43:26.009"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:26.010" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:26.009" endtime="20191120 15:43:26.010"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:23.902" endtime="20191120 15:43:26.010"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:23.891" endtime="20191120 15:43:26.011"></status>
</kw>
<kw name="When Plugin HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get HDF Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:26.012" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:26.013" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:26.012" endtime="20191120 15:43:26.013"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:26.013" endtime="20191120 15:43:26.015"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:26.013" endtime="20191120 15:43:26.015"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:26.016" endtime="20191120 15:43:26.017"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:26.015" endtime="20191120 15:43:26.017"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:26.018" endtime="20191120 15:43:26.019"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:26.017" endtime="20191120 15:43:26.019"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:26.020" endtime="20191120 15:43:26.021"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:26.019" endtime="20191120 15:43:26.021"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:26.023" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:26.023" endtime="20191120 15:43:26.023"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:26.022" endtime="20191120 15:43:26.024"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:26.021" endtime="20191120 15:43:26.024"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:26.013" endtime="20191120 15:43:26.024"></status>
</kw>
<msg timestamp="20191120 15:43:26.024" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20191120 15:43:26.011" endtime="20191120 15:43:26.025"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:26.025" level="INFO">5</msg>
<status status="PASS" starttime="20191120 15:43:26.025" endtime="20191120 15:43:26.025"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:26.026" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 3</msg>
<status status="PASS" starttime="20191120 15:43:26.026" endtime="20191120 15:43:26.026"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:26.027" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 3</msg>
<status status="PASS" starttime="20191120 15:43:26.026" endtime="20191120 15:43:26.027"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:26.060" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 3</msg>
<status status="PASS" starttime="20191120 15:43:26.027" endtime="20191120 15:43:26.061"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:28.078" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:26.061" endtime="20191120 15:43:28.079"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:28.080" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:28.079" endtime="20191120 15:43:28.080"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:26.027" endtime="20191120 15:43:28.080"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:26.011" endtime="20191120 15:43:28.081"></status>
</kw>
<kw name="When Plugin HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get HDF Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:28.083" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:28.083" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:28.082" endtime="20191120 15:43:28.083"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:28.084" endtime="20191120 15:43:28.085"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:28.083" endtime="20191120 15:43:28.085"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:28.086" endtime="20191120 15:43:28.087"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:28.086" endtime="20191120 15:43:28.088"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:28.088" endtime="20191120 15:43:28.089"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:28.088" endtime="20191120 15:43:28.090"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:28.090" endtime="20191120 15:43:28.092"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:28.090" endtime="20191120 15:43:28.092"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:28.094" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:28.094" endtime="20191120 15:43:28.094"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:28.092" endtime="20191120 15:43:28.094"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:28.092" endtime="20191120 15:43:28.095"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:28.083" endtime="20191120 15:43:28.095"></status>
</kw>
<msg timestamp="20191120 15:43:28.095" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20191120 15:43:28.081" endtime="20191120 15:43:28.095"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:28.096" level="INFO">5</msg>
<status status="PASS" starttime="20191120 15:43:28.096" endtime="20191120 15:43:28.096"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:28.097" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20191120 15:43:28.097" endtime="20191120 15:43:28.097"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:28.098" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20191120 15:43:28.097" endtime="20191120 15:43:28.098"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:28.114" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20191120 15:43:28.099" endtime="20191120 15:43:28.115"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:30.115" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:28.115" endtime="20191120 15:43:30.115"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:30.116" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:30.115" endtime="20191120 15:43:30.116"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:28.098" endtime="20191120 15:43:30.116"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:28.081" endtime="20191120 15:43:30.117"></status>
</kw>
<kw name="When Plugout HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get HDF Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:30.119" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:30.119" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:30.118" endtime="20191120 15:43:30.119"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:30.120" endtime="20191120 15:43:30.121"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:30.119" endtime="20191120 15:43:30.121"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:30.122" endtime="20191120 15:43:30.123"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:30.121" endtime="20191120 15:43:30.123"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:30.124" endtime="20191120 15:43:30.125"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:30.123" endtime="20191120 15:43:30.125"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:30.126" endtime="20191120 15:43:30.127"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:30.125" endtime="20191120 15:43:30.127"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:30.129" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:30.129" endtime="20191120 15:43:30.129"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:30.128" endtime="20191120 15:43:30.130"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:30.127" endtime="20191120 15:43:30.130"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:30.119" endtime="20191120 15:43:30.130"></status>
</kw>
<msg timestamp="20191120 15:43:30.130" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20191120 15:43:30.118" endtime="20191120 15:43:30.130"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:30.131" level="INFO">5</msg>
<status status="PASS" starttime="20191120 15:43:30.131" endtime="20191120 15:43:30.131"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:30.132" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 2</msg>
<status status="PASS" starttime="20191120 15:43:30.131" endtime="20191120 15:43:30.132"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:30.132" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 2</msg>
<status status="PASS" starttime="20191120 15:43:30.132" endtime="20191120 15:43:30.133"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:30.172" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 2</msg>
<status status="PASS" starttime="20191120 15:43:30.133" endtime="20191120 15:43:30.173"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:32.188" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:30.173" endtime="20191120 15:43:32.188"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:32.188" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:32.188" endtime="20191120 15:43:32.188"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:30.133" endtime="20191120 15:43:32.188"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:30.117" endtime="20191120 15:43:32.188"></status>
</kw>
<kw name="When Plugout HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get HDF Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:32.188" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:32.188" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:32.188" endtime="20191120 15:43:32.188"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:32.188" endtime="20191120 15:43:32.188"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:32.188" endtime="20191120 15:43:32.188"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:32.188" endtime="20191120 15:43:32.188"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:32.188" endtime="20191120 15:43:32.188"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:32.188" endtime="20191120 15:43:32.198"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:32.188" endtime="20191120 15:43:32.198"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:32.198" endtime="20191120 15:43:32.198"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:32.198" endtime="20191120 15:43:32.198"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:32.202" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:32.202" endtime="20191120 15:43:32.202"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:32.198" endtime="20191120 15:43:32.202"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:32.198" endtime="20191120 15:43:32.202"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:32.188" endtime="20191120 15:43:32.202"></status>
</kw>
<msg timestamp="20191120 15:43:32.202" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20191120 15:43:32.188" endtime="20191120 15:43:32.202"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:32.202" level="INFO">5</msg>
<status status="PASS" starttime="20191120 15:43:32.202" endtime="20191120 15:43:32.202"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:32.202" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 3</msg>
<status status="PASS" starttime="20191120 15:43:32.202" endtime="20191120 15:43:32.202"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:32.202" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 3</msg>
<status status="PASS" starttime="20191120 15:43:32.202" endtime="20191120 15:43:32.202"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:32.288" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 3</msg>
<status status="PASS" starttime="20191120 15:43:32.202" endtime="20191120 15:43:32.288"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:34.289" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:32.288" endtime="20191120 15:43:34.289"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:34.290" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:34.290" endtime="20191120 15:43:34.290"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:32.202" endtime="20191120 15:43:34.291"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:32.188" endtime="20191120 15:43:34.291"></status>
</kw>
<kw name="Then Click Delete Button" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnDelete}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:43:34.293" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='delete-button']'.</msg>
<status status="PASS" starttime="20191120 15:43:34.292" endtime="20191120 15:43:34.340"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.292" endtime="20191120 15:43:34.341"></status>
</kw>
<kw name="Wait For Page Update" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE UPDATE TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:43:34.443" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20191120 15:43:34.342" endtime="20191120 15:43:34.443"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.341" endtime="20191120 15:43:34.443"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.291" endtime="20191120 15:43:34.444"></status>
</kw>
<kw name="Then Check and see if Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;2&quot; &quot;disappeared&quot; in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of HDF panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.446" endtime="20191120 15:43:34.446"></status>
</kw>
<msg timestamp="20191120 15:43:34.446" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 15:43:34.445" endtime="20191120 15:43:34.446"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 15:43:34.447" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 15:43:34.447" endtime="20191120 15:43:34.447"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 15:43:34.448" level="INFO">${input panel} = -Panel 4</msg>
<status status="PASS" starttime="20191120 15:43:34.447" endtime="20191120 15:43:34.448"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Module</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${input module}</var>
</assign>
<msg timestamp="20191120 15:43:34.449" level="INFO">${input module} = -Module 1</msg>
<status status="PASS" starttime="20191120 15:43:34.448" endtime="20191120 15:43:34.449"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 15:43:34.449" level="INFO">${input port} = -Port 2</msg>
<status status="PASS" starttime="20191120 15:43:34.449" endtime="20191120 15:43:34.450"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input module}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 15:43:34.451" level="INFO">${input port information} = Rack 1-Panel 4-Module 1-Port 2</msg>
<status status="PASS" starttime="20191120 15:43:34.450" endtime="20191120 15:43:34.451"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 15:43:34.452" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 15:43:34.451" endtime="20191120 15:43:34.452"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 15:43:34.452" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:34.452" endtime="20191120 15:43:34.453"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:34.466" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20191120 15:43:34.453" endtime="20191120 15:43:34.466"></status>
</kw>
<msg timestamp="20191120 15:43:34.467" level="INFO">${number of lines} = 2</msg>
<status status="PASS" starttime="20191120 15:43:34.453" endtime="20191120 15:43:34.467"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:34.468" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:34.467" endtime="20191120 15:43:34.468"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:43:34.469" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 15:43:34.469" endtime="20191120 15:43:34.469"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:43:34.470" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 15:43:34.469" endtime="20191120 15:43:34.470"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:43:34.471" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:34.470" endtime="20191120 15:43:34.471"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:43:34.472" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:34.471" endtime="20191120 15:43:34.472"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:34.483" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:34.472" endtime="20191120 15:43:34.483"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.484" endtime="20191120 15:43:34.484"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.468" endtime="20191120 15:43:34.484"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:43:34.485" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 15:43:34.485" endtime="20191120 15:43:34.485"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:43:34.486" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 15:43:34.486" endtime="20191120 15:43:34.486"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:43:34.487" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:34.487" endtime="20191120 15:43:34.487"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:43:34.488" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:34.487" endtime="20191120 15:43:34.488"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:34.499" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:34.488" endtime="20191120 15:43:34.499"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.500" endtime="20191120 15:43:34.500"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.485" endtime="20191120 15:43:34.500"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:43:34.501" level="INFO">${index temp} = 3</msg>
<status status="PASS" starttime="20191120 15:43:34.501" endtime="20191120 15:43:34.501"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:43:34.502" level="INFO">${index string} = 3</msg>
<status status="PASS" starttime="20191120 15:43:34.501" endtime="20191120 15:43:34.502"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:43:34.503" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:34.502" endtime="20191120 15:43:34.503"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:43:34.503" level="INFO">//ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:43:34.503" endtime="20191120 15:43:34.503"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:34.514" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:34.504" endtime="20191120 15:43:34.514"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.514" endtime="20191120 15:43:34.515"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.500" endtime="20191120 15:43:34.515"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.468" endtime="20191120 15:43:34.515"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191120 15:43:34.516" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191120 15:43:34.515" endtime="20191120 15:43:34.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.517" endtime="20191120 15:43:34.517"></status>
</kw>
<msg timestamp="20191120 15:43:34.517" level="INFO">${expected value} = 0</msg>
<status status="PASS" starttime="20191120 15:43:34.516" endtime="20191120 15:43:34.517"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.518" endtime="20191120 15:43:34.518"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.517" endtime="20191120 15:43:34.518"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.444" endtime="20191120 15:43:34.519"></status>
</kw>
<kw name="Then Check and see if Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;3&quot; &quot;disappeared&quot; in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of HDF panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.520" endtime="20191120 15:43:34.521"></status>
</kw>
<msg timestamp="20191120 15:43:34.521" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 15:43:34.520" endtime="20191120 15:43:34.521"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 15:43:34.522" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 15:43:34.521" endtime="20191120 15:43:34.522"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 15:43:34.522" level="INFO">${input panel} = -Panel 4</msg>
<status status="PASS" starttime="20191120 15:43:34.522" endtime="20191120 15:43:34.522"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Module</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${input module}</var>
</assign>
<msg timestamp="20191120 15:43:34.523" level="INFO">${input module} = -Module 1</msg>
<status status="PASS" starttime="20191120 15:43:34.523" endtime="20191120 15:43:34.523"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 15:43:34.524" level="INFO">${input port} = -Port 3</msg>
<status status="PASS" starttime="20191120 15:43:34.523" endtime="20191120 15:43:34.524"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input module}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 15:43:34.525" level="INFO">${input port information} = Rack 1-Panel 4-Module 1-Port 3</msg>
<status status="PASS" starttime="20191120 15:43:34.524" endtime="20191120 15:43:34.525"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 15:43:34.525" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 15:43:34.525" endtime="20191120 15:43:34.525"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 15:43:34.526" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:34.526" endtime="20191120 15:43:34.526"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:34.533" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20191120 15:43:34.527" endtime="20191120 15:43:34.534"></status>
</kw>
<msg timestamp="20191120 15:43:34.534" level="INFO">${number of lines} = 2</msg>
<status status="PASS" starttime="20191120 15:43:34.527" endtime="20191120 15:43:34.534"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:34.535" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:34.534" endtime="20191120 15:43:34.535"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:43:34.536" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 15:43:34.536" endtime="20191120 15:43:34.536"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:43:34.537" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 15:43:34.536" endtime="20191120 15:43:34.537"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:43:34.538" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:34.537" endtime="20191120 15:43:34.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:43:34.538" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:34.538" endtime="20191120 15:43:34.539"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:34.549" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:34.539" endtime="20191120 15:43:34.549"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.550" endtime="20191120 15:43:34.550"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.535" endtime="20191120 15:43:34.550"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:43:34.551" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 15:43:34.551" endtime="20191120 15:43:34.551"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:43:34.552" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 15:43:34.551" endtime="20191120 15:43:34.552"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:43:34.553" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:34.552" endtime="20191120 15:43:34.553"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:43:34.553" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:34.553" endtime="20191120 15:43:34.553"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:34.564" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:34.554" endtime="20191120 15:43:34.564"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.564" endtime="20191120 15:43:34.565"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.550" endtime="20191120 15:43:34.565"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:43:34.566" level="INFO">${index temp} = 3</msg>
<status status="PASS" starttime="20191120 15:43:34.565" endtime="20191120 15:43:34.566"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:43:34.566" level="INFO">${index string} = 3</msg>
<status status="PASS" starttime="20191120 15:43:34.566" endtime="20191120 15:43:34.566"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:43:34.567" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:34.567" endtime="20191120 15:43:34.567"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:43:34.568" level="INFO">//ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:43:34.567" endtime="20191120 15:43:34.568"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:43:34.579" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:43:34.568" endtime="20191120 15:43:34.579"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.579" endtime="20191120 15:43:34.580"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.565" endtime="20191120 15:43:34.580"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.535" endtime="20191120 15:43:34.580"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191120 15:43:34.581" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191120 15:43:34.580" endtime="20191120 15:43:34.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.582" endtime="20191120 15:43:34.582"></status>
</kw>
<msg timestamp="20191120 15:43:34.582" level="INFO">${expected value} = 0</msg>
<status status="PASS" starttime="20191120 15:43:34.581" endtime="20191120 15:43:34.582"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.583" endtime="20191120 15:43:34.583"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.583" endtime="20191120 15:43:34.584"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.519" endtime="20191120 15:43:34.584"></status>
</kw>
<kw name="Then Plugout HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get HDF Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:34.585" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:34.586" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:34.585" endtime="20191120 15:43:34.586"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.586" endtime="20191120 15:43:34.588"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.586" endtime="20191120 15:43:34.588"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.588" endtime="20191120 15:43:34.590"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.588" endtime="20191120 15:43:34.590"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.591" endtime="20191120 15:43:34.592"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.590" endtime="20191120 15:43:34.592"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:34.593" endtime="20191120 15:43:34.594"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.592" endtime="20191120 15:43:34.594"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:34.596" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:34.596" endtime="20191120 15:43:34.596"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.595" endtime="20191120 15:43:34.597"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.594" endtime="20191120 15:43:34.597"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.586" endtime="20191120 15:43:34.597"></status>
</kw>
<msg timestamp="20191120 15:43:34.597" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20191120 15:43:34.585" endtime="20191120 15:43:34.597"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:34.598" level="INFO">5</msg>
<status status="PASS" starttime="20191120 15:43:34.598" endtime="20191120 15:43:34.598"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:34.599" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20191120 15:43:34.598" endtime="20191120 15:43:34.599"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:34.599" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20191120 15:43:34.599" endtime="20191120 15:43:34.600"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:34.627" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20191120 15:43:34.600" endtime="20191120 15:43:34.627"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:36.628" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:34.628" endtime="20191120 15:43:36.628"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:36.629" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:36.629" endtime="20191120 15:43:36.629"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.600" endtime="20191120 15:43:36.630"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:34.584" endtime="20191120 15:43:36.630"></status>
</kw>
<kw name="Then Plugout HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get HDF Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:36.632" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:36.632" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:36.631" endtime="20191120 15:43:36.632"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:36.633" endtime="20191120 15:43:36.634"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:36.633" endtime="20191120 15:43:36.635"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:36.635" endtime="20191120 15:43:36.637"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:36.635" endtime="20191120 15:43:36.637"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:36.637" endtime="20191120 15:43:36.639"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:36.637" endtime="20191120 15:43:36.639"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:36.639" endtime="20191120 15:43:36.641"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:36.639" endtime="20191120 15:43:36.641"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:36.643" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:36.643" endtime="20191120 15:43:36.643"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:36.641" endtime="20191120 15:43:36.643"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:36.641" endtime="20191120 15:43:36.644"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:36.632" endtime="20191120 15:43:36.644"></status>
</kw>
<msg timestamp="20191120 15:43:36.644" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20191120 15:43:36.631" endtime="20191120 15:43:36.644"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:36.645" level="INFO">5</msg>
<status status="PASS" starttime="20191120 15:43:36.645" endtime="20191120 15:43:36.645"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:36.646" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20191120 15:43:36.645" endtime="20191120 15:43:36.646"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:36.646" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20191120 15:43:36.646" endtime="20191120 15:43:36.646"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:36.681" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20191120 15:43:36.647" endtime="20191120 15:43:36.681"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:38.683" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:36.682" endtime="20191120 15:43:38.683"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:38.684" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:38.683" endtime="20191120 15:43:38.684"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:36.647" endtime="20191120 15:43:38.684"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:36.630" endtime="20191120 15:43:38.685"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 15:43:38.695" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191120 15:43:38.686" endtime="20191120 15:43:38.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:43:38.697" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191120 15:43:38.696" endtime="20191120 15:43:38.734"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:38.696" endtime="20191120 15:43:38.734"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:43:39.237" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:43:38.735" endtime="20191120 15:43:39.237"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:38.734" endtime="20191120 15:43:39.237"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:38.696" endtime="20191120 15:43:39.238"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:38.695" endtime="20191120 15:43:39.238"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 15:43:39.247" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191120 15:43:39.238" endtime="20191120 15:43:39.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:43:39.250" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 15:43:39.249" endtime="20191120 15:43:39.279"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:39.249" endtime="20191120 15:43:39.279"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:43:39.782" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:43:39.280" endtime="20191120 15:43:39.782"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:39.280" endtime="20191120 15:43:39.782"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:39.248" endtime="20191120 15:43:39.783"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:39.248" endtime="20191120 15:43:39.783"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191120 15:43:39.783" endtime="20191120 15:43:41.892"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:38.685" endtime="20191120 15:43:41.892"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:13.149" endtime="20191120 15:43:41.893" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-t5" name="INSERT_END_A_05_09_Verify that imVision X will remove all unplugged ports from the End A list, and turn off all port LEDs after selecting Delete button in the bottom bar if doing on a 96LC fiber type">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:41.895" endtime="20191120 15:43:41.896"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191120 15:43:41.896" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191120 15:43:43.732" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191120 15:43:41.896" endtime="20191120 15:43:43.732"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:41.895" endtime="20191120 15:43:43.732"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191120 15:43:43.734" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191120 15:43:43.733" endtime="20191120 15:43:43.734"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191120 15:43:43.734" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191120 15:43:43.734" endtime="20191120 15:43:48.322"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191120 15:43:48.322" endtime="20191120 15:43:49.445"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:43:49.948" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:43:49.445" endtime="20191120 15:43:49.948"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 15:43:49.962" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191120 15:43:49.949" endtime="20191120 15:43:49.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:49.962" endtime="20191120 15:43:49.963"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191120 15:43:49.975" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191120 15:43:49.963" endtime="20191120 15:43:49.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:49.975" endtime="20191120 15:43:49.976"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 15:43:49.986" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191120 15:43:49.976" endtime="20191120 15:43:49.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:49.987" endtime="20191120 15:43:49.988"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:49.948" endtime="20191120 15:43:49.988"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:43:49.989" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 15:43:49.989" endtime="20191120 15:43:50.086"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:49.989" endtime="20191120 15:43:50.087"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:43:50.599" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:43:50.087" endtime="20191120 15:43:50.599"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:50.087" endtime="20191120 15:43:50.599"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:49.988" endtime="20191120 15:43:50.600"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:43.733" endtime="20191120 15:43:50.600"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:41.894" endtime="20191120 15:43:50.600"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191120 15:43:50.600" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191120 15:43:50.600" endtime="20191120 15:43:50.648"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:43:51.150" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:43:50.649" endtime="20191120 15:43:51.150"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:50.648" endtime="20191120 15:43:51.150"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:50.600" endtime="20191120 15:43:51.151"></status>
</kw>
<kw name="When Plugin 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;B&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get 24F Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:51.152" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:51.153" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:51.152" endtime="20191120 15:43:51.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:51.154" endtime="20191120 15:43:51.154"></status>
</kw>
<msg timestamp="20191120 15:43:51.154" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20191120 15:43:51.153" endtime="20191120 15:43:51.154"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:51.155" endtime="20191120 15:43:51.157"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.155" endtime="20191120 15:43:51.157"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:51.157" endtime="20191120 15:43:51.159"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.157" endtime="20191120 15:43:51.159"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:51.160" endtime="20191120 15:43:51.162"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.160" endtime="20191120 15:43:51.162"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:51.162" endtime="20191120 15:43:51.164"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.162" endtime="20191120 15:43:51.164"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:51.165" endtime="20191120 15:43:51.167"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.164" endtime="20191120 15:43:51.167"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:51.167" endtime="20191120 15:43:51.169"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.167" endtime="20191120 15:43:51.170"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:51.170" endtime="20191120 15:43:51.172"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.170" endtime="20191120 15:43:51.172"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:51.172" endtime="20191120 15:43:51.174"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.172" endtime="20191120 15:43:51.174"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:51.175" endtime="20191120 15:43:51.177"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.174" endtime="20191120 15:43:51.177"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:51.180" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:51.179" endtime="20191120 15:43:51.180"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.177" endtime="20191120 15:43:51.180"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.177" endtime="20191120 15:43:51.180"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.154" endtime="20191120 15:43:51.181"></status>
</kw>
<msg timestamp="20191120 15:43:51.181" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20191120 15:43:51.152" endtime="20191120 15:43:51.181"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:51.182" level="INFO">10</msg>
<status status="PASS" starttime="20191120 15:43:51.182" endtime="20191120 15:43:51.182"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:51.183" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 10 --module B --port 1</msg>
<status status="PASS" starttime="20191120 15:43:51.182" endtime="20191120 15:43:51.183"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:51.184" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module B --port 1</msg>
<status status="PASS" starttime="20191120 15:43:51.183" endtime="20191120 15:43:51.184"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:51.201" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module B --port 1</msg>
<status status="PASS" starttime="20191120 15:43:51.185" endtime="20191120 15:43:51.202"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:53.207" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:51.202" endtime="20191120 15:43:53.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:53.207" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:53.207" endtime="20191120 15:43:53.207"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.184" endtime="20191120 15:43:53.207"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:51.151" endtime="20191120 15:43:53.207"></status>
</kw>
<kw name="When Plugin 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;B&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get 24F Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:53.207" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:53.207" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:53.207" endtime="20191120 15:43:53.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:53.212" endtime="20191120 15:43:53.212"></status>
</kw>
<msg timestamp="20191120 15:43:53.212" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20191120 15:43:53.212" endtime="20191120 15:43:53.212"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:53.212" endtime="20191120 15:43:53.212"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.212" endtime="20191120 15:43:53.212"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:53.212" endtime="20191120 15:43:53.212"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.212" endtime="20191120 15:43:53.218"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:53.218" endtime="20191120 15:43:53.218"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.218" endtime="20191120 15:43:53.218"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:53.218" endtime="20191120 15:43:53.218"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.218" endtime="20191120 15:43:53.218"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:53.218" endtime="20191120 15:43:53.218"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.218" endtime="20191120 15:43:53.218"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:53.218" endtime="20191120 15:43:53.218"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.218" endtime="20191120 15:43:53.218"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:53.218" endtime="20191120 15:43:53.228"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.218" endtime="20191120 15:43:53.228"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:53.228" endtime="20191120 15:43:53.232"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.228" endtime="20191120 15:43:53.232"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:53.233" endtime="20191120 15:43:53.234"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.232" endtime="20191120 15:43:53.234"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:53.237" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:53.237" endtime="20191120 15:43:53.237"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.235" endtime="20191120 15:43:53.237"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.235" endtime="20191120 15:43:53.238"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.212" endtime="20191120 15:43:53.238"></status>
</kw>
<msg timestamp="20191120 15:43:53.238" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20191120 15:43:53.207" endtime="20191120 15:43:53.238"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:53.239" level="INFO">10</msg>
<status status="PASS" starttime="20191120 15:43:53.239" endtime="20191120 15:43:53.239"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:53.240" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 10 --module B --port 2</msg>
<status status="PASS" starttime="20191120 15:43:53.239" endtime="20191120 15:43:53.240"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:53.241" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module B --port 2</msg>
<status status="PASS" starttime="20191120 15:43:53.240" endtime="20191120 15:43:53.241"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:53.276" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module B --port 2</msg>
<status status="PASS" starttime="20191120 15:43:53.241" endtime="20191120 15:43:53.277"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:55.279" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:53.277" endtime="20191120 15:43:55.279"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:55.280" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:55.280" endtime="20191120 15:43:55.280"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.241" endtime="20191120 15:43:55.281"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:53.207" endtime="20191120 15:43:55.281"></status>
</kw>
<kw name="When Plugin 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;D&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get 24F Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:55.283" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:55.283" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:55.282" endtime="20191120 15:43:55.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>CD</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:55.284" endtime="20191120 15:43:55.284"></status>
</kw>
<msg timestamp="20191120 15:43:55.284" level="INFO">${temp module} = CD</msg>
<status status="PASS" starttime="20191120 15:43:55.283" endtime="20191120 15:43:55.285"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:55.285" endtime="20191120 15:43:55.287"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.285" endtime="20191120 15:43:55.287"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:55.288" endtime="20191120 15:43:55.289"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.287" endtime="20191120 15:43:55.289"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:55.290" endtime="20191120 15:43:55.291"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.290" endtime="20191120 15:43:55.292"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:55.292" endtime="20191120 15:43:55.294"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.292" endtime="20191120 15:43:55.294"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:55.294" endtime="20191120 15:43:55.296"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.294" endtime="20191120 15:43:55.296"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:55.297" endtime="20191120 15:43:55.299"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.297" endtime="20191120 15:43:55.299"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:55.299" endtime="20191120 15:43:55.301"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.299" endtime="20191120 15:43:55.301"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:55.301" endtime="20191120 15:43:55.303"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.301" endtime="20191120 15:43:55.303"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:55.304" endtime="20191120 15:43:55.305"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.303" endtime="20191120 15:43:55.305"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:55.306" endtime="20191120 15:43:55.307"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.306" endtime="20191120 15:43:55.308"></status>
</kw>
<kw name="${panel index} = 10" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:55.310" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:55.310" endtime="20191120 15:43:55.310"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.308" endtime="20191120 15:43:55.310"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.308" endtime="20191120 15:43:55.311"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.285" endtime="20191120 15:43:55.311"></status>
</kw>
<msg timestamp="20191120 15:43:55.311" level="INFO">${panel index} = 11</msg>
<status status="PASS" starttime="20191120 15:43:55.282" endtime="20191120 15:43:55.311"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:55.312" level="INFO">11</msg>
<status status="PASS" starttime="20191120 15:43:55.312" endtime="20191120 15:43:55.312"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:55.313" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 11 --module D --port 3</msg>
<status status="PASS" starttime="20191120 15:43:55.312" endtime="20191120 15:43:55.313"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:55.314" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 11 --module D --port 3</msg>
<status status="PASS" starttime="20191120 15:43:55.313" endtime="20191120 15:43:55.314"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:55.329" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 11 --module D --port 3</msg>
<status status="PASS" starttime="20191120 15:43:55.314" endtime="20191120 15:43:55.330"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:57.331" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=11
type=96lc
panel_state=RUN
modulekit=CD
serial=36FFFF200002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:55.330" endtime="20191120 15:43:57.331"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:57.332" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=11
type=96lc
panel_state=RUN
modulekit=CD
serial=36FFFF200002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:57.331" endtime="20191120 15:43:57.332"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.314" endtime="20191120 15:43:57.333"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:55.281" endtime="20191120 15:43:57.333"></status>
</kw>
<kw name="When Plugin 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;D&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get 24F Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:57.335" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:57.335" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:57.334" endtime="20191120 15:43:57.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>CD</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:57.336" endtime="20191120 15:43:57.336"></status>
</kw>
<msg timestamp="20191120 15:43:57.336" level="INFO">${temp module} = CD</msg>
<status status="PASS" starttime="20191120 15:43:57.335" endtime="20191120 15:43:57.336"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:57.337" endtime="20191120 15:43:57.339"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.337" endtime="20191120 15:43:57.339"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:57.339" endtime="20191120 15:43:57.341"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.339" endtime="20191120 15:43:57.341"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:57.342" endtime="20191120 15:43:57.343"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.341" endtime="20191120 15:43:57.343"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:57.344" endtime="20191120 15:43:57.345"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.343" endtime="20191120 15:43:57.346"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:57.346" endtime="20191120 15:43:57.348"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.346" endtime="20191120 15:43:57.348"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:57.348" endtime="20191120 15:43:57.350"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.348" endtime="20191120 15:43:57.350"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:57.351" endtime="20191120 15:43:57.352"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.350" endtime="20191120 15:43:57.352"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:57.353" endtime="20191120 15:43:57.354"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.353" endtime="20191120 15:43:57.355"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:57.355" endtime="20191120 15:43:57.357"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.355" endtime="20191120 15:43:57.357"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:57.357" endtime="20191120 15:43:57.359"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.357" endtime="20191120 15:43:57.359"></status>
</kw>
<kw name="${panel index} = 10" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:57.361" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:57.361" endtime="20191120 15:43:57.362"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.359" endtime="20191120 15:43:57.362"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.359" endtime="20191120 15:43:57.362"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.337" endtime="20191120 15:43:57.362"></status>
</kw>
<msg timestamp="20191120 15:43:57.363" level="INFO">${panel index} = 11</msg>
<status status="PASS" starttime="20191120 15:43:57.334" endtime="20191120 15:43:57.363"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:57.363" level="INFO">11</msg>
<status status="PASS" starttime="20191120 15:43:57.363" endtime="20191120 15:43:57.363"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:57.364" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 11 --module D --port 4</msg>
<status status="PASS" starttime="20191120 15:43:57.364" endtime="20191120 15:43:57.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:57.365" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 11 --module D --port 4</msg>
<status status="PASS" starttime="20191120 15:43:57.364" endtime="20191120 15:43:57.365"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:57.376" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 11 --module D --port 4</msg>
<status status="PASS" starttime="20191120 15:43:57.366" endtime="20191120 15:43:57.376"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:43:59.378" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=11
type=96lc
panel_state=RUN
modulekit=CD
serial=36FFFF200002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:57.376" endtime="20191120 15:43:59.378"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:43:59.379" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=11
type=96lc
panel_state=RUN
modulekit=CD
serial=36FFFF200002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:59.378" endtime="20191120 15:43:59.379"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.365" endtime="20191120 15:43:59.380"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:57.333" endtime="20191120 15:43:59.380"></status>
</kw>
<kw name="When Plugout 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;B&quot; Port &quot;2&quot;" library="Virtual Panel definitions">
<kw name="Get 24F Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:43:59.382" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:43:59.382" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:43:59.381" endtime="20191120 15:43:59.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:59.383" endtime="20191120 15:43:59.383"></status>
</kw>
<msg timestamp="20191120 15:43:59.383" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20191120 15:43:59.382" endtime="20191120 15:43:59.384"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:59.384" endtime="20191120 15:43:59.386"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.384" endtime="20191120 15:43:59.386"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:59.387" endtime="20191120 15:43:59.388"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.386" endtime="20191120 15:43:59.388"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:59.389" endtime="20191120 15:43:59.390"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.389" endtime="20191120 15:43:59.391"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:59.391" endtime="20191120 15:43:59.393"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.391" endtime="20191120 15:43:59.393"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:59.393" endtime="20191120 15:43:59.395"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.393" endtime="20191120 15:43:59.395"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:59.396" endtime="20191120 15:43:59.397"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.395" endtime="20191120 15:43:59.398"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:59.398" endtime="20191120 15:43:59.400"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.398" endtime="20191120 15:43:59.400"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:59.400" endtime="20191120 15:43:59.402"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.400" endtime="20191120 15:43:59.402"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:43:59.403" endtime="20191120 15:43:59.404"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.402" endtime="20191120 15:43:59.404"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:43:59.407" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:43:59.406" endtime="20191120 15:43:59.407"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.405" endtime="20191120 15:43:59.407"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.404" endtime="20191120 15:43:59.407"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.384" endtime="20191120 15:43:59.407"></status>
</kw>
<msg timestamp="20191120 15:43:59.408" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20191120 15:43:59.381" endtime="20191120 15:43:59.408"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:43:59.408" level="INFO">10</msg>
<status status="PASS" starttime="20191120 15:43:59.408" endtime="20191120 15:43:59.409"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:43:59.409" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 10 --module B --port 2</msg>
<status status="PASS" starttime="20191120 15:43:59.409" endtime="20191120 15:43:59.410"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:43:59.410" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module B --port 2</msg>
<status status="PASS" starttime="20191120 15:43:59.410" endtime="20191120 15:43:59.410"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:43:59.438" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module B --port 2</msg>
<status status="PASS" starttime="20191120 15:43:59.411" endtime="20191120 15:43:59.439"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:44:01.448" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:43:59.439" endtime="20191120 15:44:01.448"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:44:01.448" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:44:01.448" endtime="20191120 15:44:01.448"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.411" endtime="20191120 15:44:01.448"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:59.380" endtime="20191120 15:44:01.448"></status>
</kw>
<kw name="When Plugout 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;D&quot; Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Get 24F Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:44:01.452" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:44:01.452" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:44:01.452" endtime="20191120 15:44:01.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>CD</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:01.452" endtime="20191120 15:44:01.452"></status>
</kw>
<msg timestamp="20191120 15:44:01.452" level="INFO">${temp module} = CD</msg>
<status status="PASS" starttime="20191120 15:44:01.452" endtime="20191120 15:44:01.452"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:01.452" endtime="20191120 15:44:01.452"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.452" endtime="20191120 15:44:01.452"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:01.452" endtime="20191120 15:44:01.459"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.452" endtime="20191120 15:44:01.459"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:01.459" endtime="20191120 15:44:01.459"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.459" endtime="20191120 15:44:01.459"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:01.459" endtime="20191120 15:44:01.462"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.459" endtime="20191120 15:44:01.462"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:01.462" endtime="20191120 15:44:01.462"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.462" endtime="20191120 15:44:01.462"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:01.462" endtime="20191120 15:44:01.462"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.462" endtime="20191120 15:44:01.462"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:01.462" endtime="20191120 15:44:01.469"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.462" endtime="20191120 15:44:01.469"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:01.469" endtime="20191120 15:44:01.469"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.469" endtime="20191120 15:44:01.469"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:01.472" endtime="20191120 15:44:01.472"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.472" endtime="20191120 15:44:01.472"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:01.472" endtime="20191120 15:44:01.472"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.472" endtime="20191120 15:44:01.472"></status>
</kw>
<kw name="${panel index} = 10" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:44:01.472" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:44:01.472" endtime="20191120 15:44:01.479"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.472" endtime="20191120 15:44:01.479"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.472" endtime="20191120 15:44:01.479"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.452" endtime="20191120 15:44:01.479"></status>
</kw>
<msg timestamp="20191120 15:44:01.479" level="INFO">${panel index} = 11</msg>
<status status="PASS" starttime="20191120 15:44:01.448" endtime="20191120 15:44:01.479"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:44:01.479" level="INFO">11</msg>
<status status="PASS" starttime="20191120 15:44:01.479" endtime="20191120 15:44:01.479"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:44:01.479" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 11 --module D --port 3</msg>
<status status="PASS" starttime="20191120 15:44:01.479" endtime="20191120 15:44:01.479"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:44:01.482" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 11 --module D --port 3</msg>
<status status="PASS" starttime="20191120 15:44:01.479" endtime="20191120 15:44:01.482"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:44:01.549" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 11 --module D --port 3</msg>
<status status="PASS" starttime="20191120 15:44:01.482" endtime="20191120 15:44:01.549"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:44:03.550" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=11
type=96lc
panel_state=RUN
modulekit=CD
serial=36FFFF200002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:44:01.549" endtime="20191120 15:44:03.550"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:44:03.551" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=11
type=96lc
panel_state=RUN
modulekit=CD
serial=36FFFF200002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:44:03.550" endtime="20191120 15:44:03.551"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.482" endtime="20191120 15:44:03.551"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:01.448" endtime="20191120 15:44:03.552"></status>
</kw>
<kw name="Then Click Delete Button" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnDelete}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:44:03.553" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='delete-button']'.</msg>
<status status="PASS" starttime="20191120 15:44:03.553" endtime="20191120 15:44:03.603"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.552" endtime="20191120 15:44:03.603"></status>
</kw>
<kw name="Wait For Page Update" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE UPDATE TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:44:03.706" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20191120 15:44:03.604" endtime="20191120 15:44:03.706"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.603" endtime="20191120 15:44:03.706"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.552" endtime="20191120 15:44:03.707"></status>
</kw>
<kw name="Then Check then see if Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;B&quot; Port &quot;2&quot; &quot;disappeared&quot; in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of 24F panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.708" endtime="20191120 15:44:03.709"></status>
</kw>
<msg timestamp="20191120 15:44:03.709" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 15:44:03.708" endtime="20191120 15:44:03.709"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 15:44:03.710" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 15:44:03.709" endtime="20191120 15:44:03.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 15:44:03.711" level="INFO">${input panel} = -Panel 6</msg>
<status status="PASS" starttime="20191120 15:44:03.710" endtime="20191120 15:44:03.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Row</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${input row}</var>
</assign>
<msg timestamp="20191120 15:44:03.712" level="INFO">${input row} = -Row 1</msg>
<status status="PASS" starttime="20191120 15:44:03.711" endtime="20191120 15:44:03.712"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Module</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${input module}</var>
</assign>
<msg timestamp="20191120 15:44:03.713" level="INFO">${input module} = -Module B</msg>
<status status="PASS" starttime="20191120 15:44:03.712" endtime="20191120 15:44:03.713"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 15:44:03.713" level="INFO">${input port} = -Port 2</msg>
<status status="PASS" starttime="20191120 15:44:03.713" endtime="20191120 15:44:03.714"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input row}</arg>
<arg>${input module}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 15:44:03.714" level="INFO">${input port information} = Rack 1-Panel 6-Row 1-Module B-Port 2</msg>
<status status="PASS" starttime="20191120 15:44:03.714" endtime="20191120 15:44:03.715"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 15:44:03.716" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 15:44:03.715" endtime="20191120 15:44:03.716"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 15:44:03.717" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module B-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:44:03.716" endtime="20191120 15:44:03.717"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:44:03.730" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20191120 15:44:03.717" endtime="20191120 15:44:03.730"></status>
</kw>
<msg timestamp="20191120 15:44:03.731" level="INFO">${number of lines} = 2</msg>
<status status="PASS" starttime="20191120 15:44:03.717" endtime="20191120 15:44:03.731"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:44:03.732" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:44:03.731" endtime="20191120 15:44:03.732"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:44:03.733" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 15:44:03.733" endtime="20191120 15:44:03.733"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:44:03.734" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 15:44:03.733" endtime="20191120 15:44:03.734"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:44:03.735" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module B-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:44:03.734" endtime="20191120 15:44:03.735"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:44:03.735" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module B-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:44:03.735" endtime="20191120 15:44:03.735"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:44:03.748" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:44:03.736" endtime="20191120 15:44:03.748"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.748" endtime="20191120 15:44:03.749"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.732" endtime="20191120 15:44:03.749"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:44:03.750" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 15:44:03.749" endtime="20191120 15:44:03.750"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:44:03.751" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 15:44:03.750" endtime="20191120 15:44:03.751"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:44:03.752" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module B-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:44:03.751" endtime="20191120 15:44:03.752"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:44:03.752" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module B-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:44:03.752" endtime="20191120 15:44:03.753"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:44:03.763" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:44:03.753" endtime="20191120 15:44:03.764"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.764" endtime="20191120 15:44:03.764"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.749" endtime="20191120 15:44:03.765"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:44:03.765" level="INFO">${index temp} = 3</msg>
<status status="PASS" starttime="20191120 15:44:03.765" endtime="20191120 15:44:03.766"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:44:03.766" level="INFO">${index string} = 3</msg>
<status status="PASS" starttime="20191120 15:44:03.766" endtime="20191120 15:44:03.766"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:44:03.767" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module B-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:44:03.767" endtime="20191120 15:44:03.767"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:44:03.768" level="INFO">//ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module B-Port 2')]</msg>
<status status="PASS" starttime="20191120 15:44:03.767" endtime="20191120 15:44:03.768"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:44:03.778" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:44:03.768" endtime="20191120 15:44:03.778"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.779" endtime="20191120 15:44:03.779"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.765" endtime="20191120 15:44:03.779"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.732" endtime="20191120 15:44:03.779"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191120 15:44:03.780" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191120 15:44:03.780" endtime="20191120 15:44:03.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.781" endtime="20191120 15:44:03.781"></status>
</kw>
<msg timestamp="20191120 15:44:03.781" level="INFO">${expected value} = 0</msg>
<status status="PASS" starttime="20191120 15:44:03.780" endtime="20191120 15:44:03.782"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.782" endtime="20191120 15:44:03.783"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.782" endtime="20191120 15:44:03.783"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.707" endtime="20191120 15:44:03.783"></status>
</kw>
<kw name="Then Check then see if Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;D&quot; Port &quot;3&quot; &quot;disappeared&quot; in End &quot;A&quot;" library="Bulk Patching definitions">
<doc>This keyword is used to check the information of 24F panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.784" endtime="20191120 15:44:03.785"></status>
</kw>
<msg timestamp="20191120 15:44:03.785" level="INFO">${input end position} = 2</msg>
<status status="PASS" starttime="20191120 15:44:03.784" endtime="20191120 15:44:03.785"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20191120 15:44:03.786" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20191120 15:44:03.785" endtime="20191120 15:44:03.786"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20191120 15:44:03.786" level="INFO">${input panel} = -Panel 6</msg>
<status status="PASS" starttime="20191120 15:44:03.786" endtime="20191120 15:44:03.786"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Row</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${input row}</var>
</assign>
<msg timestamp="20191120 15:44:03.787" level="INFO">${input row} = -Row 1</msg>
<status status="PASS" starttime="20191120 15:44:03.787" endtime="20191120 15:44:03.787"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Module</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${input module}</var>
</assign>
<msg timestamp="20191120 15:44:03.788" level="INFO">${input module} = -Module D</msg>
<status status="PASS" starttime="20191120 15:44:03.787" endtime="20191120 15:44:03.788"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20191120 15:44:03.788" level="INFO">${input port} = -Port 3</msg>
<status status="PASS" starttime="20191120 15:44:03.788" endtime="20191120 15:44:03.788"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input row}</arg>
<arg>${input module}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20191120 15:44:03.789" level="INFO">${input port information} = Rack 1-Panel 6-Row 1-Module D-Port 3</msg>
<status status="PASS" starttime="20191120 15:44:03.789" endtime="20191120 15:44:03.789"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20191120 15:44:03.790" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20191120 15:44:03.790" endtime="20191120 15:44:03.790"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20191120 15:44:03.791" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module D-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:44:03.790" endtime="20191120 15:44:03.791"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="Bulk Patching definitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:44:03.798" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20191120 15:44:03.792" endtime="20191120 15:44:03.798"></status>
</kw>
<msg timestamp="20191120 15:44:03.799" level="INFO">${number of lines} = 2</msg>
<status status="PASS" starttime="20191120 15:44:03.791" endtime="20191120 15:44:03.799"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:44:03.799" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:44:03.799" endtime="20191120 15:44:03.799"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:44:03.801" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20191120 15:44:03.800" endtime="20191120 15:44:03.801"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:44:03.801" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20191120 15:44:03.801" endtime="20191120 15:44:03.802"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:44:03.802" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module D-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:44:03.802" endtime="20191120 15:44:03.802"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:44:03.803" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module D-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:44:03.803" endtime="20191120 15:44:03.803"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:44:03.814" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:44:03.803" endtime="20191120 15:44:03.814"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.814" endtime="20191120 15:44:03.815"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.800" endtime="20191120 15:44:03.815"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:44:03.816" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20191120 15:44:03.815" endtime="20191120 15:44:03.816"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:44:03.816" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20191120 15:44:03.816" endtime="20191120 15:44:03.817"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:44:03.817" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module D-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:44:03.817" endtime="20191120 15:44:03.817"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:44:03.818" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module D-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:44:03.818" endtime="20191120 15:44:03.818"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:44:03.829" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:44:03.819" endtime="20191120 15:44:03.829"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.830" endtime="20191120 15:44:03.830"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.815" endtime="20191120 15:44:03.830"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20191120 15:44:03.831" level="INFO">${index temp} = 3</msg>
<status status="PASS" starttime="20191120 15:44:03.831" endtime="20191120 15:44:03.831"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20191120 15:44:03.832" level="INFO">${index string} = 3</msg>
<status status="PASS" starttime="20191120 15:44:03.831" endtime="20191120 15:44:03.832"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20191120 15:44:03.833" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module D-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:44:03.832" endtime="20191120 15:44:03.833"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20191120 15:44:03.833" level="INFO">//ul[@id='bulkPatchList']/li[3]/div[2]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module D-Port 3')]</msg>
<status status="PASS" starttime="20191120 15:44:03.833" endtime="20191120 15:44:03.833"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20191120 15:44:03.844" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20191120 15:44:03.834" endtime="20191120 15:44:03.845"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.845" endtime="20191120 15:44:03.846"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.830" endtime="20191120 15:44:03.846"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.800" endtime="20191120 15:44:03.846"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20191120 15:44:03.846" level="INFO">${temp status} = disappeared</msg>
<status status="PASS" starttime="20191120 15:44:03.846" endtime="20191120 15:44:03.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.847" endtime="20191120 15:44:03.848"></status>
</kw>
<msg timestamp="20191120 15:44:03.848" level="INFO">${expected value} = 0</msg>
<status status="PASS" starttime="20191120 15:44:03.847" endtime="20191120 15:44:03.848"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.849" endtime="20191120 15:44:03.849"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.848" endtime="20191120 15:44:03.849"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.783" endtime="20191120 15:44:03.849"></status>
</kw>
<kw name="Then Plugout 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;D&quot; Port &quot;4&quot;" library="Virtual Panel definitions">
<kw name="Get 24F Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:44:03.851" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:44:03.851" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:44:03.851" endtime="20191120 15:44:03.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>CD</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.853" endtime="20191120 15:44:03.853"></status>
</kw>
<msg timestamp="20191120 15:44:03.853" level="INFO">${temp module} = CD</msg>
<status status="PASS" starttime="20191120 15:44:03.852" endtime="20191120 15:44:03.853"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.854" endtime="20191120 15:44:03.856"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.854" endtime="20191120 15:44:03.856"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.856" endtime="20191120 15:44:03.858"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.856" endtime="20191120 15:44:03.858"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.858" endtime="20191120 15:44:03.860"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.858" endtime="20191120 15:44:03.860"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.861" endtime="20191120 15:44:03.862"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.860" endtime="20191120 15:44:03.862"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.863" endtime="20191120 15:44:03.864"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.863" endtime="20191120 15:44:03.864"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.865" endtime="20191120 15:44:03.867"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.865" endtime="20191120 15:44:03.867"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.867" endtime="20191120 15:44:03.869"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.867" endtime="20191120 15:44:03.869"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.869" endtime="20191120 15:44:03.871"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.869" endtime="20191120 15:44:03.871"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.872" endtime="20191120 15:44:03.873"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.871" endtime="20191120 15:44:03.873"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:03.874" endtime="20191120 15:44:03.876"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.874" endtime="20191120 15:44:03.876"></status>
</kw>
<kw name="${panel index} = 10" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:44:03.878" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:44:03.878" endtime="20191120 15:44:03.878"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.876" endtime="20191120 15:44:03.878"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.876" endtime="20191120 15:44:03.879"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.853" endtime="20191120 15:44:03.879"></status>
</kw>
<msg timestamp="20191120 15:44:03.879" level="INFO">${panel index} = 11</msg>
<status status="PASS" starttime="20191120 15:44:03.850" endtime="20191120 15:44:03.879"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:44:03.880" level="INFO">11</msg>
<status status="PASS" starttime="20191120 15:44:03.880" endtime="20191120 15:44:03.880"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:44:03.881" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 11 --module D --port 4</msg>
<status status="PASS" starttime="20191120 15:44:03.880" endtime="20191120 15:44:03.881"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:44:03.882" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 11 --module D --port 4</msg>
<status status="PASS" starttime="20191120 15:44:03.881" endtime="20191120 15:44:03.882"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:44:03.921" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 11 --module D --port 4</msg>
<status status="PASS" starttime="20191120 15:44:03.882" endtime="20191120 15:44:03.921"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:44:05.926" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=11
type=96lc
panel_state=RUN
modulekit=CD
serial=36FFFF200002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:44:03.922" endtime="20191120 15:44:05.927"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:44:05.928" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=11
type=96lc
panel_state=RUN
modulekit=CD
serial=36FFFF200002
count=11
# </msg>
<status status="PASS" starttime="20191120 15:44:05.927" endtime="20191120 15:44:05.928"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.882" endtime="20191120 15:44:05.928"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:03.850" endtime="20191120 15:44:05.929"></status>
</kw>
<kw name="Then Plugout 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;B&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get 24F Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191120 15:44:05.932" level="INFO">Length is 12</msg>
<msg timestamp="20191120 15:44:05.932" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191120 15:44:05.931" endtime="20191120 15:44:05.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:05.933" endtime="20191120 15:44:05.934"></status>
</kw>
<msg timestamp="20191120 15:44:05.934" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20191120 15:44:05.933" endtime="20191120 15:44:05.934"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:05.935" endtime="20191120 15:44:05.937"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.935" endtime="20191120 15:44:05.937"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:05.938" endtime="20191120 15:44:05.940"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.937" endtime="20191120 15:44:05.940"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:05.941" endtime="20191120 15:44:05.943"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.941" endtime="20191120 15:44:05.943"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:05.944" endtime="20191120 15:44:05.946"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.943" endtime="20191120 15:44:05.946"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:05.947" endtime="20191120 15:44:05.949"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.946" endtime="20191120 15:44:05.949"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:05.950" endtime="20191120 15:44:05.952"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.949" endtime="20191120 15:44:05.952"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:05.952" endtime="20191120 15:44:05.954"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.952" endtime="20191120 15:44:05.955"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:05.955" endtime="20191120 15:44:05.957"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.955" endtime="20191120 15:44:05.957"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20191120 15:44:05.958" endtime="20191120 15:44:05.960"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.958" endtime="20191120 15:44:05.960"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191120 15:44:05.963" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191120 15:44:05.963" endtime="20191120 15:44:05.963"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.961" endtime="20191120 15:44:05.963"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.960" endtime="20191120 15:44:05.964"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.934" endtime="20191120 15:44:05.964"></status>
</kw>
<msg timestamp="20191120 15:44:05.964" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20191120 15:44:05.930" endtime="20191120 15:44:05.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191120 15:44:05.965" level="INFO">10</msg>
<status status="PASS" starttime="20191120 15:44:05.965" endtime="20191120 15:44:05.965"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191120 15:44:05.966" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 10 --module B --port 1</msg>
<status status="PASS" starttime="20191120 15:44:05.966" endtime="20191120 15:44:05.966"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191120 15:44:05.967" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module B --port 1</msg>
<status status="PASS" starttime="20191120 15:44:05.967" endtime="20191120 15:44:05.967"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191120 15:44:06.008" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module B --port 1</msg>
<status status="PASS" starttime="20191120 15:44:05.968" endtime="20191120 15:44:06.008"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191120 15:44:08.010" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:44:06.009" endtime="20191120 15:44:08.010"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191120 15:44:08.011" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20191120 15:44:08.011" endtime="20191120 15:44:08.012"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.968" endtime="20191120 15:44:08.012"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:05.930" endtime="20191120 15:44:08.012"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191120 15:44:08.023" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20191120 15:44:08.013" endtime="20191120 15:44:08.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:44:08.026" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191120 15:44:08.025" endtime="20191120 15:44:08.062"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:08.025" endtime="20191120 15:44:08.062"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:44:08.579" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:44:08.063" endtime="20191120 15:44:08.579"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:08.063" endtime="20191120 15:44:08.579"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:08.024" endtime="20191120 15:44:08.579"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:08.023" endtime="20191120 15:44:08.579"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191120 15:44:08.588" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191120 15:44:08.579" endtime="20191120 15:44:08.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191120 15:44:08.588" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191120 15:44:08.588" endtime="20191120 15:44:08.620"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:08.588" endtime="20191120 15:44:08.620"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191120 15:44:09.121" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20191120 15:44:08.621" endtime="20191120 15:44:09.121"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:08.621" endtime="20191120 15:44:09.121"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:08.588" endtime="20191120 15:44:09.122"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:08.588" endtime="20191120 15:44:09.122"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191120 15:44:09.122" endtime="20191120 15:44:11.235"></status>
</kw>
<status status="PASS" starttime="20191120 15:44:08.013" endtime="20191120 15:44:11.235"></status>
</kw>
<status status="PASS" starttime="20191120 15:43:41.893" endtime="20191120 15:44:11.236" critical="yes"></status>
</test>
<status status="PASS" starttime="20191120 15:41:43.283" endtime="20191120 15:44:11.237"></status>
</suite>
<status status="PASS" starttime="20191120 15:41:43.281" endtime="20191120 15:44:11.241"></status>
</suite>
<status status="PASS" starttime="20191120 15:41:43.278" endtime="20191120 15:44:11.245"></status>
</suite>
<status status="PASS" starttime="20191120 15:41:43.275" endtime="20191120 15:44:11.248"></status>
</suite>
<status status="PASS" starttime="20191120 15:41:43.252" endtime="20191120 15:44:11.251"></status>
</suite>
<statistics>
<total>
<stat pass="5" fail="0">Critical Tests</stat>
<stat pass="5" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="5" fail="0" id="s1-s1" name="Test Resources">BulkPatching Robot.Test Resources</stat>
<stat pass="5" fail="0" id="s1-s1-s1" name="Test Suites">BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="5" fail="0" id="s1-s1-s1-s1" name="2. Insert All End As">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As</stat>
<stat pass="5" fail="0" id="s1-s1-s1-s1-s1" name="2.5. Check End A when plugging correct tip in the middle of list of End A then delete it">BulkPatching Robot.Test Resources.Test Suites.2. Insert All End As.2.5. Check End A when plugging correct tip in the middle of list of End A then delete it</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
