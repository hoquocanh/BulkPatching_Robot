<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20191217 16:54:10.526" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1" name="Test Resources" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources">
<suite id="s1-s1-s1" name="Test Suites" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites">
<suite id="s1-s1-s1-s1" name="4. Exit Bulk Patchings Screen" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\4. Exit Bulk Patchings Screen">
<suite id="s1-s1-s1-s1-s1" name="4.2. Check confirmation when number of patches on End B are less than End A" source="D:\RobotFW_program\BulkPatching_Robot\BulkPatching_Robot\Test Resources\Test Suites\4. Exit Bulk Patchings Screen\4.2. Check confirmation when number of patches on End B are less than End A.robot">
<test id="s1-s1-s1-s1-s1-t1" name="Exit_Bulk_02_01_01_Verify that imVision X shall create a confirm port if any port in End A / End B list is in the local controller, and the port is un-patched after selecting Exit button when there is a 24-port Legacy Copper">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSH definitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" starttime="20191217 16:54:10.955" endtime="20191217 16:54:10.955"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20191217 16:54:10.956" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20191217 16:54:12.839" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20191217 16:54:10.956" endtime="20191217 16:54:12.839"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:10.953" endtime="20191217 16:54:12.839"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="General Page">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20191217 16:54:12.839" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20191217 16:54:12.839" endtime="20191217 16:54:12.839"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20191217 16:54:12.839" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20191217 16:54:12.839" endtime="20191217 16:54:19.534"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20191217 16:54:19.535" endtime="20191217 16:54:20.653"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191217 16:54:21.655" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191217 16:54:20.654" endtime="20191217 16:54:21.655"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="General Page">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191217 16:54:21.669" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191217 16:54:21.656" endtime="20191217 16:54:21.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191217 16:54:21.670" endtime="20191217 16:54:21.670"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20191217 16:54:21.682" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20191217 16:54:21.671" endtime="20191217 16:54:21.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191217 16:54:21.682" endtime="20191217 16:54:21.683"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191217 16:54:21.694" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20191217 16:54:21.683" endtime="20191217 16:54:21.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20191217 16:54:21.694" endtime="20191217 16:54:21.695"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:21.656" endtime="20191217 16:54:21.695"></status>
</kw>
<kw name="Go To Home Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191217 16:54:21.696" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191217 16:54:21.696" endtime="20191217 16:54:21.779"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:21.696" endtime="20191217 16:54:21.779"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191217 16:54:22.783" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191217 16:54:21.780" endtime="20191217 16:54:22.783"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:21.780" endtime="20191217 16:54:22.784"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:21.695" endtime="20191217 16:54:22.784"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:12.839" endtime="20191217 16:54:22.785"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:10.953" endtime="20191217 16:54:22.785"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="Home Page">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20191217 16:54:22.787" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20191217 16:54:22.787" endtime="20191217 16:54:22.852"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191217 16:54:23.855" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191217 16:54:22.853" endtime="20191217 16:54:23.856"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:22.853" endtime="20191217 16:54:23.857"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:22.786" endtime="20191217 16:54:23.858"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="Virtual Panel definitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20191217 16:54:23.864" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20191217 16:54:23.862" endtime="20191217 16:54:23.864"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20191217 16:54:23.867" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20191217 16:54:23.865" endtime="20191217 16:54:23.867"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191217 16:54:23.876" level="INFO">Length is 12</msg>
<msg timestamp="20191217 16:54:23.877" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191217 16:54:23.875" endtime="20191217 16:54:23.877"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191217 16:54:23.884" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191217 16:54:23.883" endtime="20191217 16:54:23.884"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:23.881" endtime="20191217 16:54:23.884"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:23.879" endtime="20191217 16:54:23.885"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:23.878" endtime="20191217 16:54:23.885"></status>
</kw>
<msg timestamp="20191217 16:54:23.886" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191217 16:54:23.872" endtime="20191217 16:54:23.886"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191217 16:54:23.887" level="INFO">1</msg>
<status status="PASS" starttime="20191217 16:54:23.887" endtime="20191217 16:54:23.887"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191217 16:54:23.889" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191217 16:54:23.888" endtime="20191217 16:54:23.889"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191217 16:54:23.890" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191217 16:54:23.889" endtime="20191217 16:54:23.890"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191217 16:54:23.908" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191217 16:54:23.891" endtime="20191217 16:54:23.908"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191217 16:54:25.911" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:23.909" endtime="20191217 16:54:25.913"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191217 16:54:25.927" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:25.925" endtime="20191217 16:54:25.927"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:23.890" endtime="20191217 16:54:25.928"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:23.870" endtime="20191217 16:54:25.929"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:23.869" endtime="20191217 16:54:25.929"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191217 16:54:25.933" level="INFO">Length is 12</msg>
<msg timestamp="20191217 16:54:25.934" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191217 16:54:25.932" endtime="20191217 16:54:25.934"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191217 16:54:25.940" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191217 16:54:25.940" endtime="20191217 16:54:25.941"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:25.936" endtime="20191217 16:54:25.941"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:25.936" endtime="20191217 16:54:25.941"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:25.935" endtime="20191217 16:54:25.942"></status>
</kw>
<msg timestamp="20191217 16:54:25.943" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191217 16:54:25.931" endtime="20191217 16:54:25.944"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191217 16:54:25.945" level="INFO">1</msg>
<status status="PASS" starttime="20191217 16:54:25.945" endtime="20191217 16:54:25.946"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191217 16:54:25.947" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191217 16:54:25.946" endtime="20191217 16:54:25.947"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191217 16:54:25.949" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191217 16:54:25.948" endtime="20191217 16:54:25.949"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191217 16:54:25.961" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20191217 16:54:25.951" endtime="20191217 16:54:25.962"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191217 16:54:27.964" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:25.962" endtime="20191217 16:54:27.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191217 16:54:27.968" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:27.966" endtime="20191217 16:54:27.969"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:25.950" endtime="20191217 16:54:27.970"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:25.930" endtime="20191217 16:54:27.971"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:25.930" endtime="20191217 16:54:27.972"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191217 16:54:27.979" level="INFO">Length is 12</msg>
<msg timestamp="20191217 16:54:27.979" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191217 16:54:27.978" endtime="20191217 16:54:27.980"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191217 16:54:27.990" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191217 16:54:27.989" endtime="20191217 16:54:27.991"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:27.983" endtime="20191217 16:54:27.991"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:27.982" endtime="20191217 16:54:27.991"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:27.981" endtime="20191217 16:54:27.991"></status>
</kw>
<msg timestamp="20191217 16:54:27.992" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191217 16:54:27.975" endtime="20191217 16:54:27.993"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191217 16:54:27.994" level="INFO">1</msg>
<status status="PASS" starttime="20191217 16:54:27.993" endtime="20191217 16:54:27.994"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191217 16:54:27.995" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191217 16:54:27.994" endtime="20191217 16:54:27.995"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191217 16:54:27.996" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191217 16:54:27.996" endtime="20191217 16:54:27.997"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191217 16:54:28.020" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20191217 16:54:27.998" endtime="20191217 16:54:28.020"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191217 16:54:30.021" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:28.021" endtime="20191217 16:54:30.022"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191217 16:54:30.025" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:30.023" endtime="20191217 16:54:30.026"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:27.997" endtime="20191217 16:54:30.027"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:27.974" endtime="20191217 16:54:30.028"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:27.972" endtime="20191217 16:54:30.029"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:23.868" endtime="20191217 16:54:30.029"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:23.860" endtime="20191217 16:54:30.030"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="Bulk Patching Page">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20191217 16:54:30.035" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20191217 16:54:30.034" endtime="20191217 16:54:30.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191217 16:54:30.042" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20191217 16:54:30.041" endtime="20191217 16:54:30.118"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:30.039" endtime="20191217 16:54:30.118"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:30.037" endtime="20191217 16:54:30.119"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191217 16:54:31.132" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191217 16:54:30.120" endtime="20191217 16:54:31.132"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:30.119" endtime="20191217 16:54:31.132"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:30.032" endtime="20191217 16:54:31.132"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="Virtual Panel definitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20191217 16:54:31.132" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20191217 16:54:31.132" endtime="20191217 16:54:31.132"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20191217 16:54:31.132" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20191217 16:54:31.132" endtime="20191217 16:54:31.132"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191217 16:54:31.147" level="INFO">Length is 12</msg>
<msg timestamp="20191217 16:54:31.147" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191217 16:54:31.147" endtime="20191217 16:54:31.147"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191217 16:54:31.163" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191217 16:54:31.147" endtime="20191217 16:54:31.163"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:31.147" endtime="20191217 16:54:31.163"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:31.147" endtime="20191217 16:54:31.163"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:31.147" endtime="20191217 16:54:31.163"></status>
</kw>
<msg timestamp="20191217 16:54:31.163" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191217 16:54:31.147" endtime="20191217 16:54:31.163"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191217 16:54:31.163" level="INFO">1</msg>
<status status="PASS" starttime="20191217 16:54:31.163" endtime="20191217 16:54:31.163"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191217 16:54:31.163" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191217 16:54:31.163" endtime="20191217 16:54:31.163"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191217 16:54:31.163" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191217 16:54:31.163" endtime="20191217 16:54:31.178"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191217 16:54:31.248" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20191217 16:54:31.178" endtime="20191217 16:54:31.248"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191217 16:54:33.249" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:31.248" endtime="20191217 16:54:33.250"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191217 16:54:33.254" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:33.252" endtime="20191217 16:54:33.255"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:31.178" endtime="20191217 16:54:33.256"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:31.132" endtime="20191217 16:54:33.257"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:31.132" endtime="20191217 16:54:33.258"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191217 16:54:33.265" level="INFO">Length is 12</msg>
<msg timestamp="20191217 16:54:33.266" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191217 16:54:33.264" endtime="20191217 16:54:33.266"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191217 16:54:33.273" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191217 16:54:33.273" endtime="20191217 16:54:33.274"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:33.269" endtime="20191217 16:54:33.274"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:33.268" endtime="20191217 16:54:33.274"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:33.267" endtime="20191217 16:54:33.275"></status>
</kw>
<msg timestamp="20191217 16:54:33.275" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191217 16:54:33.262" endtime="20191217 16:54:33.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191217 16:54:33.277" level="INFO">1</msg>
<status status="PASS" starttime="20191217 16:54:33.276" endtime="20191217 16:54:33.277"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191217 16:54:33.278" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191217 16:54:33.278" endtime="20191217 16:54:33.279"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191217 16:54:33.280" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191217 16:54:33.279" endtime="20191217 16:54:33.280"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191217 16:54:33.292" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20191217 16:54:33.282" endtime="20191217 16:54:33.292"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191217 16:54:35.293" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:33.293" endtime="20191217 16:54:35.294"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191217 16:54:35.297" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:35.295" endtime="20191217 16:54:35.298"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:33.280" endtime="20191217 16:54:35.299"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:33.260" endtime="20191217 16:54:35.300"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:33.259" endtime="20191217 16:54:35.301"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191217 16:54:35.309" level="INFO">Length is 12</msg>
<msg timestamp="20191217 16:54:35.309" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191217 16:54:35.307" endtime="20191217 16:54:35.310"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191217 16:54:35.320" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191217 16:54:35.319" endtime="20191217 16:54:35.321"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:35.313" endtime="20191217 16:54:35.321"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:35.312" endtime="20191217 16:54:35.322"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:35.310" endtime="20191217 16:54:35.323"></status>
</kw>
<msg timestamp="20191217 16:54:35.325" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191217 16:54:35.305" endtime="20191217 16:54:35.325"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191217 16:54:35.327" level="INFO">1</msg>
<status status="PASS" starttime="20191217 16:54:35.326" endtime="20191217 16:54:35.328"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191217 16:54:35.331" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191217 16:54:35.329" endtime="20191217 16:54:35.331"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191217 16:54:35.333" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191217 16:54:35.332" endtime="20191217 16:54:35.334"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191217 16:54:35.355" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191217 16:54:35.337" endtime="20191217 16:54:35.355"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191217 16:54:37.357" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:35.356" endtime="20191217 16:54:37.357"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191217 16:54:37.359" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:37.358" endtime="20191217 16:54:37.360"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:35.335" endtime="20191217 16:54:37.360"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:35.303" endtime="20191217 16:54:37.361"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:35.302" endtime="20191217 16:54:37.361"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:31.132" endtime="20191217 16:54:37.361"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:31.132" endtime="20191217 16:54:37.362"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;6&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191217 16:54:37.365" level="INFO">Length is 12</msg>
<msg timestamp="20191217 16:54:37.366" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191217 16:54:37.365" endtime="20191217 16:54:37.366"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191217 16:54:37.372" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191217 16:54:37.371" endtime="20191217 16:54:37.372"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:37.368" endtime="20191217 16:54:37.372"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:37.367" endtime="20191217 16:54:37.373"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:37.366" endtime="20191217 16:54:37.373"></status>
</kw>
<msg timestamp="20191217 16:54:37.374" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191217 16:54:37.364" endtime="20191217 16:54:37.374"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191217 16:54:37.376" level="INFO">1</msg>
<status status="PASS" starttime="20191217 16:54:37.375" endtime="20191217 16:54:37.376"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191217 16:54:37.378" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191217 16:54:37.376" endtime="20191217 16:54:37.378"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191217 16:54:37.379" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191217 16:54:37.378" endtime="20191217 16:54:37.380"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191217 16:54:37.413" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20191217 16:54:37.381" endtime="20191217 16:54:37.413"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191217 16:54:39.415" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:37.413" endtime="20191217 16:54:39.416"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191217 16:54:39.418" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:39.416" endtime="20191217 16:54:39.418"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:37.380" endtime="20191217 16:54:39.419"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:37.363" endtime="20191217 16:54:39.419"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="Virtual Panel definitions">
<kw name="Get Copper Panel Index" library="Virtual Panel definitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20191217 16:54:39.423" level="INFO">Length is 12</msg>
<msg timestamp="20191217 16:54:39.424" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20191217 16:54:39.423" endtime="20191217 16:54:39.424"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20191217 16:54:39.430" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20191217 16:54:39.430" endtime="20191217 16:54:39.431"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:39.426" endtime="20191217 16:54:39.431"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:39.425" endtime="20191217 16:54:39.431"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:39.424" endtime="20191217 16:54:39.432"></status>
</kw>
<msg timestamp="20191217 16:54:39.433" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20191217 16:54:39.421" endtime="20191217 16:54:39.433"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20191217 16:54:39.435" level="INFO">1</msg>
<status status="PASS" starttime="20191217 16:54:39.434" endtime="20191217 16:54:39.435"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20191217 16:54:39.437" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191217 16:54:39.436" endtime="20191217 16:54:39.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20191217 16:54:39.438" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191217 16:54:39.438" endtime="20191217 16:54:39.439"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSH definitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20191217 16:54:39.452" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20191217 16:54:39.441" endtime="20191217 16:54:39.452"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20191217 16:54:41.454" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:39.452" endtime="20191217 16:54:41.455"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20191217 16:54:41.458" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20191217 16:54:41.456" endtime="20191217 16:54:41.459"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:39.440" endtime="20191217 16:54:41.460"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:39.420" endtime="20191217 16:54:41.461"></status>
</kw>
<kw name="And Exit Screen" library="General Page">
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191217 16:54:41.465" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20191217 16:54:41.464" endtime="20191217 16:54:41.526"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:41.463" endtime="20191217 16:54:41.527"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191217 16:54:42.528" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191217 16:54:41.528" endtime="20191217 16:54:42.529"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:41.527" endtime="20191217 16:54:42.530"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:41.462" endtime="20191217 16:54:42.531"></status>
</kw>
<kw name="Then Check The Number of Confirm is &quot;2&quot;" library="General definitions">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Value Should Be</arg>
<arg>${btnConfirm}</arg>
<arg>value</arg>
<arg>${confirm number}</arg>
</arguments>
<kw name="Element Attribute Value Should Be" library="SeleniumLibrary">
<doc>Verifies element identified by ``locator`` contains expected attribute value.</doc>
<arguments>
<arg>${btnConfirm}</arg>
<arg>value</arg>
<arg>${confirm number}</arg>
</arguments>
<msg timestamp="20191217 16:54:42.590" level="INFO">Element '//div[@id='confirms' and @style='visibility: visible;']//input[@type='submit']' attribute 'value' contains value '2'.</msg>
<status status="PASS" starttime="20191217 16:54:42.536" endtime="20191217 16:54:42.590"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:42.534" endtime="20191217 16:54:42.591"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:42.533" endtime="20191217 16:54:42.591"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="General Page" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20191217 16:54:42.606" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20191217 16:54:42.593" endtime="20191217 16:54:42.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20191217 16:54:42.606" endtime="20191217 16:54:42.607"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20191217 16:54:42.617" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20191217 16:54:42.607" endtime="20191217 16:54:42.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="General Page">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20191217 16:54:42.620" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20191217 16:54:42.620" endtime="20191217 16:54:42.650"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:42.619" endtime="20191217 16:54:42.651"></status>
</kw>
<kw name="Wait For Page Load" library="General Page">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20191217 16:54:43.653" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20191217 16:54:42.652" endtime="20191217 16:54:43.653"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:42.651" endtime="20191217 16:54:43.653"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:42.619" endtime="20191217 16:54:43.653"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:42.618" endtime="20191217 16:54:43.654"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20191217 16:54:43.654" endtime="20191217 16:54:45.748"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:42.592" endtime="20191217 16:54:45.749"></status>
</kw>
<status status="PASS" starttime="20191217 16:54:10.952" endtime="20191217 16:54:45.751" critical="yes"></status>
</test>
<status status="PASS" starttime="20191217 16:54:10.584" endtime="20191217 16:54:45.753"></status>
</suite>
<status status="PASS" starttime="20191217 16:54:10.582" endtime="20191217 16:54:45.757"></status>
</suite>
<status status="PASS" starttime="20191217 16:54:10.580" endtime="20191217 16:54:45.760"></status>
</suite>
<status status="PASS" starttime="20191217 16:54:10.578" endtime="20191217 16:54:45.763"></status>
</suite>
<status status="PASS" starttime="20191217 16:54:10.554" endtime="20191217 16:54:45.766"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="1" fail="0" id="s1-s1" name="Test Resources">BulkPatching Robot.Test Resources</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Test Suites">BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1" name="4. Exit Bulk Patchings Screen">BulkPatching Robot.Test Resources.Test Suites.4. Exit Bulk Patchings Screen</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1-s1" name="4.2. Check confirmation when number of patches on End B are less than End A">BulkPatching Robot.Test Resources.Test Suites.4. Exit Bulk Patchings Screen.4.2. Check confirmation when number of patches on End B are less than End A</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
