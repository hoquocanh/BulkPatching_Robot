<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20200110 18:33:16.919" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="C:\Users\quocanh.ho\git\BulkPatching_Robot">
<suite id="s1-s1" name="BulkPatching Robot" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1-s1" name="Test Resources" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot\Test_Resources">
<suite id="s1-s1-s1-s1" name="Test Suites" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot\Test_Resources\Test_Suites">
<suite id="s1-s1-s1-s1-s1" name="3.Insert All End Bs" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot\Test_Resources\Test_Suites\3.Insert_All_End_Bs">
<suite id="s1-s1-s1-s1-s1-s1" name="3.5.CheckEndBWhenPluggingCorrectTipInTheMiddleOfListOfEndBThenReplug" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot\Test_Resources\Test_Suites\3.Insert_All_End_Bs\3.5.CheckEndBWhenPluggingCorrectTipInTheMiddleOfListOfEndBThenReplug.robot">
<test id="s1-s1-s1-s1-s1-s1-t1" name="INSERT_END_B_05_01_Verify that imVision X needs to generate beep tone when plugging a connector that is matched to one of unplugged connectors in the End B list if there is a 24-port Legacy Copper">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSHDefinitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST_A}</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:17.466" endtime="20200110 18:33:17.466"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20200110 18:33:17.466" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20200110 18:33:18.857" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20200110 18:33:17.466" endtime="20200110 18:33:18.857"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:17.466" endtime="20200110 18:33:18.857"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="GeneralPage">
<tags>
<tag>host_A</tag>
<tag>host_B</tag>
</tags>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST A}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20200110 18:33:18.857" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20200110 18:33:18.857" endtime="20200110 18:33:18.857"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200110 18:33:18.857" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20200110 18:33:18.857" endtime="20200110 18:33:22.258"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20200110 18:33:22.259" endtime="20200110 18:33:23.413"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:33:24.417" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:33:23.413" endtime="20200110 18:33:24.417"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="GeneralPage">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200110 18:33:24.433" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20200110 18:33:24.417" endtime="20200110 18:33:24.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:24.433" endtime="20200110 18:33:24.449"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20200110 18:33:24.464" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20200110 18:33:24.449" endtime="20200110 18:33:24.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:24.464" endtime="20200110 18:33:24.464"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200110 18:33:24.480" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20200110 18:33:24.464" endtime="20200110 18:33:24.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:24.480" endtime="20200110 18:33:24.496"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:24.417" endtime="20200110 18:33:24.496"></status>
</kw>
<kw name="Go To Home Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:33:24.511" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:33:24.496" endtime="20200110 18:33:24.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:33:24.511" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200110 18:33:24.511" endtime="20200110 18:33:24.605"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:33:25.610" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:33:24.608" endtime="20200110 18:33:25.610"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:24.606" endtime="20200110 18:33:25.611"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:24.511" endtime="20200110 18:33:25.612"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:24.511" endtime="20200110 18:33:25.612"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:24.511" endtime="20200110 18:33:25.613"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:24.496" endtime="20200110 18:33:25.615"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:24.496" endtime="20200110 18:33:25.616"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:18.857" endtime="20200110 18:33:25.617"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:17.466" endtime="20200110 18:33:25.617"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="HomePage">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20200110 18:33:25.622" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20200110 18:33:25.621" endtime="20200110 18:33:25.687"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:33:26.700" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:33:25.688" endtime="20200110 18:33:26.700"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:25.688" endtime="20200110 18:33:26.700"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:25.619" endtime="20200110 18:33:26.700"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:33:26.700" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200110 18:33:26.700" endtime="20200110 18:33:26.700"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:33:26.700" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20200110 18:33:26.700" endtime="20200110 18:33:26.700"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:26.700" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:26.700" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:26.700" endtime="20200110 18:33:26.700"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:26.716" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:26.716" endtime="20200110 18:33:26.716"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:26.716" endtime="20200110 18:33:26.716"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:26.716" endtime="20200110 18:33:26.716"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:26.716" endtime="20200110 18:33:26.716"></status>
</kw>
<msg timestamp="20200110 18:33:26.716" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:26.700" endtime="20200110 18:33:26.716"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:26.716" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:26.716" endtime="20200110 18:33:26.716"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:26.716" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200110 18:33:26.716" endtime="20200110 18:33:26.716"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:26.716" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200110 18:33:26.716" endtime="20200110 18:33:26.716"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:26.794" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200110 18:33:26.716" endtime="20200110 18:33:26.794"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:28.804" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:26.794" endtime="20200110 18:33:28.805"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:28.807" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:28.806" endtime="20200110 18:33:28.808"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:26.716" endtime="20200110 18:33:28.808"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:26.700" endtime="20200110 18:33:28.809"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:26.700" endtime="20200110 18:33:28.810"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:28.815" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:28.815" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:28.814" endtime="20200110 18:33:28.816"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:28.822" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:28.822" endtime="20200110 18:33:28.822"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:28.818" endtime="20200110 18:33:28.822"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:28.817" endtime="20200110 18:33:28.822"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:28.816" endtime="20200110 18:33:28.822"></status>
</kw>
<msg timestamp="20200110 18:33:28.822" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:28.813" endtime="20200110 18:33:28.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:28.822" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:28.822" endtime="20200110 18:33:28.822"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:28.822" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200110 18:33:28.822" endtime="20200110 18:33:28.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:28.822" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200110 18:33:28.822" endtime="20200110 18:33:28.822"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:28.916" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200110 18:33:28.822" endtime="20200110 18:33:28.917"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:30.942" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:28.918" endtime="20200110 18:33:30.942"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:30.942" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:30.942" endtime="20200110 18:33:30.942"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:28.822" endtime="20200110 18:33:30.942"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:28.811" endtime="20200110 18:33:30.942"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:28.810" endtime="20200110 18:33:30.942"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:30.942" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:30.942" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:30.942" endtime="20200110 18:33:30.942"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:30.942" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:30.942" endtime="20200110 18:33:30.942"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:30.942" endtime="20200110 18:33:30.942"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:30.942" endtime="20200110 18:33:30.942"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:30.942" endtime="20200110 18:33:30.942"></status>
</kw>
<msg timestamp="20200110 18:33:30.942" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:30.942" endtime="20200110 18:33:30.942"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:30.942" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:30.942" endtime="20200110 18:33:30.942"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:30.942" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20200110 18:33:30.942" endtime="20200110 18:33:30.942"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:30.942" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20200110 18:33:30.942" endtime="20200110 18:33:30.957"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:31.036" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20200110 18:33:30.957" endtime="20200110 18:33:31.036"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:33.051" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:31.036" endtime="20200110 18:33:33.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:33.051" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:33.051" endtime="20200110 18:33:33.051"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:30.957" endtime="20200110 18:33:33.051"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:30.942" endtime="20200110 18:33:33.051"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:30.942" endtime="20200110 18:33:33.051"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:26.700" endtime="20200110 18:33:33.051"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:26.700" endtime="20200110 18:33:33.051"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="BulkPatchingPage">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20200110 18:33:33.051" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20200110 18:33:33.051" endtime="20200110 18:33:33.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:33:33.067" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:33:33.051" endtime="20200110 18:33:33.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:33:33.067" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20200110 18:33:33.067" endtime="20200110 18:33:33.149"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:33:34.152" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:33:33.150" endtime="20200110 18:33:34.152"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:33.149" endtime="20200110 18:33:34.152"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:33.067" endtime="20200110 18:33:34.152"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:33.067" endtime="20200110 18:33:34.152"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:33.067" endtime="20200110 18:33:34.152"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:33.051" endtime="20200110 18:33:34.152"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:33.051" endtime="20200110 18:33:34.152"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:33:35.156" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:33:34.152" endtime="20200110 18:33:35.156"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:34.152" endtime="20200110 18:33:35.156"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:33.051" endtime="20200110 18:33:35.156"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:33:35.156" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20200110 18:33:35.156" endtime="20200110 18:33:35.156"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:33:35.156" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20200110 18:33:35.156" endtime="20200110 18:33:35.156"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:35.156" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:35.156" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:35.156" endtime="20200110 18:33:35.156"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:35.172" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:35.172" endtime="20200110 18:33:35.172"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:35.172" endtime="20200110 18:33:35.172"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:35.172" endtime="20200110 18:33:35.172"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:35.172" endtime="20200110 18:33:35.172"></status>
</kw>
<msg timestamp="20200110 18:33:35.172" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:35.156" endtime="20200110 18:33:35.172"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:35.172" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:35.172" endtime="20200110 18:33:35.172"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:35.172" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200110 18:33:35.172" endtime="20200110 18:33:35.172"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:35.172" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200110 18:33:35.172" endtime="20200110 18:33:35.172"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:35.234" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200110 18:33:35.187" endtime="20200110 18:33:35.234"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:37.250" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:35.234" endtime="20200110 18:33:37.250"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:37.250" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:37.250" endtime="20200110 18:33:37.250"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:35.187" endtime="20200110 18:33:37.250"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:35.156" endtime="20200110 18:33:37.250"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:35.156" endtime="20200110 18:33:37.250"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:37.250" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:37.250" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:37.250" endtime="20200110 18:33:37.250"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:37.265" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:37.265" endtime="20200110 18:33:37.265"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:37.250" endtime="20200110 18:33:37.265"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:37.250" endtime="20200110 18:33:37.265"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:37.250" endtime="20200110 18:33:37.265"></status>
</kw>
<msg timestamp="20200110 18:33:37.265" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:37.250" endtime="20200110 18:33:37.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:37.265" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:37.265" endtime="20200110 18:33:37.265"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:37.265" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200110 18:33:37.265" endtime="20200110 18:33:37.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:37.265" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200110 18:33:37.265" endtime="20200110 18:33:37.265"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:37.312" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200110 18:33:37.265" endtime="20200110 18:33:37.312"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:39.317" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:37.312" endtime="20200110 18:33:39.317"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:39.317" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:39.317" endtime="20200110 18:33:39.317"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:37.265" endtime="20200110 18:33:39.317"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:37.250" endtime="20200110 18:33:39.317"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:37.250" endtime="20200110 18:33:39.317"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:39.317" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:39.317" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:39.317" endtime="20200110 18:33:39.317"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:39.333" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:39.333" endtime="20200110 18:33:39.333"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:39.317" endtime="20200110 18:33:39.333"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:39.317" endtime="20200110 18:33:39.333"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:39.317" endtime="20200110 18:33:39.333"></status>
</kw>
<msg timestamp="20200110 18:33:39.333" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:39.317" endtime="20200110 18:33:39.333"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:39.333" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:39.333" endtime="20200110 18:33:39.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:39.333" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20200110 18:33:39.333" endtime="20200110 18:33:39.333"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:39.333" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20200110 18:33:39.333" endtime="20200110 18:33:39.333"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:39.380" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20200110 18:33:39.333" endtime="20200110 18:33:39.380"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:41.384" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:39.380" endtime="20200110 18:33:41.384"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:41.384" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:41.384" endtime="20200110 18:33:41.384"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:39.333" endtime="20200110 18:33:41.384"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:39.317" endtime="20200110 18:33:41.384"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:39.317" endtime="20200110 18:33:41.384"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:35.156" endtime="20200110 18:33:41.384"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:35.156" endtime="20200110 18:33:41.384"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;5&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:41.384" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:41.384" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:41.384" endtime="20200110 18:33:41.384"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:41.399" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:41.399" endtime="20200110 18:33:41.399"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:41.384" endtime="20200110 18:33:41.399"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:41.384" endtime="20200110 18:33:41.399"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:41.384" endtime="20200110 18:33:41.399"></status>
</kw>
<msg timestamp="20200110 18:33:41.399" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:41.384" endtime="20200110 18:33:41.399"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:41.399" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:41.399" endtime="20200110 18:33:41.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:41.399" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200110 18:33:41.399" endtime="20200110 18:33:41.399"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:41.399" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200110 18:33:41.399" endtime="20200110 18:33:41.399"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:41.509" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200110 18:33:41.399" endtime="20200110 18:33:41.509"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:43.513" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:41.509" endtime="20200110 18:33:43.513"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:43.513" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:43.513" endtime="20200110 18:33:43.513"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:41.399" endtime="20200110 18:33:43.513"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:41.384" endtime="20200110 18:33:43.513"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:43.513" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:43.513" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:43.513" endtime="20200110 18:33:43.513"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:43.529" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:43.529" endtime="20200110 18:33:43.529"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:43.513" endtime="20200110 18:33:43.529"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:43.513" endtime="20200110 18:33:43.529"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:43.513" endtime="20200110 18:33:43.529"></status>
</kw>
<msg timestamp="20200110 18:33:43.529" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:43.513" endtime="20200110 18:33:43.529"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:43.529" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:43.529" endtime="20200110 18:33:43.529"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:43.529" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200110 18:33:43.529" endtime="20200110 18:33:43.529"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:43.529" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200110 18:33:43.529" endtime="20200110 18:33:43.529"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:43.576" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200110 18:33:43.529" endtime="20200110 18:33:43.576"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:45.583" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:43.576" endtime="20200110 18:33:45.583"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:45.583" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:45.583" endtime="20200110 18:33:45.583"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:43.529" endtime="20200110 18:33:45.583"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:43.513" endtime="20200110 18:33:45.583"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;5&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:45.583" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:45.583" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:45.583" endtime="20200110 18:33:45.583"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:45.599" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:45.599" endtime="20200110 18:33:45.599"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:45.583" endtime="20200110 18:33:45.599"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:45.583" endtime="20200110 18:33:45.599"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:45.583" endtime="20200110 18:33:45.599"></status>
</kw>
<msg timestamp="20200110 18:33:45.599" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:45.583" endtime="20200110 18:33:45.599"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:45.599" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:45.599" endtime="20200110 18:33:45.599"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:45.599" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200110 18:33:45.599" endtime="20200110 18:33:45.599"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:45.599" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200110 18:33:45.599" endtime="20200110 18:33:45.599"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:45.692" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200110 18:33:45.599" endtime="20200110 18:33:45.692"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:47.693" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:45.692" endtime="20200110 18:33:47.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:47.697" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:47.695" endtime="20200110 18:33:47.698"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:45.599" endtime="20200110 18:33:47.699"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:45.583" endtime="20200110 18:33:47.699"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;5&quot; in End &quot;B&quot; color &quot;black&quot;" library="BulkPatchingDefinitions">
<doc>This keyword is used to check the color of port information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>4</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:47.703" endtime="20200110 18:33:47.704"></status>
</kw>
<msg timestamp="20200110 18:33:47.705" level="INFO">${input end position} = 4</msg>
<status status="PASS" starttime="20200110 18:33:47.702" endtime="20200110 18:33:47.705"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20200110 18:33:47.707" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20200110 18:33:47.706" endtime="20200110 18:33:47.708"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20200110 18:33:47.709" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20200110 18:33:47.708" endtime="20200110 18:33:47.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20200110 18:33:47.712" level="INFO">${input port} = -Port 5</msg>
<status status="PASS" starttime="20200110 18:33:47.711" endtime="20200110 18:33:47.713"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20200110 18:33:47.715" level="INFO">${input port information} = Rack 1-Panel 1-Port 5</msg>
<status status="PASS" starttime="20200110 18:33:47.714" endtime="20200110 18:33:47.716"></status>
</kw>
<kw name="Get Color Code of Port Information" library="BulkPatchingDefinitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20200110 18:33:47.719" level="INFO">${color} = black</msg>
<status status="PASS" starttime="20200110 18:33:47.718" endtime="20200110 18:33:47.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#000;</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:47.722" endtime="20200110 18:33:47.723"></status>
</kw>
<msg timestamp="20200110 18:33:47.724" level="INFO">${color code} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:33:47.720" endtime="20200110 18:33:47.724"></status>
</kw>
<msg timestamp="20200110 18:33:47.725" level="INFO">${input color} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:33:47.717" endtime="20200110 18:33:47.725"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position with color}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20200110 18:33:47.727" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='Color']/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20200110 18:33:47.726" endtime="20200110 18:33:47.728"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20200110 18:33:47.729" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='Color']/p[contains(text(),'Rack 1-Panel 1-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:33:47.728" endtime="20200110 18:33:47.730"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20200110 18:33:47.732" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:33:47.731" endtime="20200110 18:33:47.732"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="BulkPatchingDefinitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:33:47.752" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20200110 18:33:47.733" endtime="20200110 18:33:47.753"></status>
</kw>
<msg timestamp="20200110 18:33:47.753" level="INFO">${number of lines} = 3</msg>
<status status="PASS" starttime="20200110 18:33:47.733" endtime="20200110 18:33:47.753"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:33:47.754" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:33:47.754" endtime="20200110 18:33:47.754"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:33:47.756" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20200110 18:33:47.755" endtime="20200110 18:33:47.756"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:33:47.757" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20200110 18:33:47.757" endtime="20200110 18:33:47.758"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:33:47.758" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:33:47.758" endtime="20200110 18:33:47.759"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:33:47.759" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:33:47.759" endtime="20200110 18:33:47.760"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:33:47.775" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:33:47.760" endtime="20200110 18:33:47.775"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:47.776" endtime="20200110 18:33:47.776"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:47.755" endtime="20200110 18:33:47.777"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:33:47.778" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20200110 18:33:47.777" endtime="20200110 18:33:47.778"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:33:47.779" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20200110 18:33:47.778" endtime="20200110 18:33:47.779"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:33:47.780" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:33:47.779" endtime="20200110 18:33:47.780"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:33:47.781" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:33:47.780" endtime="20200110 18:33:47.781"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:33:47.795" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20200110 18:33:47.781" endtime="20200110 18:33:47.796"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20200110 18:33:47.797" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:47.796" endtime="20200110 18:33:47.797"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:47.777" endtime="20200110 18:33:47.797"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:47.755" endtime="20200110 18:33:47.797"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:47.798" endtime="20200110 18:33:47.799"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:47.798" endtime="20200110 18:33:47.799"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:47.701" endtime="20200110 18:33:47.799"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtRestoreTheUnpluggedEndBPort}&quot;" library="BulkPatchingDefinitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20200110 18:33:47.836" level="INFO">${get helptext} = Restore the unplugged End B ports, or press Delete to reorder the entries.</msg>
<status status="PASS" starttime="20200110 18:33:47.800" endtime="20200110 18:33:47.836"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:47.837" endtime="20200110 18:33:47.838"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:47.837" endtime="20200110 18:33:47.838"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:47.800" endtime="20200110 18:33:47.839"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:47.842" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:47.843" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:47.841" endtime="20200110 18:33:47.843"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:47.847" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:47.846" endtime="20200110 18:33:47.847"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:47.844" endtime="20200110 18:33:47.847"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:47.844" endtime="20200110 18:33:47.848"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:47.843" endtime="20200110 18:33:47.848"></status>
</kw>
<msg timestamp="20200110 18:33:47.849" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:47.840" endtime="20200110 18:33:47.849"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:47.850" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:47.850" endtime="20200110 18:33:47.851"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:47.852" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200110 18:33:47.851" endtime="20200110 18:33:47.852"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:47.853" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200110 18:33:47.852" endtime="20200110 18:33:47.853"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:47.868" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200110 18:33:47.854" endtime="20200110 18:33:47.868"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:49.872" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:47.869" endtime="20200110 18:33:49.873"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:49.875" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:49.874" endtime="20200110 18:33:49.876"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:47.853" endtime="20200110 18:33:49.876"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:47.840" endtime="20200110 18:33:49.877"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot; in End &quot;B&quot; color &quot;black&quot;" library="BulkPatchingDefinitions">
<doc>This keyword is used to check the color of port information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>4</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:49.881" endtime="20200110 18:33:49.882"></status>
</kw>
<msg timestamp="20200110 18:33:49.882" level="INFO">${input end position} = 4</msg>
<status status="PASS" starttime="20200110 18:33:49.879" endtime="20200110 18:33:49.883"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20200110 18:33:49.884" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20200110 18:33:49.883" endtime="20200110 18:33:49.884"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20200110 18:33:49.886" level="INFO">${input panel} = -Panel 1</msg>
<status status="PASS" starttime="20200110 18:33:49.885" endtime="20200110 18:33:49.887"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20200110 18:33:49.888" level="INFO">${input port} = -Port 4</msg>
<status status="PASS" starttime="20200110 18:33:49.887" endtime="20200110 18:33:49.889"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20200110 18:33:49.890" level="INFO">${input port information} = Rack 1-Panel 1-Port 4</msg>
<status status="PASS" starttime="20200110 18:33:49.889" endtime="20200110 18:33:49.891"></status>
</kw>
<kw name="Get Color Code of Port Information" library="BulkPatchingDefinitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20200110 18:33:49.893" level="INFO">${color} = black</msg>
<status status="PASS" starttime="20200110 18:33:49.893" endtime="20200110 18:33:49.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#000;</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:49.895" endtime="20200110 18:33:49.895"></status>
</kw>
<msg timestamp="20200110 18:33:49.895" level="INFO">${color code} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:33:49.894" endtime="20200110 18:33:49.895"></status>
</kw>
<msg timestamp="20200110 18:33:49.896" level="INFO">${input color} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:33:49.891" endtime="20200110 18:33:49.896"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position with color}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20200110 18:33:49.897" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='Color']/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20200110 18:33:49.896" endtime="20200110 18:33:49.897"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20200110 18:33:49.898" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='Color']/p[contains(text(),'Rack 1-Panel 1-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:33:49.898" endtime="20200110 18:33:49.898"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20200110 18:33:49.899" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:33:49.899" endtime="20200110 18:33:49.900"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="BulkPatchingDefinitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:33:49.913" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20200110 18:33:49.901" endtime="20200110 18:33:49.914"></status>
</kw>
<msg timestamp="20200110 18:33:49.914" level="INFO">${number of lines} = 3</msg>
<status status="PASS" starttime="20200110 18:33:49.900" endtime="20200110 18:33:49.914"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:33:49.915" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:33:49.915" endtime="20200110 18:33:49.916"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:33:49.918" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20200110 18:33:49.917" endtime="20200110 18:33:49.918"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:33:49.919" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20200110 18:33:49.918" endtime="20200110 18:33:49.919"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:33:49.920" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:33:49.920" endtime="20200110 18:33:49.921"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:33:49.921" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 1-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:33:49.921" endtime="20200110 18:33:49.922"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:33:49.938" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20200110 18:33:49.922" endtime="20200110 18:33:49.938"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20200110 18:33:49.939" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:49.938" endtime="20200110 18:33:49.939"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.916" endtime="20200110 18:33:49.940"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.916" endtime="20200110 18:33:49.940"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:49.941" endtime="20200110 18:33:49.941"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.940" endtime="20200110 18:33:49.942"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.878" endtime="20200110 18:33:49.942"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtPressExitToCompleteBulkPatching}&quot;" library="BulkPatchingDefinitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20200110 18:33:49.963" level="INFO">${get helptext} = Press Exit to complete bulk patching.</msg>
<status status="PASS" starttime="20200110 18:33:49.943" endtime="20200110 18:33:49.964"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200110 18:33:49.965" endtime="20200110 18:33:49.965"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.964" endtime="20200110 18:33:49.966"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.942" endtime="20200110 18:33:49.966"></status>
</kw>
<kw name="And Plugout Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:33:49.968" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20200110 18:33:49.967" endtime="20200110 18:33:49.968"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:33:49.969" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20200110 18:33:49.968" endtime="20200110 18:33:49.969"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:49.972" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:49.973" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:49.972" endtime="20200110 18:33:49.973"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:49.976" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:49.976" endtime="20200110 18:33:49.976"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.974" endtime="20200110 18:33:49.977"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.974" endtime="20200110 18:33:49.977"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.973" endtime="20200110 18:33:49.977"></status>
</kw>
<msg timestamp="20200110 18:33:49.978" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:49.971" endtime="20200110 18:33:49.978"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:49.979" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:49.979" endtime="20200110 18:33:49.979"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:49.980" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200110 18:33:49.980" endtime="20200110 18:33:49.981"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:49.981" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200110 18:33:49.981" endtime="20200110 18:33:49.982"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:50.002" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200110 18:33:49.983" endtime="20200110 18:33:50.003"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:52.005" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:50.003" endtime="20200110 18:33:52.006"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:52.008" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:52.007" endtime="20200110 18:33:52.009"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.982" endtime="20200110 18:33:52.009"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.970" endtime="20200110 18:33:52.010"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.970" endtime="20200110 18:33:52.011"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:52.018" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:52.019" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:52.017" endtime="20200110 18:33:52.020"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:52.028" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:52.027" endtime="20200110 18:33:52.028"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:52.023" endtime="20200110 18:33:52.029"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:52.022" endtime="20200110 18:33:52.029"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:52.021" endtime="20200110 18:33:52.030"></status>
</kw>
<msg timestamp="20200110 18:33:52.031" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:52.015" endtime="20200110 18:33:52.031"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:52.033" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:52.032" endtime="20200110 18:33:52.033"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:52.035" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200110 18:33:52.034" endtime="20200110 18:33:52.035"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:52.037" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200110 18:33:52.036" endtime="20200110 18:33:52.037"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:52.053" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200110 18:33:52.039" endtime="20200110 18:33:52.054"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:54.056" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:52.054" endtime="20200110 18:33:54.057"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:54.059" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:54.058" endtime="20200110 18:33:54.060"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:52.038" endtime="20200110 18:33:54.061"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:52.012" endtime="20200110 18:33:54.061"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:52.011" endtime="20200110 18:33:54.062"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:54.067" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:54.067" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:54.066" endtime="20200110 18:33:54.068"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:54.074" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:54.073" endtime="20200110 18:33:54.075"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:54.070" endtime="20200110 18:33:54.075"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:54.069" endtime="20200110 18:33:54.075"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:54.068" endtime="20200110 18:33:54.076"></status>
</kw>
<msg timestamp="20200110 18:33:54.077" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:54.064" endtime="20200110 18:33:54.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:54.079" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:54.078" endtime="20200110 18:33:54.079"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:54.081" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20200110 18:33:54.080" endtime="20200110 18:33:54.081"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:54.083" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20200110 18:33:54.082" endtime="20200110 18:33:54.083"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:54.099" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20200110 18:33:54.085" endtime="20200110 18:33:54.100"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:56.101" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:54.100" endtime="20200110 18:33:56.102"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:56.104" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:56.103" endtime="20200110 18:33:56.105"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:54.084" endtime="20200110 18:33:56.105"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:54.063" endtime="20200110 18:33:56.106"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:54.062" endtime="20200110 18:33:56.106"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.969" endtime="20200110 18:33:56.107"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:49.967" endtime="20200110 18:33:56.107"></status>
</kw>
<kw name="And Plugout Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:33:56.111" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200110 18:33:56.110" endtime="20200110 18:33:56.111"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:33:56.113" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20200110 18:33:56.112" endtime="20200110 18:33:56.113"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:56.118" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:56.119" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:56.118" endtime="20200110 18:33:56.119"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:56.125" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:56.125" endtime="20200110 18:33:56.126"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:56.121" endtime="20200110 18:33:56.126"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:56.121" endtime="20200110 18:33:56.127"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:56.120" endtime="20200110 18:33:56.127"></status>
</kw>
<msg timestamp="20200110 18:33:56.128" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:56.116" endtime="20200110 18:33:56.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:56.130" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:56.130" endtime="20200110 18:33:56.131"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:56.132" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200110 18:33:56.131" endtime="20200110 18:33:56.132"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:56.133" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200110 18:33:56.133" endtime="20200110 18:33:56.133"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:56.148" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200110 18:33:56.135" endtime="20200110 18:33:56.149"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:33:58.151" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:56.149" endtime="20200110 18:33:58.152"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:33:58.154" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:58.153" endtime="20200110 18:33:58.155"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:56.134" endtime="20200110 18:33:58.155"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:56.115" endtime="20200110 18:33:58.156"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:56.114" endtime="20200110 18:33:58.157"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:33:58.161" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:33:58.162" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:33:58.161" endtime="20200110 18:33:58.162"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:33:58.168" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:33:58.168" endtime="20200110 18:33:58.169"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:58.164" endtime="20200110 18:33:58.169"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:58.163" endtime="20200110 18:33:58.170"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:58.163" endtime="20200110 18:33:58.170"></status>
</kw>
<msg timestamp="20200110 18:33:58.171" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:33:58.159" endtime="20200110 18:33:58.172"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:33:58.173" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:33:58.172" endtime="20200110 18:33:58.173"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:33:58.174" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200110 18:33:58.173" endtime="20200110 18:33:58.174"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:33:58.175" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200110 18:33:58.174" endtime="20200110 18:33:58.175"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:33:58.190" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200110 18:33:58.176" endtime="20200110 18:33:58.191"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:00.194" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:33:58.191" endtime="20200110 18:34:00.194"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:00.196" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:00.195" endtime="20200110 18:34:00.196"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:58.175" endtime="20200110 18:34:00.197"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:58.158" endtime="20200110 18:34:00.198"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:58.157" endtime="20200110 18:34:00.198"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:00.200" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:00.201" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:00.200" endtime="20200110 18:34:00.201"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:00.205" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:00.204" endtime="20200110 18:34:00.205"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:00.202" endtime="20200110 18:34:00.205"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:00.201" endtime="20200110 18:34:00.206"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:00.201" endtime="20200110 18:34:00.206"></status>
</kw>
<msg timestamp="20200110 18:34:00.206" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200110 18:34:00.199" endtime="20200110 18:34:00.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:00.207" level="INFO">1</msg>
<status status="PASS" starttime="20200110 18:34:00.207" endtime="20200110 18:34:00.208"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:00.209" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20200110 18:34:00.208" endtime="20200110 18:34:00.209"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:00.210" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20200110 18:34:00.209" endtime="20200110 18:34:00.210"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:00.229" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20200110 18:34:00.211" endtime="20200110 18:34:00.230"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:02.231" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:00.230" endtime="20200110 18:34:02.232"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:02.234" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:02.233" endtime="20200110 18:34:02.235"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:00.210" endtime="20200110 18:34:02.235"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:00.198" endtime="20200110 18:34:02.236"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:00.198" endtime="20200110 18:34:02.236"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:56.114" endtime="20200110 18:34:02.237"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:56.109" endtime="20200110 18:34:02.237"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="GeneralPage" type="teardown">
<kw name="Wait For Page Update" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE UPDATE TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:02.342" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20200110 18:34:02.241" endtime="20200110 18:34:02.342"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:02.240" endtime="20200110 18:34:02.343"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200110 18:34:02.378" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20200110 18:34:02.344" endtime="20200110 18:34:02.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:34:02.392" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:34:02.381" endtime="20200110 18:34:02.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:34:02.395" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20200110 18:34:02.395" endtime="20200110 18:34:02.451"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:03.454" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:02.453" endtime="20200110 18:34:03.454"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:02.452" endtime="20200110 18:34:03.455"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:02.394" endtime="20200110 18:34:03.456"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:02.394" endtime="20200110 18:34:03.456"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:02.393" endtime="20200110 18:34:03.457"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:02.381" endtime="20200110 18:34:03.457"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:04.461" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:03.459" endtime="20200110 18:34:04.461"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:03.458" endtime="20200110 18:34:04.462"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:02.380" endtime="20200110 18:34:04.463"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:02.379" endtime="20200110 18:34:04.463"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200110 18:34:04.494" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20200110 18:34:04.464" endtime="20200110 18:34:04.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:34:04.525" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:34:04.499" endtime="20200110 18:34:04.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:34:04.530" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200110 18:34:04.530" endtime="20200110 18:34:04.594"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:05.598" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:04.596" endtime="20200110 18:34:05.599"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:04.595" endtime="20200110 18:34:05.600"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:04.529" endtime="20200110 18:34:05.600"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:04.527" endtime="20200110 18:34:05.601"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:04.526" endtime="20200110 18:34:05.601"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:04.498" endtime="20200110 18:34:05.602"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:06.606" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:05.604" endtime="20200110 18:34:06.606"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:05.603" endtime="20200110 18:34:06.607"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:04.497" endtime="20200110 18:34:06.608"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:04.495" endtime="20200110 18:34:06.608"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200110 18:34:06.609" endtime="20200110 18:34:08.857"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:02.238" endtime="20200110 18:34:08.857"></status>
</kw>
<status status="PASS" starttime="20200110 18:33:17.451" endtime="20200110 18:34:08.857" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-s1-t2" name="INSERT_END_B_05_02_Verify that imVision X needs to generate beep tone when plugging a connector that is matched to one of unplugged connectors in the End B list if there is a 48-port Legacy Copper">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSHDefinitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST_A}</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:08.863" endtime="20200110 18:34:08.863"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20200110 18:34:08.863" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20200110 18:34:10.691" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20200110 18:34:08.863" endtime="20200110 18:34:10.691"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:08.863" endtime="20200110 18:34:10.691"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="GeneralPage">
<tags>
<tag>host_A</tag>
<tag>host_B</tag>
</tags>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST A}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20200110 18:34:10.691" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20200110 18:34:10.691" endtime="20200110 18:34:10.691"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200110 18:34:10.691" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20200110 18:34:10.691" endtime="20200110 18:34:13.640"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20200110 18:34:13.642" endtime="20200110 18:34:14.780"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:15.789" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:14.780" endtime="20200110 18:34:15.789"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="GeneralPage">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200110 18:34:15.805" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20200110 18:34:15.789" endtime="20200110 18:34:15.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:15.805" endtime="20200110 18:34:15.805"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20200110 18:34:15.820" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20200110 18:34:15.805" endtime="20200110 18:34:15.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:15.820" endtime="20200110 18:34:15.820"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200110 18:34:15.836" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20200110 18:34:15.820" endtime="20200110 18:34:15.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:15.836" endtime="20200110 18:34:15.836"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:15.789" endtime="20200110 18:34:15.836"></status>
</kw>
<kw name="Go To Home Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:34:15.867" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:34:15.852" endtime="20200110 18:34:15.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:34:15.867" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200110 18:34:15.867" endtime="20200110 18:34:15.982"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:16.988" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:15.985" endtime="20200110 18:34:16.988"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:15.984" endtime="20200110 18:34:16.988"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:15.867" endtime="20200110 18:34:16.988"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:15.867" endtime="20200110 18:34:16.988"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:15.867" endtime="20200110 18:34:16.988"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:15.836" endtime="20200110 18:34:16.988"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:15.836" endtime="20200110 18:34:16.988"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:10.691" endtime="20200110 18:34:16.988"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:08.863" endtime="20200110 18:34:16.988"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="HomePage">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20200110 18:34:16.988" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20200110 18:34:16.988" endtime="20200110 18:34:17.065"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:18.068" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:17.067" endtime="20200110 18:34:18.068"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:17.066" endtime="20200110 18:34:18.068"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:16.988" endtime="20200110 18:34:18.068"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:34:18.068" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:18.068"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:34:18.068" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:18.068"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:18.068" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:18.068" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:18.068"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:18.068"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:18.068"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:18.084" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:18.084" endtime="20200110 18:34:18.084"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:18.084"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:18.084"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:18.084"></status>
</kw>
<msg timestamp="20200110 18:34:18.084" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:18.084"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:18.084" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:18.084" endtime="20200110 18:34:18.084"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:18.084" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 2 --port 1</msg>
<status status="PASS" starttime="20200110 18:34:18.084" endtime="20200110 18:34:18.084"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:18.084" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 1</msg>
<status status="PASS" starttime="20200110 18:34:18.084" endtime="20200110 18:34:18.084"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:18.178" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 1</msg>
<status status="PASS" starttime="20200110 18:34:18.084" endtime="20200110 18:34:18.178"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:20.185" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:18.178" endtime="20200110 18:34:20.185"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:20.185" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:20.185" endtime="20200110 18:34:20.185"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:18.084" endtime="20200110 18:34:20.185"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:20.185"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:20.185"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:20.185" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:20.185" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:20.185" endtime="20200110 18:34:20.185"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:20.185" endtime="20200110 18:34:20.201"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:20.185" endtime="20200110 18:34:20.201"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:20.201" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:20.201" endtime="20200110 18:34:20.201"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:20.201" endtime="20200110 18:34:20.201"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:20.201" endtime="20200110 18:34:20.201"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:20.185" endtime="20200110 18:34:20.201"></status>
</kw>
<msg timestamp="20200110 18:34:20.201" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:20.185" endtime="20200110 18:34:20.201"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:20.201" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:20.201" endtime="20200110 18:34:20.201"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:20.201" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 2 --port 2</msg>
<status status="PASS" starttime="20200110 18:34:20.201" endtime="20200110 18:34:20.201"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:20.216" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 2</msg>
<status status="PASS" starttime="20200110 18:34:20.216" endtime="20200110 18:34:20.216"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:20.263" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 2</msg>
<status status="PASS" starttime="20200110 18:34:20.216" endtime="20200110 18:34:20.263"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:22.285" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:20.263" endtime="20200110 18:34:22.285"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:22.285" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:22.285" endtime="20200110 18:34:22.285"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:20.216" endtime="20200110 18:34:22.285"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:20.185" endtime="20200110 18:34:22.285"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:20.185" endtime="20200110 18:34:22.285"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:22.285" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:22.285" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:22.285" endtime="20200110 18:34:22.285"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:22.285" endtime="20200110 18:34:22.300"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:22.285" endtime="20200110 18:34:22.300"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:22.300" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:22.300" endtime="20200110 18:34:22.300"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:22.300" endtime="20200110 18:34:22.300"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:22.300" endtime="20200110 18:34:22.300"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:22.285" endtime="20200110 18:34:22.300"></status>
</kw>
<msg timestamp="20200110 18:34:22.300" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:22.285" endtime="20200110 18:34:22.300"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:22.300" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:22.300" endtime="20200110 18:34:22.300"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:22.300" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 2 --port 3</msg>
<status status="PASS" starttime="20200110 18:34:22.300" endtime="20200110 18:34:22.300"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:22.316" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 3</msg>
<status status="PASS" starttime="20200110 18:34:22.300" endtime="20200110 18:34:22.316"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:22.394" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 3</msg>
<status status="PASS" starttime="20200110 18:34:22.316" endtime="20200110 18:34:22.394"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:24.404" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:22.394" endtime="20200110 18:34:24.404"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:24.404" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:24.404" endtime="20200110 18:34:24.404"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:22.316" endtime="20200110 18:34:24.404"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:22.285" endtime="20200110 18:34:24.404"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:22.285" endtime="20200110 18:34:24.404"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:24.404"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:18.068" endtime="20200110 18:34:24.404"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="BulkPatchingPage">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20200110 18:34:24.404" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20200110 18:34:24.404" endtime="20200110 18:34:24.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:34:24.435" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:34:24.404" endtime="20200110 18:34:24.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:34:24.435" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20200110 18:34:24.435" endtime="20200110 18:34:24.508"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:25.522" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:24.509" endtime="20200110 18:34:25.522"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:24.508" endtime="20200110 18:34:25.522"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:24.435" endtime="20200110 18:34:25.522"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:24.435" endtime="20200110 18:34:25.522"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:24.435" endtime="20200110 18:34:25.522"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:24.404" endtime="20200110 18:34:25.522"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:24.404" endtime="20200110 18:34:25.522"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:26.522" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:25.522" endtime="20200110 18:34:26.522"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:25.522" endtime="20200110 18:34:26.522"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:24.404" endtime="20200110 18:34:26.522"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:34:26.522" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20200110 18:34:26.522" endtime="20200110 18:34:26.522"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:34:26.522" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20200110 18:34:26.522" endtime="20200110 18:34:26.522"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:26.522" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:26.522" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:26.522" endtime="20200110 18:34:26.522"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:26.538" endtime="20200110 18:34:26.538"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:26.538" endtime="20200110 18:34:26.538"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:26.538" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:26.538" endtime="20200110 18:34:26.538"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:26.538" endtime="20200110 18:34:26.538"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:26.538" endtime="20200110 18:34:26.538"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:26.522" endtime="20200110 18:34:26.538"></status>
</kw>
<msg timestamp="20200110 18:34:26.538" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:26.522" endtime="20200110 18:34:26.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:26.538" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:26.538" endtime="20200110 18:34:26.538"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:26.538" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20200110 18:34:26.538" endtime="20200110 18:34:26.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:26.538" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20200110 18:34:26.538" endtime="20200110 18:34:26.538"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:26.647" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20200110 18:34:26.538" endtime="20200110 18:34:26.647"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:28.652" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:26.647" endtime="20200110 18:34:28.652"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:28.652" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:28.652" endtime="20200110 18:34:28.652"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:26.538" endtime="20200110 18:34:28.652"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:26.522" endtime="20200110 18:34:28.652"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:26.522" endtime="20200110 18:34:28.652"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:28.652" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:28.652" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:28.652" endtime="20200110 18:34:28.652"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:28.652" endtime="20200110 18:34:28.667"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:28.652" endtime="20200110 18:34:28.667"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:28.667" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:28.667" endtime="20200110 18:34:28.667"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:28.667" endtime="20200110 18:34:28.667"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:28.667" endtime="20200110 18:34:28.667"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:28.652" endtime="20200110 18:34:28.667"></status>
</kw>
<msg timestamp="20200110 18:34:28.667" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:28.652" endtime="20200110 18:34:28.667"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:28.667" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:28.667" endtime="20200110 18:34:28.667"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:28.667" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 2 --port 5</msg>
<status status="PASS" starttime="20200110 18:34:28.667" endtime="20200110 18:34:28.667"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:28.667" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 5</msg>
<status status="PASS" starttime="20200110 18:34:28.667" endtime="20200110 18:34:28.667"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:28.745" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 5</msg>
<status status="PASS" starttime="20200110 18:34:28.667" endtime="20200110 18:34:28.745"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:30.753" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:28.745" endtime="20200110 18:34:30.753"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:30.753" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:30.753" endtime="20200110 18:34:30.753"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:28.667" endtime="20200110 18:34:30.753"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:28.652" endtime="20200110 18:34:30.753"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:28.652" endtime="20200110 18:34:30.753"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:30.753" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:30.753" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:30.753" endtime="20200110 18:34:30.753"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:30.753" endtime="20200110 18:34:30.769"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:30.753" endtime="20200110 18:34:30.769"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:30.769" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:30.769" endtime="20200110 18:34:30.769"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:30.769" endtime="20200110 18:34:30.769"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:30.769" endtime="20200110 18:34:30.769"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:30.753" endtime="20200110 18:34:30.769"></status>
</kw>
<msg timestamp="20200110 18:34:30.769" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:30.753" endtime="20200110 18:34:30.769"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:30.769" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:30.769" endtime="20200110 18:34:30.769"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:30.769" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 2 --port 6</msg>
<status status="PASS" starttime="20200110 18:34:30.769" endtime="20200110 18:34:30.769"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:30.784" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 6</msg>
<status status="PASS" starttime="20200110 18:34:30.784" endtime="20200110 18:34:30.784"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:30.878" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 6</msg>
<status status="PASS" starttime="20200110 18:34:30.784" endtime="20200110 18:34:30.878"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:32.887" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:30.878" endtime="20200110 18:34:32.887"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:32.887" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:32.887" endtime="20200110 18:34:32.887"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:30.784" endtime="20200110 18:34:32.887"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:30.753" endtime="20200110 18:34:32.887"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:30.753" endtime="20200110 18:34:32.887"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:26.522" endtime="20200110 18:34:32.887"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:26.522" endtime="20200110 18:34:32.887"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;5&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:32.887" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:32.887" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:32.887" endtime="20200110 18:34:32.887"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:32.887" endtime="20200110 18:34:32.902"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:32.887" endtime="20200110 18:34:32.902"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:32.902" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:32.902" endtime="20200110 18:34:32.902"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:32.902" endtime="20200110 18:34:32.902"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:32.902" endtime="20200110 18:34:32.902"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:32.887" endtime="20200110 18:34:32.902"></status>
</kw>
<msg timestamp="20200110 18:34:32.902" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:32.887" endtime="20200110 18:34:32.902"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:32.902" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:32.902" endtime="20200110 18:34:32.902"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:32.902" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 2 --port 5</msg>
<status status="PASS" starttime="20200110 18:34:32.902" endtime="20200110 18:34:32.902"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:32.918" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 5</msg>
<status status="PASS" starttime="20200110 18:34:32.918" endtime="20200110 18:34:32.918"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:32.996" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 5</msg>
<status status="PASS" starttime="20200110 18:34:32.918" endtime="20200110 18:34:32.996"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:35.004" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:32.996" endtime="20200110 18:34:35.004"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:35.004" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:35.004" endtime="20200110 18:34:35.004"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:32.918" endtime="20200110 18:34:35.004"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:32.887" endtime="20200110 18:34:35.004"></status>
</kw>
<kw name="When Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;4&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:35.004" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:35.004" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:35.004" endtime="20200110 18:34:35.004"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:35.004" endtime="20200110 18:34:35.019"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:35.004" endtime="20200110 18:34:35.019"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:35.019" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:35.019" endtime="20200110 18:34:35.019"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:35.019" endtime="20200110 18:34:35.019"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:35.019" endtime="20200110 18:34:35.019"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:35.004" endtime="20200110 18:34:35.019"></status>
</kw>
<msg timestamp="20200110 18:34:35.019" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:35.004" endtime="20200110 18:34:35.019"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:35.019" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:35.019" endtime="20200110 18:34:35.019"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:35.019" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20200110 18:34:35.019" endtime="20200110 18:34:35.019"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:35.019" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20200110 18:34:35.019" endtime="20200110 18:34:35.019"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:35.129" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20200110 18:34:35.019" endtime="20200110 18:34:35.129"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:37.146" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:35.130" endtime="20200110 18:34:37.146"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:37.146" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:37.146" endtime="20200110 18:34:37.146"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:35.019" endtime="20200110 18:34:37.146"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:35.004" endtime="20200110 18:34:37.146"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;5&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:37.146" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:37.146" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:37.146" endtime="20200110 18:34:37.146"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:37.146" endtime="20200110 18:34:37.146"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:37.146" endtime="20200110 18:34:37.162"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:37.162" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:37.162" endtime="20200110 18:34:37.162"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:37.162" endtime="20200110 18:34:37.162"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:37.162" endtime="20200110 18:34:37.162"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:37.146" endtime="20200110 18:34:37.162"></status>
</kw>
<msg timestamp="20200110 18:34:37.162" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:37.146" endtime="20200110 18:34:37.162"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:37.162" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:37.162" endtime="20200110 18:34:37.162"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:37.162" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 2 --port 5</msg>
<status status="PASS" starttime="20200110 18:34:37.162" endtime="20200110 18:34:37.162"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:37.162" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 5</msg>
<status status="PASS" starttime="20200110 18:34:37.162" endtime="20200110 18:34:37.162"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:37.209" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 5</msg>
<status status="PASS" starttime="20200110 18:34:37.178" endtime="20200110 18:34:37.209"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:39.217" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:37.209" endtime="20200110 18:34:39.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:39.217" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:39.217" endtime="20200110 18:34:39.217"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:37.178" endtime="20200110 18:34:39.217"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:37.146" endtime="20200110 18:34:39.217"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;5&quot; in End &quot;B&quot; color &quot;black&quot;" library="BulkPatchingDefinitions">
<doc>This keyword is used to check the color of port information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>4</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:39.217" endtime="20200110 18:34:39.217"></status>
</kw>
<msg timestamp="20200110 18:34:39.217" level="INFO">${input end position} = 4</msg>
<status status="PASS" starttime="20200110 18:34:39.217" endtime="20200110 18:34:39.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20200110 18:34:39.217" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20200110 18:34:39.217" endtime="20200110 18:34:39.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20200110 18:34:39.217" level="INFO">${input panel} = -Panel 2</msg>
<status status="PASS" starttime="20200110 18:34:39.217" endtime="20200110 18:34:39.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20200110 18:34:39.232" level="INFO">${input port} = -Port 5</msg>
<status status="PASS" starttime="20200110 18:34:39.217" endtime="20200110 18:34:39.232"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20200110 18:34:39.232" level="INFO">${input port information} = Rack 1-Panel 2-Port 5</msg>
<status status="PASS" starttime="20200110 18:34:39.232" endtime="20200110 18:34:39.232"></status>
</kw>
<kw name="Get Color Code of Port Information" library="BulkPatchingDefinitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20200110 18:34:39.232" level="INFO">${color} = black</msg>
<status status="PASS" starttime="20200110 18:34:39.232" endtime="20200110 18:34:39.232"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#000;</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:39.232" endtime="20200110 18:34:39.232"></status>
</kw>
<msg timestamp="20200110 18:34:39.232" level="INFO">${color code} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:34:39.232" endtime="20200110 18:34:39.232"></status>
</kw>
<msg timestamp="20200110 18:34:39.232" level="INFO">${input color} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:34:39.232" endtime="20200110 18:34:39.232"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position with color}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20200110 18:34:39.232" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='Color']/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20200110 18:34:39.232" endtime="20200110 18:34:39.232"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20200110 18:34:39.232" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='Color']/p[contains(text(),'Rack 1-Panel 2-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:34:39.232" endtime="20200110 18:34:39.232"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20200110 18:34:39.248" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 2-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:34:39.248" endtime="20200110 18:34:39.248"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="BulkPatchingDefinitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:34:39.264" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20200110 18:34:39.248" endtime="20200110 18:34:39.264"></status>
</kw>
<msg timestamp="20200110 18:34:39.264" level="INFO">${number of lines} = 3</msg>
<status status="PASS" starttime="20200110 18:34:39.248" endtime="20200110 18:34:39.264"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:34:39.264" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:34:39.264" endtime="20200110 18:34:39.264"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:34:39.264" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20200110 18:34:39.264" endtime="20200110 18:34:39.264"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:34:39.264" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20200110 18:34:39.264" endtime="20200110 18:34:39.264"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:34:39.279" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 2-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:34:39.264" endtime="20200110 18:34:39.279"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:34:39.279" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 2-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:34:39.279" endtime="20200110 18:34:39.279"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:34:39.295" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:34:39.279" endtime="20200110 18:34:39.295"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:39.295" endtime="20200110 18:34:39.295"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.264" endtime="20200110 18:34:39.295"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:34:39.295" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20200110 18:34:39.295" endtime="20200110 18:34:39.295"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:34:39.295" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20200110 18:34:39.295" endtime="20200110 18:34:39.295"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:34:39.295" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 2-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:34:39.295" endtime="20200110 18:34:39.295"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:34:39.295" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 2-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:34:39.295" endtime="20200110 18:34:39.295"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:34:39.311" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20200110 18:34:39.295" endtime="20200110 18:34:39.311"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20200110 18:34:39.311" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:39.311" endtime="20200110 18:34:39.311"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.295" endtime="20200110 18:34:39.311"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.264" endtime="20200110 18:34:39.311"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:39.326" endtime="20200110 18:34:39.326"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.311" endtime="20200110 18:34:39.326"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.217" endtime="20200110 18:34:39.326"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtRestoreTheUnpluggedEndBPort}&quot;" library="BulkPatchingDefinitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20200110 18:34:39.357" level="INFO">${get helptext} = Restore the unplugged End B ports, or press Delete to reorder the entries.</msg>
<status status="PASS" starttime="20200110 18:34:39.326" endtime="20200110 18:34:39.357"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:39.357" endtime="20200110 18:34:39.357"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.357" endtime="20200110 18:34:39.357"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.326" endtime="20200110 18:34:39.357"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;4&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:39.357" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:39.373" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:39.357" endtime="20200110 18:34:39.373"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:39.373" endtime="20200110 18:34:39.373"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.373" endtime="20200110 18:34:39.373"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:39.373" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:39.373" endtime="20200110 18:34:39.373"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.373" endtime="20200110 18:34:39.373"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.373" endtime="20200110 18:34:39.373"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.373" endtime="20200110 18:34:39.373"></status>
</kw>
<msg timestamp="20200110 18:34:39.373" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:39.357" endtime="20200110 18:34:39.373"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:39.373" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:39.373" endtime="20200110 18:34:39.373"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:39.373" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20200110 18:34:39.373" endtime="20200110 18:34:39.373"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:39.373" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20200110 18:34:39.373" endtime="20200110 18:34:39.373"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:39.467" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20200110 18:34:39.373" endtime="20200110 18:34:39.467"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:41.479" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:39.467" endtime="20200110 18:34:41.479"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:41.479" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:41.479" endtime="20200110 18:34:41.479"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.373" endtime="20200110 18:34:41.479"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:39.357" endtime="20200110 18:34:41.479"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; Port &quot;4&quot; in End &quot;B&quot; color &quot;black&quot;" library="BulkPatchingDefinitions">
<doc>This keyword is used to check the color of port information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>4</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:41.479" endtime="20200110 18:34:41.479"></status>
</kw>
<msg timestamp="20200110 18:34:41.479" level="INFO">${input end position} = 4</msg>
<status status="PASS" starttime="20200110 18:34:41.479" endtime="20200110 18:34:41.494"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20200110 18:34:41.494" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20200110 18:34:41.494" endtime="20200110 18:34:41.494"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20200110 18:34:41.494" level="INFO">${input panel} = -Panel 2</msg>
<status status="PASS" starttime="20200110 18:34:41.494" endtime="20200110 18:34:41.494"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20200110 18:34:41.494" level="INFO">${input port} = -Port 4</msg>
<status status="PASS" starttime="20200110 18:34:41.494" endtime="20200110 18:34:41.494"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20200110 18:34:41.494" level="INFO">${input port information} = Rack 1-Panel 2-Port 4</msg>
<status status="PASS" starttime="20200110 18:34:41.494" endtime="20200110 18:34:41.494"></status>
</kw>
<kw name="Get Color Code of Port Information" library="BulkPatchingDefinitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20200110 18:34:41.494" level="INFO">${color} = black</msg>
<status status="PASS" starttime="20200110 18:34:41.494" endtime="20200110 18:34:41.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#000;</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:41.494" endtime="20200110 18:34:41.494"></status>
</kw>
<msg timestamp="20200110 18:34:41.494" level="INFO">${color code} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:34:41.494" endtime="20200110 18:34:41.494"></status>
</kw>
<msg timestamp="20200110 18:34:41.494" level="INFO">${input color} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:34:41.494" endtime="20200110 18:34:41.494"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position with color}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20200110 18:34:41.494" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='Color']/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20200110 18:34:41.494" endtime="20200110 18:34:41.494"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20200110 18:34:41.494" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='Color']/p[contains(text(),'Rack 1-Panel 2-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:34:41.494" endtime="20200110 18:34:41.494"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20200110 18:34:41.510" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 2-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:34:41.494" endtime="20200110 18:34:41.510"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="BulkPatchingDefinitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:34:41.510" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20200110 18:34:41.510" endtime="20200110 18:34:41.510"></status>
</kw>
<msg timestamp="20200110 18:34:41.510" level="INFO">${number of lines} = 3</msg>
<status status="PASS" starttime="20200110 18:34:41.510" endtime="20200110 18:34:41.510"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:34:41.510" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:34:41.510" endtime="20200110 18:34:41.526"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:34:41.526" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20200110 18:34:41.526" endtime="20200110 18:34:41.526"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:34:41.526" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20200110 18:34:41.526" endtime="20200110 18:34:41.526"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:34:41.526" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 2-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:34:41.526" endtime="20200110 18:34:41.526"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:34:41.526" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 2-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:34:41.526" endtime="20200110 18:34:41.526"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:34:41.541" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20200110 18:34:41.526" endtime="20200110 18:34:41.541"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20200110 18:34:41.541" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:41.541" endtime="20200110 18:34:41.541"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.526" endtime="20200110 18:34:41.541"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.526" endtime="20200110 18:34:41.541"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:41.541" endtime="20200110 18:34:41.541"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.541" endtime="20200110 18:34:41.541"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.479" endtime="20200110 18:34:41.541"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtPressExitToCompleteBulkPatching}&quot;" library="BulkPatchingDefinitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20200110 18:34:41.572" level="INFO">${get helptext} = Press Exit to complete bulk patching.</msg>
<status status="PASS" starttime="20200110 18:34:41.557" endtime="20200110 18:34:41.572"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:41.572" endtime="20200110 18:34:41.572"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.572" endtime="20200110 18:34:41.572"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.557" endtime="20200110 18:34:41.572"></status>
</kw>
<kw name="And Plugout Serial Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:34:41.572" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20200110 18:34:41.572" endtime="20200110 18:34:41.572"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:34:41.572" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20200110 18:34:41.572" endtime="20200110 18:34:41.572"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:41.588" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:41.588" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:41.588"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:41.588"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:41.588"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:41.588" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:41.588"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:41.588"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:41.588"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:41.588"></status>
</kw>
<msg timestamp="20200110 18:34:41.588" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:41.588"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:41.588" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:41.588"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:41.588" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:41.588"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:41.588" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:41.588"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:41.619" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 4</msg>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:41.619"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:43.634" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:41.619" endtime="20200110 18:34:43.634"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:43.634" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:43.634" endtime="20200110 18:34:43.634"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.588" endtime="20200110 18:34:43.634"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.572" endtime="20200110 18:34:43.634"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.572" endtime="20200110 18:34:43.634"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:43.634" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:43.634" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:43.634" endtime="20200110 18:34:43.634"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:43.634" endtime="20200110 18:34:43.650"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:43.634" endtime="20200110 18:34:43.650"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:43.650" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:43.650" endtime="20200110 18:34:43.650"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:43.650" endtime="20200110 18:34:43.650"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:43.650" endtime="20200110 18:34:43.650"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:43.634" endtime="20200110 18:34:43.650"></status>
</kw>
<msg timestamp="20200110 18:34:43.650" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:43.634" endtime="20200110 18:34:43.650"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:43.650" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:43.650" endtime="20200110 18:34:43.650"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:43.650" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 2 --port 5</msg>
<status status="PASS" starttime="20200110 18:34:43.650" endtime="20200110 18:34:43.650"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:43.650" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 5</msg>
<status status="PASS" starttime="20200110 18:34:43.650" endtime="20200110 18:34:43.665"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:43.759" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 5</msg>
<status status="PASS" starttime="20200110 18:34:43.665" endtime="20200110 18:34:43.759"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:45.760" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:43.759" endtime="20200110 18:34:45.760"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:45.760" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:45.760" endtime="20200110 18:34:45.760"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:43.665" endtime="20200110 18:34:45.760"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:43.634" endtime="20200110 18:34:45.760"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:43.634" endtime="20200110 18:34:45.760"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:45.760" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:45.760" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:45.760" endtime="20200110 18:34:45.760"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:45.760" endtime="20200110 18:34:45.776"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:45.760" endtime="20200110 18:34:45.776"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:45.776" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:45.776" endtime="20200110 18:34:45.776"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:45.776" endtime="20200110 18:34:45.776"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:45.776" endtime="20200110 18:34:45.776"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:45.760" endtime="20200110 18:34:45.776"></status>
</kw>
<msg timestamp="20200110 18:34:45.776" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:45.760" endtime="20200110 18:34:45.776"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:45.776" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:45.776" endtime="20200110 18:34:45.776"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:45.776" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 2 --port 6</msg>
<status status="PASS" starttime="20200110 18:34:45.776" endtime="20200110 18:34:45.776"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:45.792" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 6</msg>
<status status="PASS" starttime="20200110 18:34:45.792" endtime="20200110 18:34:45.792"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:45.883" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 6</msg>
<status status="PASS" starttime="20200110 18:34:45.792" endtime="20200110 18:34:45.884"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:47.892" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:45.885" endtime="20200110 18:34:47.892"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:47.892" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:47.892"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:45.792" endtime="20200110 18:34:47.892"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:45.760" endtime="20200110 18:34:47.892"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:45.760" endtime="20200110 18:34:47.892"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.572" endtime="20200110 18:34:47.892"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:41.572" endtime="20200110 18:34:47.892"></status>
</kw>
<kw name="And Plugout Serial Copper Tip to Rack &quot;1&quot; Panel &quot;2&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:34:47.892" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:47.892"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:34:47.892" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:47.892"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:47.892" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:47.892" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:47.892"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:47.892"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:47.892"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:47.908" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:47.908" endtime="20200110 18:34:47.908"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:47.908"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:47.908"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:47.908"></status>
</kw>
<msg timestamp="20200110 18:34:47.908" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:47.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:47.908" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:47.908" endtime="20200110 18:34:47.908"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:47.908" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 2 --port 1</msg>
<status status="PASS" starttime="20200110 18:34:47.908" endtime="20200110 18:34:47.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:47.908" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 1</msg>
<status status="PASS" starttime="20200110 18:34:47.908" endtime="20200110 18:34:47.908"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:47.939" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 1</msg>
<status status="PASS" starttime="20200110 18:34:47.908" endtime="20200110 18:34:47.939"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:49.946" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:47.939" endtime="20200110 18:34:49.946"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:49.946" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:49.946" endtime="20200110 18:34:49.946"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:47.908" endtime="20200110 18:34:49.946"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:49.946"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:49.946"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:49.946" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:49.946" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:49.946" endtime="20200110 18:34:49.946"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:49.946" endtime="20200110 18:34:49.962"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:49.946" endtime="20200110 18:34:49.962"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:49.962" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:49.962" endtime="20200110 18:34:49.962"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:49.962" endtime="20200110 18:34:49.962"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:49.962" endtime="20200110 18:34:49.962"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:49.946" endtime="20200110 18:34:49.962"></status>
</kw>
<msg timestamp="20200110 18:34:49.962" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:49.946" endtime="20200110 18:34:49.962"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:49.962" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:49.962" endtime="20200110 18:34:49.962"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:49.962" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 2 --port 2</msg>
<status status="PASS" starttime="20200110 18:34:49.962" endtime="20200110 18:34:49.962"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:49.962" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 2</msg>
<status status="PASS" starttime="20200110 18:34:49.962" endtime="20200110 18:34:49.962"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:50.024" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 2</msg>
<status status="PASS" starttime="20200110 18:34:49.962" endtime="20200110 18:34:50.024"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:52.028" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:50.024" endtime="20200110 18:34:52.028"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:52.028" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:52.028" endtime="20200110 18:34:52.028"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:49.962" endtime="20200110 18:34:52.028"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:49.946" endtime="20200110 18:34:52.028"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:49.946" endtime="20200110 18:34:52.028"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:34:52.028" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:34:52.028" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:34:52.028" endtime="20200110 18:34:52.028"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:34:52.028" endtime="20200110 18:34:52.044"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:52.028" endtime="20200110 18:34:52.044"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:34:52.044" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:34:52.044" endtime="20200110 18:34:52.044"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:52.044" endtime="20200110 18:34:52.044"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:52.044" endtime="20200110 18:34:52.044"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:52.028" endtime="20200110 18:34:52.044"></status>
</kw>
<msg timestamp="20200110 18:34:52.044" level="INFO">${panel index} = 2</msg>
<status status="PASS" starttime="20200110 18:34:52.028" endtime="20200110 18:34:52.044"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:34:52.044" level="INFO">2</msg>
<status status="PASS" starttime="20200110 18:34:52.044" endtime="20200110 18:34:52.044"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:34:52.044" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 2 --port 3</msg>
<status status="PASS" starttime="20200110 18:34:52.044" endtime="20200110 18:34:52.044"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:34:52.059" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 3</msg>
<status status="PASS" starttime="20200110 18:34:52.044" endtime="20200110 18:34:52.059"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:34:52.106" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 2 --port 3</msg>
<status status="PASS" starttime="20200110 18:34:52.059" endtime="20200110 18:34:52.106"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:34:54.109" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:52.106" endtime="20200110 18:34:54.109"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:34:54.109" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=2
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600002
count=11
# </msg>
<status status="PASS" starttime="20200110 18:34:54.109" endtime="20200110 18:34:54.109"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:52.059" endtime="20200110 18:34:54.109"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:52.028" endtime="20200110 18:34:54.109"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:52.028" endtime="20200110 18:34:54.109"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:54.109"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:47.892" endtime="20200110 18:34:54.109"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="GeneralPage" type="teardown">
<kw name="Wait For Page Update" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE UPDATE TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:54.219" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20200110 18:34:54.109" endtime="20200110 18:34:54.219"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:54.109" endtime="20200110 18:34:54.219"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200110 18:34:54.234" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20200110 18:34:54.219" endtime="20200110 18:34:54.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:34:54.266" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:34:54.234" endtime="20200110 18:34:54.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:34:54.266" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20200110 18:34:54.266" endtime="20200110 18:34:54.340"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:55.348" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:54.341" endtime="20200110 18:34:55.348"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:54.340" endtime="20200110 18:34:55.348"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:54.266" endtime="20200110 18:34:55.348"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:54.266" endtime="20200110 18:34:55.348"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:54.266" endtime="20200110 18:34:55.348"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:54.234" endtime="20200110 18:34:55.348"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:56.348" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:55.348" endtime="20200110 18:34:56.348"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:55.348" endtime="20200110 18:34:56.348"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:54.234" endtime="20200110 18:34:56.348"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:54.234" endtime="20200110 18:34:56.348"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200110 18:34:56.364" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20200110 18:34:56.348" endtime="20200110 18:34:56.364"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:34:56.379" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:34:56.364" endtime="20200110 18:34:56.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:34:56.379" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200110 18:34:56.379" endtime="20200110 18:34:56.441"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:57.445" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:56.443" endtime="20200110 18:34:57.445"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:56.442" endtime="20200110 18:34:57.445"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:56.379" endtime="20200110 18:34:57.445"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:56.379" endtime="20200110 18:34:57.445"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:56.379" endtime="20200110 18:34:57.445"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:56.364" endtime="20200110 18:34:57.445"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:34:58.445" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:34:57.445" endtime="20200110 18:34:58.445"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:57.445" endtime="20200110 18:34:58.445"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:56.364" endtime="20200110 18:34:58.445"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:56.364" endtime="20200110 18:34:58.445"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200110 18:34:58.445" endtime="20200110 18:35:00.696"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:54.109" endtime="20200110 18:35:00.696"></status>
</kw>
<status status="PASS" starttime="20200110 18:34:08.861" endtime="20200110 18:35:00.696" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-s1-t3" name="INSERT_END_B_05_06_Verify that imVision X needs to generate beep tone when plugging a connector that is matched to one of unplugged connectors in the End B list if there is a LC panel">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSHDefinitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST_A}</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:00.700" endtime="20200110 18:35:00.700"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20200110 18:35:00.700" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20200110 18:35:02.513" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20200110 18:35:00.700" endtime="20200110 18:35:02.513"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:00.700" endtime="20200110 18:35:02.513"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="GeneralPage">
<tags>
<tag>host_A</tag>
<tag>host_B</tag>
</tags>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST A}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20200110 18:35:02.513" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20200110 18:35:02.513" endtime="20200110 18:35:02.513"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200110 18:35:02.513" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20200110 18:35:02.513" endtime="20200110 18:35:05.854"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20200110 18:35:05.855" endtime="20200110 18:35:06.998"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:35:08.003" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:35:06.998" endtime="20200110 18:35:08.003"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="GeneralPage">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200110 18:35:08.034" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20200110 18:35:08.003" endtime="20200110 18:35:08.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:08.034" endtime="20200110 18:35:08.034"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20200110 18:35:08.050" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20200110 18:35:08.034" endtime="20200110 18:35:08.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:08.050" endtime="20200110 18:35:08.050"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200110 18:35:08.066" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20200110 18:35:08.050" endtime="20200110 18:35:08.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:08.066" endtime="20200110 18:35:08.066"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:08.003" endtime="20200110 18:35:08.066"></status>
</kw>
<kw name="Go To Home Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:35:08.081" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:35:08.066" endtime="20200110 18:35:08.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:35:08.081" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200110 18:35:08.081" endtime="20200110 18:35:08.202"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:35:09.212" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:35:08.206" endtime="20200110 18:35:09.212"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:08.204" endtime="20200110 18:35:09.212"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:08.081" endtime="20200110 18:35:09.212"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:08.081" endtime="20200110 18:35:09.212"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:08.081" endtime="20200110 18:35:09.212"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:08.066" endtime="20200110 18:35:09.212"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:08.066" endtime="20200110 18:35:09.212"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:02.513" endtime="20200110 18:35:09.212"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:00.700" endtime="20200110 18:35:09.212"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="HomePage">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20200110 18:35:09.212" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20200110 18:35:09.212" endtime="20200110 18:35:09.324"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:35:10.338" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:35:09.326" endtime="20200110 18:35:10.338"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:09.325" endtime="20200110 18:35:10.338"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:09.212" endtime="20200110 18:35:10.338"></status>
</kw>
<kw name="When Plugin Serial LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:35:10.338" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:10.338"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:35:10.338" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:10.338"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin LC Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:10.338" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:10.338" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:10.338"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:10.338"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:10.338"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:10.338"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:10.338"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:10.353" endtime="20200110 18:35:10.353"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:10.353" endtime="20200110 18:35:10.353"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:10.353" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:10.353" endtime="20200110 18:35:10.353"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:10.353" endtime="20200110 18:35:10.353"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:10.353" endtime="20200110 18:35:10.353"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:10.353"></status>
</kw>
<msg timestamp="20200110 18:35:10.353" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:10.353"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:10.353" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:10.353" endtime="20200110 18:35:10.353"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:10.353" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20200110 18:35:10.353" endtime="20200110 18:35:10.353"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:10.353" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20200110 18:35:10.353" endtime="20200110 18:35:10.353"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:10.478" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20200110 18:35:10.369" endtime="20200110 18:35:10.478"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:12.506" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:10.478" endtime="20200110 18:35:12.506"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:12.506" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:12.506"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:10.353" endtime="20200110 18:35:12.506"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:12.506"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:12.506"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin LC Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:12.506" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:12.506" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:12.506"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:12.506"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:12.506"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:12.506"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:12.506"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:12.506"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:12.506"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:12.521" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:12.521" endtime="20200110 18:35:12.521"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:12.521"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:12.521"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:12.521"></status>
</kw>
<msg timestamp="20200110 18:35:12.521" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:12.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:12.521" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:12.521" endtime="20200110 18:35:12.521"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:12.521" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 2</msg>
<status status="PASS" starttime="20200110 18:35:12.521" endtime="20200110 18:35:12.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:12.521" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 2</msg>
<status status="PASS" starttime="20200110 18:35:12.521" endtime="20200110 18:35:12.521"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:12.537" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 2</msg>
<status status="PASS" starttime="20200110 18:35:12.521" endtime="20200110 18:35:12.537"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:14.551" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:12.537" endtime="20200110 18:35:14.551"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:14.551" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:14.551" endtime="20200110 18:35:14.551"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:12.521" endtime="20200110 18:35:14.551"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:14.551"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:12.506" endtime="20200110 18:35:14.551"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugin LC Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:14.551" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:14.551" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:14.551" endtime="20200110 18:35:14.551"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:14.551" endtime="20200110 18:35:14.551"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:14.551" endtime="20200110 18:35:14.551"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:14.551" endtime="20200110 18:35:14.551"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:14.551" endtime="20200110 18:35:14.551"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:14.551" endtime="20200110 18:35:14.567"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:14.551" endtime="20200110 18:35:14.567"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:14.567" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:14.567" endtime="20200110 18:35:14.567"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:14.567" endtime="20200110 18:35:14.567"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:14.567" endtime="20200110 18:35:14.567"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:14.551" endtime="20200110 18:35:14.567"></status>
</kw>
<msg timestamp="20200110 18:35:14.567" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:14.551" endtime="20200110 18:35:14.567"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:14.567" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:14.567" endtime="20200110 18:35:14.567"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:14.567" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 3</msg>
<status status="PASS" starttime="20200110 18:35:14.567" endtime="20200110 18:35:14.567"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:14.567" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 3</msg>
<status status="PASS" starttime="20200110 18:35:14.567" endtime="20200110 18:35:14.567"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:14.629" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 3</msg>
<status status="PASS" starttime="20200110 18:35:14.567" endtime="20200110 18:35:14.629"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:16.639" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:14.629" endtime="20200110 18:35:16.639"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:16.639" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:16.639" endtime="20200110 18:35:16.639"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:14.567" endtime="20200110 18:35:16.639"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:14.551" endtime="20200110 18:35:16.639"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:14.551" endtime="20200110 18:35:16.639"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:16.639"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:10.338" endtime="20200110 18:35:16.639"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="BulkPatchingPage">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20200110 18:35:16.639" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20200110 18:35:16.639" endtime="20200110 18:35:16.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:35:16.670" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:35:16.639" endtime="20200110 18:35:16.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:35:16.670" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20200110 18:35:16.670" endtime="20200110 18:35:16.742"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:35:17.745" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:35:16.743" endtime="20200110 18:35:17.745"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:16.743" endtime="20200110 18:35:17.746"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:16.670" endtime="20200110 18:35:17.747"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:16.670" endtime="20200110 18:35:17.747"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:16.670" endtime="20200110 18:35:17.748"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:16.639" endtime="20200110 18:35:17.749"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:16.639" endtime="20200110 18:35:17.749"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:35:18.752" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:35:17.751" endtime="20200110 18:35:18.753"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:17.750" endtime="20200110 18:35:18.754"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:16.639" endtime="20200110 18:35:18.755"></status>
</kw>
<kw name="When Plugin Serial LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:35:18.758" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20200110 18:35:18.757" endtime="20200110 18:35:18.758"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:35:18.759" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20200110 18:35:18.759" endtime="20200110 18:35:18.760"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugin LC Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:18.763" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:18.764" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:18.763" endtime="20200110 18:35:18.764"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:18.765" endtime="20200110 18:35:18.767"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:18.765" endtime="20200110 18:35:18.767"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:18.768" endtime="20200110 18:35:18.770"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:18.767" endtime="20200110 18:35:18.770"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:18.772" endtime="20200110 18:35:18.773"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:18.771" endtime="20200110 18:35:18.774"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:18.777" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:18.776" endtime="20200110 18:35:18.777"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:18.775" endtime="20200110 18:35:18.777"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:18.774" endtime="20200110 18:35:18.778"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:18.764" endtime="20200110 18:35:18.778"></status>
</kw>
<msg timestamp="20200110 18:35:18.779" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:18.762" endtime="20200110 18:35:18.780"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:18.781" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:18.780" endtime="20200110 18:35:18.781"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:18.782" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20200110 18:35:18.782" endtime="20200110 18:35:18.783"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:18.784" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20200110 18:35:18.783" endtime="20200110 18:35:18.784"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:18.820" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20200110 18:35:18.786" endtime="20200110 18:35:18.821"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:20.824" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:18.821" endtime="20200110 18:35:20.825"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:20.827" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:20.826" endtime="20200110 18:35:20.828"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:18.785" endtime="20200110 18:35:20.828"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:18.761" endtime="20200110 18:35:20.829"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:18.760" endtime="20200110 18:35:20.830"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugin LC Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:20.834" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:20.834" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:20.833" endtime="20200110 18:35:20.835"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:20.837" endtime="20200110 18:35:20.839"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:20.836" endtime="20200110 18:35:20.840"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:20.841" endtime="20200110 18:35:20.844"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:20.840" endtime="20200110 18:35:20.844"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:20.846" endtime="20200110 18:35:20.848"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:20.845" endtime="20200110 18:35:20.849"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:20.853" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:20.853" endtime="20200110 18:35:20.854"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:20.850" endtime="20200110 18:35:20.854"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:20.849" endtime="20200110 18:35:20.855"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:20.835" endtime="20200110 18:35:20.855"></status>
</kw>
<msg timestamp="20200110 18:35:20.856" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:20.832" endtime="20200110 18:35:20.856"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:20.857" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:20.857" endtime="20200110 18:35:20.857"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:20.858" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 5</msg>
<status status="PASS" starttime="20200110 18:35:20.858" endtime="20200110 18:35:20.858"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:20.859" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 5</msg>
<status status="PASS" starttime="20200110 18:35:20.859" endtime="20200110 18:35:20.859"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:20.879" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 5</msg>
<status status="PASS" starttime="20200110 18:35:20.860" endtime="20200110 18:35:20.880"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:22.883" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:20.880" endtime="20200110 18:35:22.884"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:22.886" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:22.884" endtime="20200110 18:35:22.887"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:20.860" endtime="20200110 18:35:22.887"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:20.831" endtime="20200110 18:35:22.888"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:20.830" endtime="20200110 18:35:22.889"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugin LC Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:22.893" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:22.894" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:22.892" endtime="20200110 18:35:22.894"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:22.896" endtime="20200110 18:35:22.899"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:22.895" endtime="20200110 18:35:22.900"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:22.901" endtime="20200110 18:35:22.904"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:22.900" endtime="20200110 18:35:22.904"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:22.905" endtime="20200110 18:35:22.908"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:22.905" endtime="20200110 18:35:22.908"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:22.913" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:22.912" endtime="20200110 18:35:22.914"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:22.910" endtime="20200110 18:35:22.914"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:22.909" endtime="20200110 18:35:22.914"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:22.895" endtime="20200110 18:35:22.915"></status>
</kw>
<msg timestamp="20200110 18:35:22.916" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:22.891" endtime="20200110 18:35:22.917"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:22.918" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:22.918" endtime="20200110 18:35:22.919"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:22.921" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 6</msg>
<status status="PASS" starttime="20200110 18:35:22.920" endtime="20200110 18:35:22.921"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:22.923" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 6</msg>
<status status="PASS" starttime="20200110 18:35:22.922" endtime="20200110 18:35:22.924"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:22.961" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 6</msg>
<status status="PASS" starttime="20200110 18:35:22.926" endtime="20200110 18:35:22.962"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:24.964" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:22.962" endtime="20200110 18:35:24.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:24.967" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:24.965" endtime="20200110 18:35:24.968"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:22.925" endtime="20200110 18:35:24.968"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:22.890" endtime="20200110 18:35:24.969"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:22.889" endtime="20200110 18:35:24.969"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:18.760" endtime="20200110 18:35:24.970"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:18.756" endtime="20200110 18:35:24.970"></status>
</kw>
<kw name="When Plugout LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;5&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:24.975" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:24.975" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:24.974" endtime="20200110 18:35:24.975"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:24.977" endtime="20200110 18:35:24.980"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:24.977" endtime="20200110 18:35:24.981"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:24.982" endtime="20200110 18:35:24.984"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:24.981" endtime="20200110 18:35:24.985"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:24.986" endtime="20200110 18:35:24.989"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:24.985" endtime="20200110 18:35:24.990"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:24.994" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:24.994" endtime="20200110 18:35:24.995"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:24.991" endtime="20200110 18:35:24.995"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:24.990" endtime="20200110 18:35:24.996"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:24.976" endtime="20200110 18:35:24.996"></status>
</kw>
<msg timestamp="20200110 18:35:24.997" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:24.973" endtime="20200110 18:35:24.997"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:24.998" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:24.997" endtime="20200110 18:35:24.998"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:24.999" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 5</msg>
<status status="PASS" starttime="20200110 18:35:24.998" endtime="20200110 18:35:24.999"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:25.000" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 5</msg>
<status status="PASS" starttime="20200110 18:35:24.999" endtime="20200110 18:35:25.000"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:25.020" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 5</msg>
<status status="PASS" starttime="20200110 18:35:25.001" endtime="20200110 18:35:25.021"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:27.024" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:25.021" endtime="20200110 18:35:27.025"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:27.027" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:27.026" endtime="20200110 18:35:27.028"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:25.000" endtime="20200110 18:35:27.028"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:24.972" endtime="20200110 18:35:27.029"></status>
</kw>
<kw name="When Plugout LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;4&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:27.033" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:27.034" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:27.032" endtime="20200110 18:35:27.034"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:27.036" endtime="20200110 18:35:27.039"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:27.035" endtime="20200110 18:35:27.039"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:27.040" endtime="20200110 18:35:27.043"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:27.040" endtime="20200110 18:35:27.043"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:27.045" endtime="20200110 18:35:27.047"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:27.044" endtime="20200110 18:35:27.048"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:27.052" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:27.052" endtime="20200110 18:35:27.053"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:27.049" endtime="20200110 18:35:27.053"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:27.048" endtime="20200110 18:35:27.054"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:27.034" endtime="20200110 18:35:27.054"></status>
</kw>
<msg timestamp="20200110 18:35:27.055" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:27.031" endtime="20200110 18:35:27.056"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:27.057" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:27.056" endtime="20200110 18:35:27.058"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:27.059" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20200110 18:35:27.058" endtime="20200110 18:35:27.060"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:27.061" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20200110 18:35:27.060" endtime="20200110 18:35:27.061"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:27.073" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20200110 18:35:27.064" endtime="20200110 18:35:27.074"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:29.077" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:27.074" endtime="20200110 18:35:29.078"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:29.080" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:29.078" endtime="20200110 18:35:29.081"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:27.062" endtime="20200110 18:35:29.081"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:27.030" endtime="20200110 18:35:29.082"></status>
</kw>
<kw name="When Plugin LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;5&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:29.086" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:29.086" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:29.085" endtime="20200110 18:35:29.087"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:29.089" endtime="20200110 18:35:29.091"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:29.088" endtime="20200110 18:35:29.092"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:29.093" endtime="20200110 18:35:29.096"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:29.092" endtime="20200110 18:35:29.097"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:29.098" endtime="20200110 18:35:29.100"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:29.097" endtime="20200110 18:35:29.101"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:29.106" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:29.105" endtime="20200110 18:35:29.106"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:29.102" endtime="20200110 18:35:29.106"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:29.101" endtime="20200110 18:35:29.106"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:29.087" endtime="20200110 18:35:29.107"></status>
</kw>
<msg timestamp="20200110 18:35:29.107" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:29.084" endtime="20200110 18:35:29.107"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:29.108" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:29.108" endtime="20200110 18:35:29.108"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:29.109" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 5</msg>
<status status="PASS" starttime="20200110 18:35:29.109" endtime="20200110 18:35:29.110"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:29.110" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 5</msg>
<status status="PASS" starttime="20200110 18:35:29.110" endtime="20200110 18:35:29.111"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:29.135" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 5</msg>
<status status="PASS" starttime="20200110 18:35:29.112" endtime="20200110 18:35:29.136"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:31.138" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:29.136" endtime="20200110 18:35:31.139"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:31.141" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:31.140" endtime="20200110 18:35:31.142"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:29.111" endtime="20200110 18:35:31.142"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:29.083" endtime="20200110 18:35:31.143"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;3&quot; Row &quot;1&quot; Port &quot;5&quot; in End &quot;B&quot; color &quot;black&quot;" library="BulkPatchingDefinitions">
<doc>This keyword is used to check the color of port information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>4</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:31.147" endtime="20200110 18:35:31.148"></status>
</kw>
<msg timestamp="20200110 18:35:31.149" level="INFO">${input end position} = 4</msg>
<status status="PASS" starttime="20200110 18:35:31.145" endtime="20200110 18:35:31.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20200110 18:35:31.150" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20200110 18:35:31.150" endtime="20200110 18:35:31.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20200110 18:35:31.152" level="INFO">${input panel} = -Panel 3</msg>
<status status="PASS" starttime="20200110 18:35:31.151" endtime="20200110 18:35:31.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20200110 18:35:31.154" level="INFO">${input port} = -Port 5</msg>
<status status="PASS" starttime="20200110 18:35:31.153" endtime="20200110 18:35:31.154"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20200110 18:35:31.156" level="INFO">${input port information} = Rack 1-Panel 3-Port 5</msg>
<status status="PASS" starttime="20200110 18:35:31.155" endtime="20200110 18:35:31.157"></status>
</kw>
<kw name="Get Color Code of Port Information" library="BulkPatchingDefinitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20200110 18:35:31.159" level="INFO">${color} = black</msg>
<status status="PASS" starttime="20200110 18:35:31.158" endtime="20200110 18:35:31.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#000;</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:31.162" endtime="20200110 18:35:31.163"></status>
</kw>
<msg timestamp="20200110 18:35:31.163" level="INFO">${color code} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:35:31.161" endtime="20200110 18:35:31.163"></status>
</kw>
<msg timestamp="20200110 18:35:31.164" level="INFO">${input color} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:35:31.157" endtime="20200110 18:35:31.164"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position with color}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20200110 18:35:31.166" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='Color']/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20200110 18:35:31.165" endtime="20200110 18:35:31.167"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20200110 18:35:31.168" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='Color']/p[contains(text(),'Rack 1-Panel 3-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:35:31.167" endtime="20200110 18:35:31.169"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20200110 18:35:31.170" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 3-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:35:31.169" endtime="20200110 18:35:31.171"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="BulkPatchingDefinitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:35:31.193" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20200110 18:35:31.172" endtime="20200110 18:35:31.193"></status>
</kw>
<msg timestamp="20200110 18:35:31.194" level="INFO">${number of lines} = 3</msg>
<status status="PASS" starttime="20200110 18:35:31.171" endtime="20200110 18:35:31.194"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:35:31.195" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:35:31.194" endtime="20200110 18:35:31.195"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:35:31.196" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20200110 18:35:31.196" endtime="20200110 18:35:31.197"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:35:31.197" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20200110 18:35:31.197" endtime="20200110 18:35:31.198"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:35:31.198" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 3-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:35:31.198" endtime="20200110 18:35:31.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:35:31.199" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 3-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:35:31.199" endtime="20200110 18:35:31.200"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:35:31.215" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:35:31.200" endtime="20200110 18:35:31.215"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:31.215" endtime="20200110 18:35:31.216"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.196" endtime="20200110 18:35:31.216"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:35:31.217" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20200110 18:35:31.217" endtime="20200110 18:35:31.217"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:35:31.218" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20200110 18:35:31.218" endtime="20200110 18:35:31.219"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:35:31.220" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 3-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:35:31.219" endtime="20200110 18:35:31.220"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:35:31.220" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 3-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:35:31.220" endtime="20200110 18:35:31.221"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:35:31.236" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20200110 18:35:31.221" endtime="20200110 18:35:31.237"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20200110 18:35:31.238" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:31.237" endtime="20200110 18:35:31.238"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.216" endtime="20200110 18:35:31.238"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.195" endtime="20200110 18:35:31.238"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:31.239" endtime="20200110 18:35:31.240"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.239" endtime="20200110 18:35:31.240"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.144" endtime="20200110 18:35:31.241"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtRestoreTheUnpluggedEndBPort}&quot;" library="BulkPatchingDefinitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20200110 18:35:31.277" level="INFO">${get helptext} = Restore the unplugged End B ports, or press Delete to reorder the entries.</msg>
<status status="PASS" starttime="20200110 18:35:31.242" endtime="20200110 18:35:31.278"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:31.279" endtime="20200110 18:35:31.279"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.278" endtime="20200110 18:35:31.280"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.241" endtime="20200110 18:35:31.280"></status>
</kw>
<kw name="When Plugin LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; Port &quot;4&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:31.282" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:31.282" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:31.282" endtime="20200110 18:35:31.282"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:31.283" endtime="20200110 18:35:31.285"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.283" endtime="20200110 18:35:31.285"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:31.286" endtime="20200110 18:35:31.287"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.285" endtime="20200110 18:35:31.287"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:31.288" endtime="20200110 18:35:31.289"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.287" endtime="20200110 18:35:31.289"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:31.292" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:31.292" endtime="20200110 18:35:31.292"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.290" endtime="20200110 18:35:31.293"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.290" endtime="20200110 18:35:31.293"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.283" endtime="20200110 18:35:31.293"></status>
</kw>
<msg timestamp="20200110 18:35:31.294" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:31.281" endtime="20200110 18:35:31.294"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:31.295" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:31.294" endtime="20200110 18:35:31.295"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:31.296" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20200110 18:35:31.296" endtime="20200110 18:35:31.296"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:31.297" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20200110 18:35:31.297" endtime="20200110 18:35:31.297"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:31.322" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20200110 18:35:31.298" endtime="20200110 18:35:31.323"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:33.325" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:31.323" endtime="20200110 18:35:33.325"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:33.327" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:33.326" endtime="20200110 18:35:33.327"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.298" endtime="20200110 18:35:33.327"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:31.280" endtime="20200110 18:35:33.328"></status>
</kw>
<kw name="Then Check if Rack &quot;1&quot; Panel &quot;3&quot; Row &quot;1&quot; Port &quot;4&quot; in End &quot;B&quot; color &quot;black&quot;" library="BulkPatchingDefinitions">
<doc>This keyword is used to check the color of port information of Coper or LC panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>4</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:33.331" endtime="20200110 18:35:33.331"></status>
</kw>
<msg timestamp="20200110 18:35:33.332" level="INFO">${input end position} = 4</msg>
<status status="PASS" starttime="20200110 18:35:33.329" endtime="20200110 18:35:33.332"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20200110 18:35:33.333" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20200110 18:35:33.332" endtime="20200110 18:35:33.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20200110 18:35:33.334" level="INFO">${input panel} = -Panel 3</msg>
<status status="PASS" starttime="20200110 18:35:33.334" endtime="20200110 18:35:33.334"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20200110 18:35:33.335" level="INFO">${input port} = -Port 4</msg>
<status status="PASS" starttime="20200110 18:35:33.335" endtime="20200110 18:35:33.336"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20200110 18:35:33.337" level="INFO">${input port information} = Rack 1-Panel 3-Port 4</msg>
<status status="PASS" starttime="20200110 18:35:33.336" endtime="20200110 18:35:33.337"></status>
</kw>
<kw name="Get Color Code of Port Information" library="BulkPatchingDefinitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20200110 18:35:33.339" level="INFO">${color} = black</msg>
<status status="PASS" starttime="20200110 18:35:33.338" endtime="20200110 18:35:33.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#000;</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:33.341" endtime="20200110 18:35:33.341"></status>
</kw>
<msg timestamp="20200110 18:35:33.342" level="INFO">${color code} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:35:33.340" endtime="20200110 18:35:33.342"></status>
</kw>
<msg timestamp="20200110 18:35:33.343" level="INFO">${input color} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:35:33.338" endtime="20200110 18:35:33.343"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position with color}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20200110 18:35:33.344" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='Color']/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20200110 18:35:33.344" endtime="20200110 18:35:33.345"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20200110 18:35:33.346" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='Color']/p[contains(text(),'Rack 1-Panel 3-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:35:33.345" endtime="20200110 18:35:33.346"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20200110 18:35:33.348" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 3-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:35:33.347" endtime="20200110 18:35:33.349"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="BulkPatchingDefinitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:35:33.363" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20200110 18:35:33.350" endtime="20200110 18:35:33.364"></status>
</kw>
<msg timestamp="20200110 18:35:33.364" level="INFO">${number of lines} = 3</msg>
<status status="PASS" starttime="20200110 18:35:33.349" endtime="20200110 18:35:33.364"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:35:33.365" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:35:33.365" endtime="20200110 18:35:33.365"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:35:33.367" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20200110 18:35:33.366" endtime="20200110 18:35:33.367"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:35:33.368" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20200110 18:35:33.367" endtime="20200110 18:35:33.368"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:35:33.369" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 3-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:35:33.368" endtime="20200110 18:35:33.369"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:35:33.370" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[4][@style='color:#000;']/p[contains(text(),'Rack 1-Panel 3-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:35:33.370" endtime="20200110 18:35:33.370"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:35:33.386" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20200110 18:35:33.371" endtime="20200110 18:35:33.386"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20200110 18:35:33.388" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:33.387" endtime="20200110 18:35:33.388"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.366" endtime="20200110 18:35:33.388"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.366" endtime="20200110 18:35:33.388"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'1'</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:33.389" endtime="20200110 18:35:33.390"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.389" endtime="20200110 18:35:33.390"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.328" endtime="20200110 18:35:33.390"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtPressExitToCompleteBulkPatching}&quot;" library="BulkPatchingDefinitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20200110 18:35:33.413" level="INFO">${get helptext} = Press Exit to complete bulk patching.</msg>
<status status="PASS" starttime="20200110 18:35:33.391" endtime="20200110 18:35:33.414"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:33.415" endtime="20200110 18:35:33.415"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.414" endtime="20200110 18:35:33.416"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.391" endtime="20200110 18:35:33.416"></status>
</kw>
<kw name="And Plugout Serial LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:35:33.419" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20200110 18:35:33.418" endtime="20200110 18:35:33.419"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:35:33.420" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20200110 18:35:33.420" endtime="20200110 18:35:33.420"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugout LC Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:33.423" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:33.424" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:33.423" endtime="20200110 18:35:33.424"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:33.425" endtime="20200110 18:35:33.427"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.425" endtime="20200110 18:35:33.427"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:33.427" endtime="20200110 18:35:33.429"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.427" endtime="20200110 18:35:33.429"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:33.430" endtime="20200110 18:35:33.431"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.429" endtime="20200110 18:35:33.431"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:33.434" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:33.433" endtime="20200110 18:35:33.434"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.432" endtime="20200110 18:35:33.434"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.431" endtime="20200110 18:35:33.434"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.424" endtime="20200110 18:35:33.435"></status>
</kw>
<msg timestamp="20200110 18:35:33.435" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:33.422" endtime="20200110 18:35:33.435"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:33.436" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:33.436" endtime="20200110 18:35:33.437"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:33.438" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20200110 18:35:33.437" endtime="20200110 18:35:33.438"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:33.439" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20200110 18:35:33.439" endtime="20200110 18:35:33.439"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:33.464" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 4</msg>
<status status="PASS" starttime="20200110 18:35:33.440" endtime="20200110 18:35:33.465"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:35.468" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:33.465" endtime="20200110 18:35:35.469"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:35.471" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:35.470" endtime="20200110 18:35:35.472"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.440" endtime="20200110 18:35:35.472"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.422" endtime="20200110 18:35:35.473"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.421" endtime="20200110 18:35:35.473"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugout LC Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:35.479" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:35.479" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:35.478" endtime="20200110 18:35:35.479"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:35.481" endtime="20200110 18:35:35.484"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:35.481" endtime="20200110 18:35:35.484"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:35.486" endtime="20200110 18:35:35.488"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:35.485" endtime="20200110 18:35:35.489"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:35.490" endtime="20200110 18:35:35.493"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:35.489" endtime="20200110 18:35:35.493"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:35.497" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:35.497" endtime="20200110 18:35:35.498"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:35.494" endtime="20200110 18:35:35.498"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:35.494" endtime="20200110 18:35:35.498"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:35.480" endtime="20200110 18:35:35.498"></status>
</kw>
<msg timestamp="20200110 18:35:35.499" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:35.477" endtime="20200110 18:35:35.499"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:35.500" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:35.500" endtime="20200110 18:35:35.500"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:35.501" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 5</msg>
<status status="PASS" starttime="20200110 18:35:35.501" endtime="20200110 18:35:35.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:35.502" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 5</msg>
<status status="PASS" starttime="20200110 18:35:35.502" endtime="20200110 18:35:35.502"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:35.522" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 5</msg>
<status status="PASS" starttime="20200110 18:35:35.503" endtime="20200110 18:35:35.523"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:37.524" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:35.523" endtime="20200110 18:35:37.525"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:37.527" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:37.526" endtime="20200110 18:35:37.528"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:35.503" endtime="20200110 18:35:37.528"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:35.475" endtime="20200110 18:35:37.529"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:35.474" endtime="20200110 18:35:37.530"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugout LC Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:37.534" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:37.534" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:37.533" endtime="20200110 18:35:37.535"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:37.537" endtime="20200110 18:35:37.540"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:37.536" endtime="20200110 18:35:37.540"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:37.542" endtime="20200110 18:35:37.544"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:37.541" endtime="20200110 18:35:37.545"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:37.546" endtime="20200110 18:35:37.549"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:37.545" endtime="20200110 18:35:37.549"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:37.554" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:37.553" endtime="20200110 18:35:37.554"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:37.550" endtime="20200110 18:35:37.555"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:37.550" endtime="20200110 18:35:37.555"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:37.535" endtime="20200110 18:35:37.556"></status>
</kw>
<msg timestamp="20200110 18:35:37.557" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:37.532" endtime="20200110 18:35:37.557"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:37.559" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:37.558" endtime="20200110 18:35:37.559"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:37.561" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 6</msg>
<status status="PASS" starttime="20200110 18:35:37.560" endtime="20200110 18:35:37.561"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:37.563" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 6</msg>
<status status="PASS" starttime="20200110 18:35:37.562" endtime="20200110 18:35:37.563"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:37.589" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 6</msg>
<status status="PASS" starttime="20200110 18:35:37.565" endtime="20200110 18:35:37.590"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:39.593" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:37.590" endtime="20200110 18:35:39.594"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:39.596" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:39.595" endtime="20200110 18:35:39.597"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:37.564" endtime="20200110 18:35:39.597"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:37.531" endtime="20200110 18:35:39.598"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:37.530" endtime="20200110 18:35:39.598"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.421" endtime="20200110 18:35:39.599"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:33.417" endtime="20200110 18:35:39.600"></status>
</kw>
<kw name="And Plugout Serial LC Tip to Rack &quot;1&quot; Panel &quot;3&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:35:39.603" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200110 18:35:39.602" endtime="20200110 18:35:39.603"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:35:39.605" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20200110 18:35:39.604" endtime="20200110 18:35:39.605"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugout LC Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:39.610" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:39.611" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:39.610" endtime="20200110 18:35:39.611"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:39.613" endtime="20200110 18:35:39.616"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:39.612" endtime="20200110 18:35:39.616"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:39.617" endtime="20200110 18:35:39.621"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:39.617" endtime="20200110 18:35:39.621"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:39.623" endtime="20200110 18:35:39.626"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:39.622" endtime="20200110 18:35:39.626"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:39.631" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:39.631" endtime="20200110 18:35:39.632"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:39.628" endtime="20200110 18:35:39.633"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:39.627" endtime="20200110 18:35:39.633"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:39.612" endtime="20200110 18:35:39.634"></status>
</kw>
<msg timestamp="20200110 18:35:39.635" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:39.608" endtime="20200110 18:35:39.635"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:39.637" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:39.636" endtime="20200110 18:35:39.637"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:39.638" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20200110 18:35:39.637" endtime="20200110 18:35:39.638"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:39.639" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20200110 18:35:39.639" endtime="20200110 18:35:39.639"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:39.654" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 1</msg>
<status status="PASS" starttime="20200110 18:35:39.640" endtime="20200110 18:35:39.655"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:41.656" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:39.655" endtime="20200110 18:35:41.657"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:41.659" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:41.658" endtime="20200110 18:35:41.660"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:39.640" endtime="20200110 18:35:41.660"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:39.607" endtime="20200110 18:35:41.661"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:39.606" endtime="20200110 18:35:41.662"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugout LC Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:41.667" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:41.667" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:41.666" endtime="20200110 18:35:41.667"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:41.669" endtime="20200110 18:35:41.672"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:41.669" endtime="20200110 18:35:41.673"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:41.674" endtime="20200110 18:35:41.677"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:41.673" endtime="20200110 18:35:41.677"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:41.678" endtime="20200110 18:35:41.679"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:41.677" endtime="20200110 18:35:41.679"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:41.682" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:41.682" endtime="20200110 18:35:41.682"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:41.680" endtime="20200110 18:35:41.682"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:41.679" endtime="20200110 18:35:41.683"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:41.668" endtime="20200110 18:35:41.683"></status>
</kw>
<msg timestamp="20200110 18:35:41.684" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:41.665" endtime="20200110 18:35:41.684"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:41.685" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:41.684" endtime="20200110 18:35:41.685"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:41.686" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 2</msg>
<status status="PASS" starttime="20200110 18:35:41.685" endtime="20200110 18:35:41.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:41.687" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 2</msg>
<status status="PASS" starttime="20200110 18:35:41.686" endtime="20200110 18:35:41.687"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:41.707" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 2</msg>
<status status="PASS" starttime="20200110 18:35:41.688" endtime="20200110 18:35:41.708"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:43.709" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:41.708" endtime="20200110 18:35:43.709"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:43.711" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:43.710" endtime="20200110 18:35:43.711"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:41.687" endtime="20200110 18:35:43.711"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:41.663" endtime="20200110 18:35:43.712"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:41.663" endtime="20200110 18:35:43.712"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugout LC Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get LC Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:35:43.714" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:35:43.715" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:35:43.714" endtime="20200110 18:35:43.715"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:43.716" endtime="20200110 18:35:43.717"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:43.715" endtime="20200110 18:35:43.718"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:43.718" endtime="20200110 18:35:43.720"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:43.718" endtime="20200110 18:35:43.720"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:43.721" endtime="20200110 18:35:43.722"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:43.720" endtime="20200110 18:35:43.723"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[LC]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:35:43.725" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:35:43.725" endtime="20200110 18:35:43.725"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:43.723" endtime="20200110 18:35:43.725"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:43.723" endtime="20200110 18:35:43.726"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:43.715" endtime="20200110 18:35:43.726"></status>
</kw>
<msg timestamp="20200110 18:35:43.727" level="INFO">${panel index} = 4</msg>
<status status="PASS" starttime="20200110 18:35:43.713" endtime="20200110 18:35:43.727"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:35:43.728" level="INFO">4</msg>
<status status="PASS" starttime="20200110 18:35:43.727" endtime="20200110 18:35:43.728"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:35:43.729" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 4 --port 3</msg>
<status status="PASS" starttime="20200110 18:35:43.728" endtime="20200110 18:35:43.729"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:35:43.730" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 3</msg>
<status status="PASS" starttime="20200110 18:35:43.729" endtime="20200110 18:35:43.730"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:35:43.755" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 4 --port 3</msg>
<status status="PASS" starttime="20200110 18:35:43.731" endtime="20200110 18:35:43.756"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:35:45.758" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:43.756" endtime="20200110 18:35:45.759"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:35:45.761" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=4
type=g2lc
panel_state=RUN
serial=25FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:35:45.760" endtime="20200110 18:35:45.762"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:43.730" endtime="20200110 18:35:45.762"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:43.713" endtime="20200110 18:35:45.763"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:43.712" endtime="20200110 18:35:45.763"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:39.606" endtime="20200110 18:35:45.764"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:39.601" endtime="20200110 18:35:45.765"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="GeneralPage" type="teardown">
<kw name="Wait For Page Update" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE UPDATE TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:35:45.869" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20200110 18:35:45.767" endtime="20200110 18:35:45.869"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:45.766" endtime="20200110 18:35:45.870"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200110 18:35:45.895" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20200110 18:35:45.871" endtime="20200110 18:35:45.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:35:45.915" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:35:45.900" endtime="20200110 18:35:45.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:35:45.918" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20200110 18:35:45.918" endtime="20200110 18:35:45.980"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:35:46.984" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:35:45.981" endtime="20200110 18:35:46.984"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:45.980" endtime="20200110 18:35:46.985"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:45.917" endtime="20200110 18:35:46.986"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:45.916" endtime="20200110 18:35:46.986"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:45.915" endtime="20200110 18:35:46.987"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:45.899" endtime="20200110 18:35:46.988"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:35:47.990" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:35:46.989" endtime="20200110 18:35:47.990"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:46.988" endtime="20200110 18:35:47.991"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:45.898" endtime="20200110 18:35:47.992"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:45.897" endtime="20200110 18:35:47.992"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200110 18:35:48.015" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20200110 18:35:47.993" endtime="20200110 18:35:48.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:35:48.038" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:35:48.020" endtime="20200110 18:35:48.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:35:48.041" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200110 18:35:48.041" endtime="20200110 18:35:48.095"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:35:49.100" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:35:48.098" endtime="20200110 18:35:49.101"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:48.096" endtime="20200110 18:35:49.101"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:48.040" endtime="20200110 18:35:49.102"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:48.040" endtime="20200110 18:35:49.103"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:48.039" endtime="20200110 18:35:49.103"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:48.018" endtime="20200110 18:35:49.104"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:35:50.107" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:35:49.106" endtime="20200110 18:35:50.107"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:49.105" endtime="20200110 18:35:50.108"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:48.018" endtime="20200110 18:35:50.109"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:48.016" endtime="20200110 18:35:50.109"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200110 18:35:50.110" endtime="20200110 18:35:52.352"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:45.765" endtime="20200110 18:35:52.352"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:00.699" endtime="20200110 18:35:52.352" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-s1-t4" name="INSERT_END_B_05_08_Verify that imVision X needs to generate beep tone when plugging a connector that is matched to one of unplugged connectors in the End B list if there is a HDF panel">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSHDefinitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST_A}</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:52.357" endtime="20200110 18:35:52.357"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20200110 18:35:52.357" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20200110 18:35:54.185" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20200110 18:35:52.357" endtime="20200110 18:35:54.185"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:52.357" endtime="20200110 18:35:54.185"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="GeneralPage">
<tags>
<tag>host_A</tag>
<tag>host_B</tag>
</tags>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST A}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20200110 18:35:54.185" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20200110 18:35:54.185" endtime="20200110 18:35:54.185"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200110 18:35:54.185" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20200110 18:35:54.185" endtime="20200110 18:35:57.177"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20200110 18:35:57.178" endtime="20200110 18:35:58.332"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:35:59.332" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:35:58.332" endtime="20200110 18:35:59.332"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="GeneralPage">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200110 18:35:59.363" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20200110 18:35:59.332" endtime="20200110 18:35:59.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:59.363" endtime="20200110 18:35:59.363"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20200110 18:35:59.379" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20200110 18:35:59.363" endtime="20200110 18:35:59.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:59.379" endtime="20200110 18:35:59.379"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200110 18:35:59.395" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20200110 18:35:59.379" endtime="20200110 18:35:59.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20200110 18:35:59.395" endtime="20200110 18:35:59.395"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:59.332" endtime="20200110 18:35:59.395"></status>
</kw>
<kw name="Go To Home Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:35:59.410" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:35:59.395" endtime="20200110 18:35:59.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:35:59.426" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200110 18:35:59.426" endtime="20200110 18:35:59.554"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:36:00.570" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:35:59.557" endtime="20200110 18:36:00.570"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:59.555" endtime="20200110 18:36:00.570"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:59.426" endtime="20200110 18:36:00.570"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:59.410" endtime="20200110 18:36:00.570"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:59.410" endtime="20200110 18:36:00.570"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:59.395" endtime="20200110 18:36:00.570"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:59.395" endtime="20200110 18:36:00.570"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:54.185" endtime="20200110 18:36:00.570"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:52.357" endtime="20200110 18:36:00.570"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="HomePage">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20200110 18:36:00.570" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20200110 18:36:00.570" endtime="20200110 18:36:00.666"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:36:01.670" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:36:00.668" endtime="20200110 18:36:01.670"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:00.667" endtime="20200110 18:36:01.670"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:00.570" endtime="20200110 18:36:01.670"></status>
</kw>
<kw name="When Plugin Serial HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:36:01.670" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:01.670"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:36:01.670" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:01.670"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin HDF Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; ModuleHD &quot;${moduleHD}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:01.670" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:01.670" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:01.670"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:01.670"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:01.670"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:01.670"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:01.670"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:01.686" endtime="20200110 18:36:01.686"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:01.686"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:01.686" endtime="20200110 18:36:01.686"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:01.686" endtime="20200110 18:36:01.686"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:01.686" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:01.686" endtime="20200110 18:36:01.686"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:01.686" endtime="20200110 18:36:01.686"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:01.686" endtime="20200110 18:36:01.686"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:01.686"></status>
</kw>
<msg timestamp="20200110 18:36:01.686" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:01.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:01.686" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:01.686" endtime="20200110 18:36:01.686"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:01.686" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20200110 18:36:01.686" endtime="20200110 18:36:01.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:01.686" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20200110 18:36:01.686" endtime="20200110 18:36:01.686"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:01.795" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20200110 18:36:01.686" endtime="20200110 18:36:01.795"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:03.796" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:01.795" endtime="20200110 18:36:03.796"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:03.796" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:03.796" endtime="20200110 18:36:03.796"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:01.686" endtime="20200110 18:36:03.796"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:03.796"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:03.796"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin HDF Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; ModuleHD &quot;${moduleHD}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:03.796" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:03.796" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:03.796" endtime="20200110 18:36:03.796"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:03.796" endtime="20200110 18:36:03.796"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:03.796" endtime="20200110 18:36:03.796"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:03.796" endtime="20200110 18:36:03.796"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:03.796" endtime="20200110 18:36:03.796"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:03.796" endtime="20200110 18:36:03.812"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:03.796" endtime="20200110 18:36:03.812"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:03.812" endtime="20200110 18:36:03.812"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:03.812" endtime="20200110 18:36:03.812"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:03.812" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:03.812" endtime="20200110 18:36:03.812"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:03.812" endtime="20200110 18:36:03.812"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:03.812" endtime="20200110 18:36:03.812"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:03.796" endtime="20200110 18:36:03.812"></status>
</kw>
<msg timestamp="20200110 18:36:03.812" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:03.796" endtime="20200110 18:36:03.812"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:03.812" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:03.812" endtime="20200110 18:36:03.812"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:03.812" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 2</msg>
<status status="PASS" starttime="20200110 18:36:03.812" endtime="20200110 18:36:03.812"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:03.828" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 2</msg>
<status status="PASS" starttime="20200110 18:36:03.812" endtime="20200110 18:36:03.828"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:03.937" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 2</msg>
<status status="PASS" starttime="20200110 18:36:03.828" endtime="20200110 18:36:03.937"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:05.955" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:03.937" endtime="20200110 18:36:05.955"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:05.955" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:05.955" endtime="20200110 18:36:05.955"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:03.828" endtime="20200110 18:36:05.955"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:03.796" endtime="20200110 18:36:05.955"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:03.796" endtime="20200110 18:36:05.955"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugin HDF Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; ModuleHD &quot;${moduleHD}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:05.955" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:05.955" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:05.955" endtime="20200110 18:36:05.955"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:05.955" endtime="20200110 18:36:05.971"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:05.955" endtime="20200110 18:36:05.971"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:05.971" endtime="20200110 18:36:05.971"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:05.971" endtime="20200110 18:36:05.971"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:05.971" endtime="20200110 18:36:05.971"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:05.971" endtime="20200110 18:36:05.971"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:05.971" endtime="20200110 18:36:05.986"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:05.971" endtime="20200110 18:36:05.986"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:05.986" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:05.986" endtime="20200110 18:36:05.986"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:05.986" endtime="20200110 18:36:05.986"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:05.986" endtime="20200110 18:36:05.986"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:05.955" endtime="20200110 18:36:05.986"></status>
</kw>
<msg timestamp="20200110 18:36:05.986" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:05.955" endtime="20200110 18:36:05.986"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:05.986" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:05.986" endtime="20200110 18:36:05.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:05.986" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 3</msg>
<status status="PASS" starttime="20200110 18:36:05.986" endtime="20200110 18:36:05.986"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:06.002" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 3</msg>
<status status="PASS" starttime="20200110 18:36:05.986" endtime="20200110 18:36:06.002"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:06.096" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 3</msg>
<status status="PASS" starttime="20200110 18:36:06.002" endtime="20200110 18:36:06.096"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:08.104" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:06.096" endtime="20200110 18:36:08.104"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:08.104" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:08.104" endtime="20200110 18:36:08.104"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:06.002" endtime="20200110 18:36:08.104"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:05.955" endtime="20200110 18:36:08.104"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:05.955" endtime="20200110 18:36:08.104"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:08.104"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:01.670" endtime="20200110 18:36:08.104"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="BulkPatchingPage">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20200110 18:36:08.104" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20200110 18:36:08.104" endtime="20200110 18:36:08.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:36:08.135" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:36:08.104" endtime="20200110 18:36:08.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:36:08.135" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20200110 18:36:08.135" endtime="20200110 18:36:08.202"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:36:09.209" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:36:08.203" endtime="20200110 18:36:09.209"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:08.202" endtime="20200110 18:36:09.209"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:08.135" endtime="20200110 18:36:09.209"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:08.135" endtime="20200110 18:36:09.209"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:08.135" endtime="20200110 18:36:09.209"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:08.104" endtime="20200110 18:36:09.209"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:08.104" endtime="20200110 18:36:09.209"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:36:10.216" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:36:09.209" endtime="20200110 18:36:10.216"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:09.209" endtime="20200110 18:36:10.216"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:08.104" endtime="20200110 18:36:10.216"></status>
</kw>
<kw name="When Plugin Serial HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:36:10.216" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20200110 18:36:10.216" endtime="20200110 18:36:10.216"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:36:10.216" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20200110 18:36:10.216" endtime="20200110 18:36:10.216"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugin HDF Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; ModuleHD &quot;${moduleHD}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:10.216" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:10.216" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:10.216" endtime="20200110 18:36:10.216"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:10.232" endtime="20200110 18:36:10.232"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:10.232" endtime="20200110 18:36:10.232"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:10.232" endtime="20200110 18:36:10.232"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:10.232" endtime="20200110 18:36:10.232"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:10.232" endtime="20200110 18:36:10.232"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:10.232" endtime="20200110 18:36:10.232"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:10.248" endtime="20200110 18:36:10.248"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:10.232" endtime="20200110 18:36:10.248"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:10.248" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:10.248" endtime="20200110 18:36:10.248"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:10.248" endtime="20200110 18:36:10.248"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:10.248" endtime="20200110 18:36:10.248"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:10.216" endtime="20200110 18:36:10.248"></status>
</kw>
<msg timestamp="20200110 18:36:10.248" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:10.216" endtime="20200110 18:36:10.248"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:10.248" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:10.248" endtime="20200110 18:36:10.248"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:10.263" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20200110 18:36:10.263" endtime="20200110 18:36:10.263"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:10.263" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20200110 18:36:10.263" endtime="20200110 18:36:10.263"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:10.310" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20200110 18:36:10.263" endtime="20200110 18:36:10.310"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:12.327" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:10.310" endtime="20200110 18:36:12.327"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:12.327" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:12.327" endtime="20200110 18:36:12.327"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:10.263" endtime="20200110 18:36:12.327"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:10.216" endtime="20200110 18:36:12.327"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:10.216" endtime="20200110 18:36:12.327"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugin HDF Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; ModuleHD &quot;${moduleHD}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:12.327" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:12.327" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:12.327" endtime="20200110 18:36:12.327"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:12.327" endtime="20200110 18:36:12.342"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:12.327" endtime="20200110 18:36:12.342"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:12.342" endtime="20200110 18:36:12.342"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:12.342" endtime="20200110 18:36:12.342"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:12.342" endtime="20200110 18:36:12.342"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:12.342" endtime="20200110 18:36:12.342"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:12.342" endtime="20200110 18:36:12.342"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:12.342" endtime="20200110 18:36:12.342"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:12.342" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:12.342" endtime="20200110 18:36:12.342"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:12.342" endtime="20200110 18:36:12.342"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:12.342" endtime="20200110 18:36:12.342"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:12.327" endtime="20200110 18:36:12.342"></status>
</kw>
<msg timestamp="20200110 18:36:12.358" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:12.327" endtime="20200110 18:36:12.358"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:12.358" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:12.358" endtime="20200110 18:36:12.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:12.358" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 5</msg>
<status status="PASS" starttime="20200110 18:36:12.358" endtime="20200110 18:36:12.358"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:12.358" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 5</msg>
<status status="PASS" starttime="20200110 18:36:12.358" endtime="20200110 18:36:12.358"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:12.436" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 5</msg>
<status status="PASS" starttime="20200110 18:36:12.358" endtime="20200110 18:36:12.436"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:14.439" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:12.436" endtime="20200110 18:36:14.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:14.439" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:14.439" endtime="20200110 18:36:14.439"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:12.358" endtime="20200110 18:36:14.439"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:12.327" endtime="20200110 18:36:14.439"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:12.327" endtime="20200110 18:36:14.439"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugin HDF Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; ModuleHD &quot;${moduleHD}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:14.439" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:14.439" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:14.439" endtime="20200110 18:36:14.439"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:14.439" endtime="20200110 18:36:14.455"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:14.439" endtime="20200110 18:36:14.455"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:14.455" endtime="20200110 18:36:14.455"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:14.455" endtime="20200110 18:36:14.455"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:14.455" endtime="20200110 18:36:14.455"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:14.455" endtime="20200110 18:36:14.455"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:14.455" endtime="20200110 18:36:14.471"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:14.455" endtime="20200110 18:36:14.471"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:14.471" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:14.471" endtime="20200110 18:36:14.471"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:14.471" endtime="20200110 18:36:14.471"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:14.471" endtime="20200110 18:36:14.471"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:14.439" endtime="20200110 18:36:14.471"></status>
</kw>
<msg timestamp="20200110 18:36:14.471" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:14.439" endtime="20200110 18:36:14.471"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:14.471" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:14.471" endtime="20200110 18:36:14.471"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:14.471" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 6</msg>
<status status="PASS" starttime="20200110 18:36:14.471" endtime="20200110 18:36:14.471"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:14.471" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 6</msg>
<status status="PASS" starttime="20200110 18:36:14.471" endtime="20200110 18:36:14.471"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:14.533" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 6</msg>
<status status="PASS" starttime="20200110 18:36:14.471" endtime="20200110 18:36:14.533"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:16.540" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:14.533" endtime="20200110 18:36:16.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:16.540" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:16.540" endtime="20200110 18:36:16.540"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:14.471" endtime="20200110 18:36:16.540"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:14.439" endtime="20200110 18:36:16.540"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:14.439" endtime="20200110 18:36:16.540"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:10.216" endtime="20200110 18:36:16.540"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:10.216" endtime="20200110 18:36:16.540"></status>
</kw>
<kw name="When Plugout HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;5&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:16.540" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:16.540" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:16.540" endtime="20200110 18:36:16.540"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:16.540" endtime="20200110 18:36:16.556"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:16.540" endtime="20200110 18:36:16.556"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:16.556" endtime="20200110 18:36:16.556"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:16.556" endtime="20200110 18:36:16.556"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:16.556" endtime="20200110 18:36:16.556"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:16.556" endtime="20200110 18:36:16.556"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:16.556" endtime="20200110 18:36:16.572"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:16.556" endtime="20200110 18:36:16.572"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:16.572" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:16.572" endtime="20200110 18:36:16.572"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:16.572" endtime="20200110 18:36:16.572"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:16.572" endtime="20200110 18:36:16.572"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:16.540" endtime="20200110 18:36:16.572"></status>
</kw>
<msg timestamp="20200110 18:36:16.572" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:16.540" endtime="20200110 18:36:16.572"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:16.572" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:16.572" endtime="20200110 18:36:16.572"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:16.572" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 5</msg>
<status status="PASS" starttime="20200110 18:36:16.572" endtime="20200110 18:36:16.572"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:16.587" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 5</msg>
<status status="PASS" starttime="20200110 18:36:16.587" endtime="20200110 18:36:16.587"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:16.665" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 5</msg>
<status status="PASS" starttime="20200110 18:36:16.587" endtime="20200110 18:36:16.665"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:18.688" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:16.665" endtime="20200110 18:36:18.688"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:18.688" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:18.688" endtime="20200110 18:36:18.688"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:16.587" endtime="20200110 18:36:18.688"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:16.540" endtime="20200110 18:36:18.688"></status>
</kw>
<kw name="When Plugout HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;4&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:18.688" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:18.688" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:18.688" endtime="20200110 18:36:18.688"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:18.688" endtime="20200110 18:36:18.688"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:18.688" endtime="20200110 18:36:18.703"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:18.703" endtime="20200110 18:36:18.703"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:18.703" endtime="20200110 18:36:18.703"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:18.703" endtime="20200110 18:36:18.703"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:18.703" endtime="20200110 18:36:18.703"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:18.703" endtime="20200110 18:36:18.703"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:18.703" endtime="20200110 18:36:18.703"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:18.703" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:18.703" endtime="20200110 18:36:18.703"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:18.703" endtime="20200110 18:36:18.703"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:18.703" endtime="20200110 18:36:18.703"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:18.688" endtime="20200110 18:36:18.703"></status>
</kw>
<msg timestamp="20200110 18:36:18.703" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:18.688" endtime="20200110 18:36:18.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:18.719" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:18.719" endtime="20200110 18:36:18.719"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:18.719" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20200110 18:36:18.719" endtime="20200110 18:36:18.719"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:18.719" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20200110 18:36:18.719" endtime="20200110 18:36:18.719"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:18.781" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20200110 18:36:18.719" endtime="20200110 18:36:18.781"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:20.784" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:18.781" endtime="20200110 18:36:20.784"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:20.784" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:20.784" endtime="20200110 18:36:20.784"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:18.719" endtime="20200110 18:36:20.784"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:18.688" endtime="20200110 18:36:20.784"></status>
</kw>
<kw name="When Plugin HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;5&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:20.784" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:20.784" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:20.784" endtime="20200110 18:36:20.784"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:20.784" endtime="20200110 18:36:20.784"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:20.784" endtime="20200110 18:36:20.800"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:20.800" endtime="20200110 18:36:20.800"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:20.800" endtime="20200110 18:36:20.800"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:20.800" endtime="20200110 18:36:20.800"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:20.800" endtime="20200110 18:36:20.800"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:20.800" endtime="20200110 18:36:20.800"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:20.800" endtime="20200110 18:36:20.800"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:20.815" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:20.815" endtime="20200110 18:36:20.815"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:20.815" endtime="20200110 18:36:20.815"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:20.815" endtime="20200110 18:36:20.815"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:20.784" endtime="20200110 18:36:20.815"></status>
</kw>
<msg timestamp="20200110 18:36:20.815" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:20.784" endtime="20200110 18:36:20.815"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:20.815" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:20.815" endtime="20200110 18:36:20.815"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:20.815" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 5</msg>
<status status="PASS" starttime="20200110 18:36:20.815" endtime="20200110 18:36:20.815"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:20.815" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 5</msg>
<status status="PASS" starttime="20200110 18:36:20.815" endtime="20200110 18:36:20.831"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:20.925" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 5</msg>
<status status="PASS" starttime="20200110 18:36:20.831" endtime="20200110 18:36:20.925"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:22.931" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:20.925" endtime="20200110 18:36:22.931"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:22.931" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:22.931" endtime="20200110 18:36:22.931"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:20.831" endtime="20200110 18:36:22.931"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:20.784" endtime="20200110 18:36:22.931"></status>
</kw>
<kw name="Then Check and see color if Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;5&quot; &quot;appeared&quot; in End &quot;B&quot; color &quot;black&quot;" library="BulkPatchingDefinitions">
<doc>This keyword is used to check the information of HDF panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>4</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:22.931" endtime="20200110 18:36:22.931"></status>
</kw>
<msg timestamp="20200110 18:36:22.931" level="INFO">${input end position} = 4</msg>
<status status="PASS" starttime="20200110 18:36:22.931" endtime="20200110 18:36:22.931"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20200110 18:36:22.931" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20200110 18:36:22.931" endtime="20200110 18:36:22.931"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20200110 18:36:22.931" level="INFO">${input panel} = -Panel 4</msg>
<status status="PASS" starttime="20200110 18:36:22.931" endtime="20200110 18:36:22.931"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Module</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${input module}</var>
</assign>
<msg timestamp="20200110 18:36:22.947" level="INFO">${input module} = -Module 1</msg>
<status status="PASS" starttime="20200110 18:36:22.931" endtime="20200110 18:36:22.947"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20200110 18:36:22.947" level="INFO">${input port} = -Port 5</msg>
<status status="PASS" starttime="20200110 18:36:22.947" endtime="20200110 18:36:22.947"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input module}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20200110 18:36:22.947" level="INFO">${input port information} = Rack 1-Panel 4-Module 1-Port 5</msg>
<status status="PASS" starttime="20200110 18:36:22.947" endtime="20200110 18:36:22.947"></status>
</kw>
<kw name="Get Color Code of Port Information" library="BulkPatchingDefinitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20200110 18:36:22.947" level="INFO">${color} = black</msg>
<status status="PASS" starttime="20200110 18:36:22.947" endtime="20200110 18:36:22.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#000;</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:22.947" endtime="20200110 18:36:22.947"></status>
</kw>
<msg timestamp="20200110 18:36:22.947" level="INFO">${color code} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:36:22.947" endtime="20200110 18:36:22.947"></status>
</kw>
<msg timestamp="20200110 18:36:22.947" level="INFO">${input color} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:36:22.947" endtime="20200110 18:36:22.947"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20200110 18:36:22.947" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20200110 18:36:22.947" endtime="20200110 18:36:22.947"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20200110 18:36:22.962" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[4]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:36:22.947" endtime="20200110 18:36:22.962"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20200110 18:36:22.962" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:36:22.962" endtime="20200110 18:36:22.962"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="BulkPatchingDefinitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:36:22.978" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20200110 18:36:22.962" endtime="20200110 18:36:22.978"></status>
</kw>
<msg timestamp="20200110 18:36:22.978" level="INFO">${number of lines} = 3</msg>
<status status="PASS" starttime="20200110 18:36:22.962" endtime="20200110 18:36:22.978"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:36:22.978" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:36:22.978" endtime="20200110 18:36:22.978"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:36:22.994" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20200110 18:36:22.994" endtime="20200110 18:36:22.994"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:36:22.994" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20200110 18:36:22.994" endtime="20200110 18:36:22.994"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:36:22.994" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[4]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:36:22.994" endtime="20200110 18:36:22.994"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:36:22.994" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[4]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:36:22.994" endtime="20200110 18:36:22.994"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:36:23.009" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:36:22.994" endtime="20200110 18:36:23.009"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:23.009" endtime="20200110 18:36:23.009"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:22.994" endtime="20200110 18:36:23.009"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:36:23.009" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20200110 18:36:23.009" endtime="20200110 18:36:23.009"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:36:23.009" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20200110 18:36:23.009" endtime="20200110 18:36:23.009"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:36:23.009" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[4]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:36:23.009" endtime="20200110 18:36:23.009"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:36:23.009" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[4]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:36:23.009" endtime="20200110 18:36:23.009"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:36:23.025" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20200110 18:36:23.009" endtime="20200110 18:36:23.025"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20200110 18:36:23.025" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:23.025" endtime="20200110 18:36:23.025"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.009" endtime="20200110 18:36:23.025"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:22.994" endtime="20200110 18:36:23.025"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20200110 18:36:23.025" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20200110 18:36:23.025" endtime="20200110 18:36:23.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:23.025" endtime="20200110 18:36:23.025"></status>
</kw>
<msg timestamp="20200110 18:36:23.025" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20200110 18:36:23.025" endtime="20200110 18:36:23.025"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:23.041" endtime="20200110 18:36:23.041"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.041" endtime="20200110 18:36:23.041"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:22.931" endtime="20200110 18:36:23.041"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtRestoreTheUnpluggedEndBPort}&quot;" library="BulkPatchingDefinitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20200110 18:36:23.072" level="INFO">${get helptext} = Restore the unplugged End B ports, or press Delete to reorder the entries.</msg>
<status status="PASS" starttime="20200110 18:36:23.041" endtime="20200110 18:36:23.072"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:23.072" endtime="20200110 18:36:23.072"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.072" endtime="20200110 18:36:23.072"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.041" endtime="20200110 18:36:23.072"></status>
</kw>
<kw name="When Plugin HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;4&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:23.072" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:23.072" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:23.072" endtime="20200110 18:36:23.072"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:23.072" endtime="20200110 18:36:23.072"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.072" endtime="20200110 18:36:23.072"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:23.072" endtime="20200110 18:36:23.072"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.072" endtime="20200110 18:36:23.087"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:23.087" endtime="20200110 18:36:23.087"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.087" endtime="20200110 18:36:23.087"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:23.087" endtime="20200110 18:36:23.087"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.087" endtime="20200110 18:36:23.087"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:23.087" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:23.087" endtime="20200110 18:36:23.087"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.087" endtime="20200110 18:36:23.087"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.087" endtime="20200110 18:36:23.087"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.072" endtime="20200110 18:36:23.087"></status>
</kw>
<msg timestamp="20200110 18:36:23.087" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:23.072" endtime="20200110 18:36:23.087"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:23.087" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:23.087" endtime="20200110 18:36:23.087"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:23.087" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20200110 18:36:23.087" endtime="20200110 18:36:23.087"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:23.087" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20200110 18:36:23.087" endtime="20200110 18:36:23.087"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:23.166" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20200110 18:36:23.087" endtime="20200110 18:36:23.166"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:25.166" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:23.166" endtime="20200110 18:36:25.166"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:25.166" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:25.166" endtime="20200110 18:36:25.166"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.087" endtime="20200110 18:36:25.166"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:23.072" endtime="20200110 18:36:25.166"></status>
</kw>
<kw name="Then Check and see color if Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; Port &quot;4&quot; &quot;appeared&quot; in End &quot;B&quot; color &quot;black&quot;" library="BulkPatchingDefinitions">
<doc>This keyword is used to check the information of HDF panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>4</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:25.166" endtime="20200110 18:36:25.166"></status>
</kw>
<msg timestamp="20200110 18:36:25.166" level="INFO">${input end position} = 4</msg>
<status status="PASS" starttime="20200110 18:36:25.166" endtime="20200110 18:36:25.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20200110 18:36:25.166" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20200110 18:36:25.166" endtime="20200110 18:36:25.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20200110 18:36:25.166" level="INFO">${input panel} = -Panel 4</msg>
<status status="PASS" starttime="20200110 18:36:25.166" endtime="20200110 18:36:25.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Module</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${input module}</var>
</assign>
<msg timestamp="20200110 18:36:25.182" level="INFO">${input module} = -Module 1</msg>
<status status="PASS" starttime="20200110 18:36:25.166" endtime="20200110 18:36:25.182"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20200110 18:36:25.182" level="INFO">${input port} = -Port 4</msg>
<status status="PASS" starttime="20200110 18:36:25.182" endtime="20200110 18:36:25.182"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input module}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20200110 18:36:25.182" level="INFO">${input port information} = Rack 1-Panel 4-Module 1-Port 4</msg>
<status status="PASS" starttime="20200110 18:36:25.182" endtime="20200110 18:36:25.182"></status>
</kw>
<kw name="Get Color Code of Port Information" library="BulkPatchingDefinitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20200110 18:36:25.182" level="INFO">${color} = black</msg>
<status status="PASS" starttime="20200110 18:36:25.182" endtime="20200110 18:36:25.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#000;</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:25.182" endtime="20200110 18:36:25.182"></status>
</kw>
<msg timestamp="20200110 18:36:25.182" level="INFO">${color code} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:36:25.182" endtime="20200110 18:36:25.182"></status>
</kw>
<msg timestamp="20200110 18:36:25.182" level="INFO">${input color} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:36:25.182" endtime="20200110 18:36:25.182"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20200110 18:36:25.182" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20200110 18:36:25.182" endtime="20200110 18:36:25.182"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20200110 18:36:25.197" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[4]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:36:25.182" endtime="20200110 18:36:25.197"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20200110 18:36:25.197" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:36:25.197" endtime="20200110 18:36:25.197"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="BulkPatchingDefinitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:36:25.213" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20200110 18:36:25.197" endtime="20200110 18:36:25.213"></status>
</kw>
<msg timestamp="20200110 18:36:25.213" level="INFO">${number of lines} = 3</msg>
<status status="PASS" starttime="20200110 18:36:25.197" endtime="20200110 18:36:25.213"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:36:25.213" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:36:25.213" endtime="20200110 18:36:25.213"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:36:25.229" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20200110 18:36:25.213" endtime="20200110 18:36:25.229"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:36:25.229" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20200110 18:36:25.229" endtime="20200110 18:36:25.229"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:36:25.229" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[4]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:36:25.229" endtime="20200110 18:36:25.229"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:36:25.229" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[4]/p[contains(text(),'Rack 1-Panel 4-Module 1-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:36:25.229" endtime="20200110 18:36:25.229"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:36:25.244" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20200110 18:36:25.229" endtime="20200110 18:36:25.244"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20200110 18:36:25.244" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:25.244" endtime="20200110 18:36:25.244"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.213" endtime="20200110 18:36:25.244"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.213" endtime="20200110 18:36:25.244"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20200110 18:36:25.244" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20200110 18:36:25.244" endtime="20200110 18:36:25.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:25.244" endtime="20200110 18:36:25.244"></status>
</kw>
<msg timestamp="20200110 18:36:25.244" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20200110 18:36:25.244" endtime="20200110 18:36:25.244"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:25.244" endtime="20200110 18:36:25.244"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.244" endtime="20200110 18:36:25.244"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.166" endtime="20200110 18:36:25.244"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtPressExitToCompleteBulkPatching}&quot;" library="BulkPatchingDefinitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20200110 18:36:25.275" level="INFO">${get helptext} = Press Exit to complete bulk patching.</msg>
<status status="PASS" starttime="20200110 18:36:25.260" endtime="20200110 18:36:25.275"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:25.275" endtime="20200110 18:36:25.275"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.275" endtime="20200110 18:36:25.275"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.260" endtime="20200110 18:36:25.275"></status>
</kw>
<kw name="And Plugout Serial HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:36:25.275" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20200110 18:36:25.275" endtime="20200110 18:36:25.275"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:36:25.275" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20200110 18:36:25.275" endtime="20200110 18:36:25.275"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugout HDF Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; ModuleHD &quot;${moduleHD}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:25.291" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:25.291" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:25.291"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:25.291"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:25.291"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:25.291"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:25.291"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:25.291"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:25.291"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:25.307"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:25.307"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:25.307" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:25.307" endtime="20200110 18:36:25.307"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.307" endtime="20200110 18:36:25.307"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.307" endtime="20200110 18:36:25.307"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:25.307"></status>
</kw>
<msg timestamp="20200110 18:36:25.307" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:25.307"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:25.307" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:25.307" endtime="20200110 18:36:25.307"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:25.307" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20200110 18:36:25.307" endtime="20200110 18:36:25.307"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:25.307" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20200110 18:36:25.307" endtime="20200110 18:36:25.307"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:25.322" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 4</msg>
<status status="PASS" starttime="20200110 18:36:25.307" endtime="20200110 18:36:25.322"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:27.323" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:25.322" endtime="20200110 18:36:27.324"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:27.326" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:27.325" endtime="20200110 18:36:27.326"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.307" endtime="20200110 18:36:27.327"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:27.328"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.291" endtime="20200110 18:36:27.328"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugout HDF Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; ModuleHD &quot;${moduleHD}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:27.333" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:27.334" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:27.332" endtime="20200110 18:36:27.334"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:27.336" endtime="20200110 18:36:27.339"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:27.335" endtime="20200110 18:36:27.340"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:27.341" endtime="20200110 18:36:27.344"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:27.340" endtime="20200110 18:36:27.345"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:27.346" endtime="20200110 18:36:27.349"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:27.345" endtime="20200110 18:36:27.349"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:27.351" endtime="20200110 18:36:27.354"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:27.350" endtime="20200110 18:36:27.354"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:27.357" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:27.356" endtime="20200110 18:36:27.357"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:27.355" endtime="20200110 18:36:27.357"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:27.354" endtime="20200110 18:36:27.358"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:27.335" endtime="20200110 18:36:27.358"></status>
</kw>
<msg timestamp="20200110 18:36:27.358" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:27.331" endtime="20200110 18:36:27.359"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:27.359" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:27.359" endtime="20200110 18:36:27.360"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:27.361" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 5</msg>
<status status="PASS" starttime="20200110 18:36:27.360" endtime="20200110 18:36:27.361"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:27.362" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 5</msg>
<status status="PASS" starttime="20200110 18:36:27.361" endtime="20200110 18:36:27.362"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:27.377" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 5</msg>
<status status="PASS" starttime="20200110 18:36:27.363" endtime="20200110 18:36:27.378"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:29.379" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:27.378" endtime="20200110 18:36:29.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:29.382" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:29.381" endtime="20200110 18:36:29.382"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:27.362" endtime="20200110 18:36:29.383"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:27.330" endtime="20200110 18:36:29.384"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:27.329" endtime="20200110 18:36:29.384"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugout HDF Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; ModuleHD &quot;${moduleHD}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:29.389" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:29.390" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:29.388" endtime="20200110 18:36:29.390"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:29.392" endtime="20200110 18:36:29.395"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:29.391" endtime="20200110 18:36:29.396"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:29.397" endtime="20200110 18:36:29.400"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:29.396" endtime="20200110 18:36:29.401"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:29.402" endtime="20200110 18:36:29.405"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:29.401" endtime="20200110 18:36:29.406"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:29.407" endtime="20200110 18:36:29.410"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:29.406" endtime="20200110 18:36:29.411"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:29.416" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:29.415" endtime="20200110 18:36:29.416"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:29.412" endtime="20200110 18:36:29.417"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:29.411" endtime="20200110 18:36:29.417"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:29.391" endtime="20200110 18:36:29.418"></status>
</kw>
<msg timestamp="20200110 18:36:29.419" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:29.387" endtime="20200110 18:36:29.419"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:29.421" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:29.420" endtime="20200110 18:36:29.421"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:29.423" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 6</msg>
<status status="PASS" starttime="20200110 18:36:29.422" endtime="20200110 18:36:29.423"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:29.424" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 6</msg>
<status status="PASS" starttime="20200110 18:36:29.424" endtime="20200110 18:36:29.424"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:29.445" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 6</msg>
<status status="PASS" starttime="20200110 18:36:29.425" endtime="20200110 18:36:29.446"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:31.448" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:29.446" endtime="20200110 18:36:31.449"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:31.451" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:31.450" endtime="20200110 18:36:31.451"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:29.425" endtime="20200110 18:36:31.452"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:29.386" endtime="20200110 18:36:31.453"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:29.385" endtime="20200110 18:36:31.453"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.275" endtime="20200110 18:36:31.454"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:25.275" endtime="20200110 18:36:31.454"></status>
</kw>
<kw name="And Plugout Serial HDF Tip to Rack &quot;1&quot; Panel &quot;4&quot; ModuleHD &quot;1&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:36:31.458" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200110 18:36:31.457" endtime="20200110 18:36:31.458"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:36:31.460" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20200110 18:36:31.459" endtime="20200110 18:36:31.461"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugout HDF Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; ModuleHD &quot;${moduleHD}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:31.465" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:31.465" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:31.465" endtime="20200110 18:36:31.465"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:31.467" endtime="20200110 18:36:31.468"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:31.466" endtime="20200110 18:36:31.469"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:31.469" endtime="20200110 18:36:31.471"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:31.469" endtime="20200110 18:36:31.471"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:31.472" endtime="20200110 18:36:31.474"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:31.471" endtime="20200110 18:36:31.474"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:31.475" endtime="20200110 18:36:31.476"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:31.474" endtime="20200110 18:36:31.477"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:31.479" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:31.479" endtime="20200110 18:36:31.480"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:31.477" endtime="20200110 18:36:31.480"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:31.477" endtime="20200110 18:36:31.480"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:31.466" endtime="20200110 18:36:31.480"></status>
</kw>
<msg timestamp="20200110 18:36:31.481" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:31.464" endtime="20200110 18:36:31.481"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:31.482" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:31.482" endtime="20200110 18:36:31.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:31.483" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20200110 18:36:31.483" endtime="20200110 18:36:31.483"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:31.484" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20200110 18:36:31.484" endtime="20200110 18:36:31.484"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:31.504" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 1</msg>
<status status="PASS" starttime="20200110 18:36:31.485" endtime="20200110 18:36:31.504"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:33.506" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:31.505" endtime="20200110 18:36:33.507"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:33.509" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:33.508" endtime="20200110 18:36:33.510"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:31.485" endtime="20200110 18:36:33.510"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:31.463" endtime="20200110 18:36:33.511"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:31.462" endtime="20200110 18:36:33.511"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugout HDF Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; ModuleHD &quot;${moduleHD}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:33.516" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:33.516" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:33.515" endtime="20200110 18:36:33.517"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:33.519" endtime="20200110 18:36:33.522"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:33.518" endtime="20200110 18:36:33.523"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:33.524" endtime="20200110 18:36:33.527"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:33.523" endtime="20200110 18:36:33.528"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:33.529" endtime="20200110 18:36:33.532"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:33.528" endtime="20200110 18:36:33.532"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:33.534" endtime="20200110 18:36:33.535"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:33.533" endtime="20200110 18:36:33.536"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:33.538" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:33.538" endtime="20200110 18:36:33.539"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:33.536" endtime="20200110 18:36:33.539"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:33.536" endtime="20200110 18:36:33.539"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:33.517" endtime="20200110 18:36:33.539"></status>
</kw>
<msg timestamp="20200110 18:36:33.540" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:33.514" endtime="20200110 18:36:33.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:33.541" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:33.541" endtime="20200110 18:36:33.541"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:33.542" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 2</msg>
<status status="PASS" starttime="20200110 18:36:33.542" endtime="20200110 18:36:33.542"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:33.543" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 2</msg>
<status status="PASS" starttime="20200110 18:36:33.543" endtime="20200110 18:36:33.543"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:33.568" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 2</msg>
<status status="PASS" starttime="20200110 18:36:33.544" endtime="20200110 18:36:33.569"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:35.571" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:33.569" endtime="20200110 18:36:35.572"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:35.574" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:35.573" endtime="20200110 18:36:35.575"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:33.544" endtime="20200110 18:36:35.575"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:33.513" endtime="20200110 18:36:35.576"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:33.512" endtime="20200110 18:36:35.577"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugout HDF Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; ModuleHD &quot;${moduleHD}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get HDF Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${moduleHD}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:35.581" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:35.582" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:35.581" endtime="20200110 18:36:35.582"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:35.584" endtime="20200110 18:36:35.587"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:35.583" endtime="20200110 18:36:35.588"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:35.589" endtime="20200110 18:36:35.593"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:35.588" endtime="20200110 18:36:35.593"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:35.594" endtime="20200110 18:36:35.598"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:35.594" endtime="20200110 18:36:35.598"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:35.599" endtime="20200110 18:36:35.603"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:35.599" endtime="20200110 18:36:35.603"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[HDF]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[moduleHD]]}' == '${input moduleHD}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:35.606" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:35.606" endtime="20200110 18:36:35.607"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:35.604" endtime="20200110 18:36:35.607"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:35.604" endtime="20200110 18:36:35.607"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:35.583" endtime="20200110 18:36:35.607"></status>
</kw>
<msg timestamp="20200110 18:36:35.608" level="INFO">${panel index} = 5</msg>
<status status="PASS" starttime="20200110 18:36:35.579" endtime="20200110 18:36:35.608"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:35.609" level="INFO">5</msg>
<status status="PASS" starttime="20200110 18:36:35.609" endtime="20200110 18:36:35.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:35.610" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 5 --port 3</msg>
<status status="PASS" starttime="20200110 18:36:35.610" endtime="20200110 18:36:35.610"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:35.611" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 3</msg>
<status status="PASS" starttime="20200110 18:36:35.611" endtime="20200110 18:36:35.612"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:35.626" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 5 --port 3</msg>
<status status="PASS" starttime="20200110 18:36:35.612" endtime="20200110 18:36:35.627"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:37.629" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:35.627" endtime="20200110 18:36:37.630"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:37.632" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=5
type=hdf
panel_state=RUN
modulehd=1
orient=beta
serial=27FFFF000001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:37.631" endtime="20200110 18:36:37.633"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:35.612" endtime="20200110 18:36:37.633"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:35.578" endtime="20200110 18:36:37.634"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:35.577" endtime="20200110 18:36:37.634"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:31.461" endtime="20200110 18:36:37.635"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:31.456" endtime="20200110 18:36:37.635"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="GeneralPage" type="teardown">
<kw name="Wait For Page Update" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE UPDATE TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:36:37.740" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20200110 18:36:37.638" endtime="20200110 18:36:37.740"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:37.637" endtime="20200110 18:36:37.741"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200110 18:36:37.774" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20200110 18:36:37.742" endtime="20200110 18:36:37.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:36:37.796" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:36:37.779" endtime="20200110 18:36:37.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:36:37.799" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20200110 18:36:37.799" endtime="20200110 18:36:37.862"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:36:38.865" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:36:37.864" endtime="20200110 18:36:38.865"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:37.863" endtime="20200110 18:36:38.866"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:37.798" endtime="20200110 18:36:38.867"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:37.798" endtime="20200110 18:36:38.867"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:37.797" endtime="20200110 18:36:38.868"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:37.777" endtime="20200110 18:36:38.868"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:36:39.871" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:36:38.870" endtime="20200110 18:36:39.871"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:38.869" endtime="20200110 18:36:39.872"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:37.776" endtime="20200110 18:36:39.873"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:37.775" endtime="20200110 18:36:39.873"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200110 18:36:39.904" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20200110 18:36:39.874" endtime="20200110 18:36:39.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:36:39.934" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:36:39.908" endtime="20200110 18:36:39.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:36:39.941" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200110 18:36:39.939" endtime="20200110 18:36:40.009"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:36:41.014" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:36:40.011" endtime="20200110 18:36:41.015"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:40.010" endtime="20200110 18:36:41.015"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:39.938" endtime="20200110 18:36:41.016"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:39.937" endtime="20200110 18:36:41.016"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:39.936" endtime="20200110 18:36:41.017"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:39.907" endtime="20200110 18:36:41.018"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:36:42.022" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:36:41.021" endtime="20200110 18:36:42.022"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:41.019" endtime="20200110 18:36:42.023"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:39.906" endtime="20200110 18:36:42.024"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:39.905" endtime="20200110 18:36:42.024"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200110 18:36:42.025" endtime="20200110 18:36:44.267"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:37.636" endtime="20200110 18:36:44.267"></status>
</kw>
<status status="PASS" starttime="20200110 18:35:52.356" endtime="20200110 18:36:44.267" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-s1-t5" name="INSERT_END_B_05_09_Verify that imVision X needs to generate beep tone when plugging a connector that is matched to one of unplugged connectors in the End B list if there is a 96LC panel">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSHDefinitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST_A}</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:44.272" endtime="20200110 18:36:44.272"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20200110 18:36:44.272" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20200110 18:36:46.100" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20200110 18:36:44.272" endtime="20200110 18:36:46.100"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:44.272" endtime="20200110 18:36:46.100"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="GeneralPage">
<tags>
<tag>host_A</tag>
<tag>host_B</tag>
</tags>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST A}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20200110 18:36:46.100" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20200110 18:36:46.100" endtime="20200110 18:36:46.100"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200110 18:36:46.100" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20200110 18:36:46.100" endtime="20200110 18:36:49.057"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20200110 18:36:49.058" endtime="20200110 18:36:50.198"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:36:51.204" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:36:50.198" endtime="20200110 18:36:51.204"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="GeneralPage">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200110 18:36:51.235" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20200110 18:36:51.204" endtime="20200110 18:36:51.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:51.235" endtime="20200110 18:36:51.235"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20200110 18:36:51.266" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20200110 18:36:51.235" endtime="20200110 18:36:51.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:51.266" endtime="20200110 18:36:51.266"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200110 18:36:51.282" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20200110 18:36:51.266" endtime="20200110 18:36:51.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:51.282" endtime="20200110 18:36:51.282"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:51.204" endtime="20200110 18:36:51.282"></status>
</kw>
<kw name="Go To Home Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:36:51.298" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:36:51.282" endtime="20200110 18:36:51.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:36:51.298" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200110 18:36:51.298" endtime="20200110 18:36:51.443"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:36:52.460" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:36:51.446" endtime="20200110 18:36:52.460"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:51.444" endtime="20200110 18:36:52.460"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:51.298" endtime="20200110 18:36:52.460"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:51.298" endtime="20200110 18:36:52.460"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:51.298" endtime="20200110 18:36:52.460"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:51.282" endtime="20200110 18:36:52.460"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:51.282" endtime="20200110 18:36:52.460"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:46.100" endtime="20200110 18:36:52.460"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:44.272" endtime="20200110 18:36:52.460"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="HomePage">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20200110 18:36:52.460" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20200110 18:36:52.460" endtime="20200110 18:36:52.559"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:36:53.572" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:36:52.560" endtime="20200110 18:36:53.572"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:52.559" endtime="20200110 18:36:53.572"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:52.460" endtime="20200110 18:36:53.572"></status>
</kw>
<kw name="When Plugin Serial 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:36:53.572" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:53.572"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:36:53.572" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:53.572"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin 24F Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Module &quot;${module}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:53.572" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:53.572" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:53.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:53.572"></status>
</kw>
<msg timestamp="20200110 18:36:53.572" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:53.572"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:53.572"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:53.572"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:53.587"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:53.587"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:53.587" endtime="20200110 18:36:53.587"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.587" endtime="20200110 18:36:53.587"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:53.587" endtime="20200110 18:36:53.587"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.587" endtime="20200110 18:36:53.587"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:53.587" endtime="20200110 18:36:53.587"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.587" endtime="20200110 18:36:53.587"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:53.587" endtime="20200110 18:36:53.587"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.587" endtime="20200110 18:36:53.587"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:53.587" endtime="20200110 18:36:53.603"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.587" endtime="20200110 18:36:53.603"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:53.603" endtime="20200110 18:36:53.603"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.603" endtime="20200110 18:36:53.603"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:53.603" endtime="20200110 18:36:53.603"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.603" endtime="20200110 18:36:53.603"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:53.603" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:53.603" endtime="20200110 18:36:53.603"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.603" endtime="20200110 18:36:53.603"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.603" endtime="20200110 18:36:53.603"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:53.603"></status>
</kw>
<msg timestamp="20200110 18:36:53.603" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:53.603"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:53.603" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:36:53.603" endtime="20200110 18:36:53.603"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:53.619" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 1</msg>
<status status="PASS" starttime="20200110 18:36:53.603" endtime="20200110 18:36:53.619"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:53.619" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 1</msg>
<status status="PASS" starttime="20200110 18:36:53.619" endtime="20200110 18:36:53.619"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:53.697" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 1</msg>
<status status="PASS" starttime="20200110 18:36:53.619" endtime="20200110 18:36:53.697"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:55.708" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:53.697" endtime="20200110 18:36:55.708"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:55.708" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:55.708" endtime="20200110 18:36:55.708"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.619" endtime="20200110 18:36:55.708"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:55.708"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:36:55.708"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin 24F Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Module &quot;${module}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:55.708" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:55.708" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:55.708" endtime="20200110 18:36:55.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:55.708" endtime="20200110 18:36:55.708"></status>
</kw>
<msg timestamp="20200110 18:36:55.708" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:36:55.708" endtime="20200110 18:36:55.708"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:55.708" endtime="20200110 18:36:55.708"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.708" endtime="20200110 18:36:55.708"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:55.724" endtime="20200110 18:36:55.724"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.708" endtime="20200110 18:36:55.724"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:55.724" endtime="20200110 18:36:55.724"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.724" endtime="20200110 18:36:55.724"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:55.724" endtime="20200110 18:36:55.724"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.724" endtime="20200110 18:36:55.724"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:55.724" endtime="20200110 18:36:55.724"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.724" endtime="20200110 18:36:55.724"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:55.724" endtime="20200110 18:36:55.739"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.724" endtime="20200110 18:36:55.739"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:55.739" endtime="20200110 18:36:55.739"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.739" endtime="20200110 18:36:55.739"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:55.739" endtime="20200110 18:36:55.739"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.739" endtime="20200110 18:36:55.739"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:55.739" endtime="20200110 18:36:55.739"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.739" endtime="20200110 18:36:55.739"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:55.739" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:55.739" endtime="20200110 18:36:55.739"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.739" endtime="20200110 18:36:55.739"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.739" endtime="20200110 18:36:55.739"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.708" endtime="20200110 18:36:55.739"></status>
</kw>
<msg timestamp="20200110 18:36:55.755" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:36:55.708" endtime="20200110 18:36:55.755"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:55.755" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:36:55.755" endtime="20200110 18:36:55.755"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:55.755" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 2</msg>
<status status="PASS" starttime="20200110 18:36:55.755" endtime="20200110 18:36:55.755"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:55.755" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 2</msg>
<status status="PASS" starttime="20200110 18:36:55.755" endtime="20200110 18:36:55.755"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:55.849" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 2</msg>
<status status="PASS" starttime="20200110 18:36:55.755" endtime="20200110 18:36:55.849"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:36:57.875" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:55.849" endtime="20200110 18:36:57.875"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:36:57.875" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:57.875" endtime="20200110 18:36:57.875"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.755" endtime="20200110 18:36:57.875"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.708" endtime="20200110 18:36:57.875"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:55.708" endtime="20200110 18:36:57.875"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugin 24F Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Module &quot;${module}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:36:57.875" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:36:57.875" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:36:57.875" endtime="20200110 18:36:57.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:57.875" endtime="20200110 18:36:57.875"></status>
</kw>
<msg timestamp="20200110 18:36:57.875" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:36:57.875" endtime="20200110 18:36:57.875"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:57.891" endtime="20200110 18:36:57.891"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.891" endtime="20200110 18:36:57.891"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:57.891" endtime="20200110 18:36:57.891"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.891" endtime="20200110 18:36:57.891"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:57.891" endtime="20200110 18:36:57.906"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.891" endtime="20200110 18:36:57.906"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:57.906" endtime="20200110 18:36:57.906"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.906" endtime="20200110 18:36:57.906"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:57.906" endtime="20200110 18:36:57.906"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.906" endtime="20200110 18:36:57.906"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:57.922" endtime="20200110 18:36:57.922"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.922" endtime="20200110 18:36:57.922"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:57.922" endtime="20200110 18:36:57.922"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.922" endtime="20200110 18:36:57.922"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:57.922" endtime="20200110 18:36:57.922"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.922" endtime="20200110 18:36:57.922"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:36:57.922" endtime="20200110 18:36:57.922"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.922" endtime="20200110 18:36:57.922"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:36:57.938" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:36:57.938" endtime="20200110 18:36:57.938"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.922" endtime="20200110 18:36:57.938"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.922" endtime="20200110 18:36:57.938"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.875" endtime="20200110 18:36:57.938"></status>
</kw>
<msg timestamp="20200110 18:36:57.938" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:36:57.875" endtime="20200110 18:36:57.938"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:36:57.938" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:36:57.938" endtime="20200110 18:36:57.938"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:36:57.938" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 3</msg>
<status status="PASS" starttime="20200110 18:36:57.938" endtime="20200110 18:36:57.938"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:36:57.938" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 3</msg>
<status status="PASS" starttime="20200110 18:36:57.938" endtime="20200110 18:36:57.938"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:36:58.047" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 3</msg>
<status status="PASS" starttime="20200110 18:36:57.938" endtime="20200110 18:36:58.047"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:00.055" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:36:58.047" endtime="20200110 18:37:00.055"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:00.055" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:00.055" endtime="20200110 18:37:00.055"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.938" endtime="20200110 18:37:00.055"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.875" endtime="20200110 18:37:00.055"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:57.875" endtime="20200110 18:37:00.055"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:37:00.055"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:53.572" endtime="20200110 18:37:00.055"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="BulkPatchingPage">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20200110 18:37:00.055" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20200110 18:37:00.055" endtime="20200110 18:37:00.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:37:00.070" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:37:00.055" endtime="20200110 18:37:00.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:37:00.070" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20200110 18:37:00.070" endtime="20200110 18:37:00.142"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:37:01.145" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:37:00.143" endtime="20200110 18:37:01.145"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:00.142" endtime="20200110 18:37:01.145"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:00.070" endtime="20200110 18:37:01.145"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:00.070" endtime="20200110 18:37:01.145"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:00.070" endtime="20200110 18:37:01.145"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:00.055" endtime="20200110 18:37:01.145"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:00.055" endtime="20200110 18:37:01.145"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:37:02.146" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:37:01.145" endtime="20200110 18:37:02.146"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:01.145" endtime="20200110 18:37:02.146"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:00.055" endtime="20200110 18:37:02.146"></status>
</kw>
<kw name="When Plugin Serial 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:37:02.146" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20200110 18:37:02.146" endtime="20200110 18:37:02.146"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:37:02.146" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20200110 18:37:02.146" endtime="20200110 18:37:02.146"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugin 24F Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Module &quot;${module}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:02.161" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:02.161" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:02.161" endtime="20200110 18:37:02.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:02.161" endtime="20200110 18:37:02.161"></status>
</kw>
<msg timestamp="20200110 18:37:02.161" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:02.161" endtime="20200110 18:37:02.161"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:02.161" endtime="20200110 18:37:02.161"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.161" endtime="20200110 18:37:02.161"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:02.177" endtime="20200110 18:37:02.177"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.161" endtime="20200110 18:37:02.177"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:02.177" endtime="20200110 18:37:02.177"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.177" endtime="20200110 18:37:02.177"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:02.177" endtime="20200110 18:37:02.177"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.177" endtime="20200110 18:37:02.177"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:02.177" endtime="20200110 18:37:02.177"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.177" endtime="20200110 18:37:02.177"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:02.177" endtime="20200110 18:37:02.192"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.177" endtime="20200110 18:37:02.192"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:02.192" endtime="20200110 18:37:02.192"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.192" endtime="20200110 18:37:02.192"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:02.192" endtime="20200110 18:37:02.192"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.192" endtime="20200110 18:37:02.192"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:02.192" endtime="20200110 18:37:02.192"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.192" endtime="20200110 18:37:02.192"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:02.192" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:02.192" endtime="20200110 18:37:02.192"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.192" endtime="20200110 18:37:02.192"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.192" endtime="20200110 18:37:02.192"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.161" endtime="20200110 18:37:02.208"></status>
</kw>
<msg timestamp="20200110 18:37:02.208" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:02.146" endtime="20200110 18:37:02.208"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:02.208" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:02.208" endtime="20200110 18:37:02.208"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:02.208" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 4</msg>
<status status="PASS" starttime="20200110 18:37:02.208" endtime="20200110 18:37:02.208"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:02.208" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 4</msg>
<status status="PASS" starttime="20200110 18:37:02.208" endtime="20200110 18:37:02.208"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:02.270" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 4</msg>
<status status="PASS" starttime="20200110 18:37:02.208" endtime="20200110 18:37:02.270"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:04.275" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:02.270" endtime="20200110 18:37:04.275"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:04.275" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:04.275" endtime="20200110 18:37:04.275"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.208" endtime="20200110 18:37:04.275"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.146" endtime="20200110 18:37:04.275"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.146" endtime="20200110 18:37:04.275"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugin 24F Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Module &quot;${module}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:04.275" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:04.275" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:04.275" endtime="20200110 18:37:04.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:04.275" endtime="20200110 18:37:04.275"></status>
</kw>
<msg timestamp="20200110 18:37:04.275" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:04.275" endtime="20200110 18:37:04.275"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:04.291" endtime="20200110 18:37:04.291"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.291" endtime="20200110 18:37:04.291"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:04.291" endtime="20200110 18:37:04.291"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.291" endtime="20200110 18:37:04.291"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:04.291" endtime="20200110 18:37:04.306"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.291" endtime="20200110 18:37:04.306"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:04.306" endtime="20200110 18:37:04.306"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.306" endtime="20200110 18:37:04.306"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:04.306" endtime="20200110 18:37:04.306"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.306" endtime="20200110 18:37:04.306"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:04.306" endtime="20200110 18:37:04.306"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.306" endtime="20200110 18:37:04.306"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:04.306" endtime="20200110 18:37:04.306"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.306" endtime="20200110 18:37:04.306"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:04.306" endtime="20200110 18:37:04.306"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.306" endtime="20200110 18:37:04.322"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:04.322" endtime="20200110 18:37:04.322"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.322" endtime="20200110 18:37:04.322"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:04.322" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:04.322" endtime="20200110 18:37:04.322"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.322" endtime="20200110 18:37:04.322"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.322" endtime="20200110 18:37:04.322"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.291" endtime="20200110 18:37:04.322"></status>
</kw>
<msg timestamp="20200110 18:37:04.322" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:04.275" endtime="20200110 18:37:04.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:04.322" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:04.322" endtime="20200110 18:37:04.322"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:04.322" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 5</msg>
<status status="PASS" starttime="20200110 18:37:04.322" endtime="20200110 18:37:04.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:04.322" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 5</msg>
<status status="PASS" starttime="20200110 18:37:04.322" endtime="20200110 18:37:04.322"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:04.536" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 5</msg>
<status status="PASS" starttime="20200110 18:37:04.338" endtime="20200110 18:37:04.536"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:06.547" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:04.537" endtime="20200110 18:37:06.547"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:06.547" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:06.547" endtime="20200110 18:37:06.547"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.322" endtime="20200110 18:37:06.547"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.275" endtime="20200110 18:37:06.547"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:04.275" endtime="20200110 18:37:06.547"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugin 24F Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Module &quot;${module}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:06.547" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:06.547" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:06.547" endtime="20200110 18:37:06.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:06.547" endtime="20200110 18:37:06.547"></status>
</kw>
<msg timestamp="20200110 18:37:06.547" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:06.547" endtime="20200110 18:37:06.547"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:06.563" endtime="20200110 18:37:06.563"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.563" endtime="20200110 18:37:06.563"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:06.563" endtime="20200110 18:37:06.563"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.563" endtime="20200110 18:37:06.563"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:06.563" endtime="20200110 18:37:06.579"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.563" endtime="20200110 18:37:06.579"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:06.579" endtime="20200110 18:37:06.579"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.579" endtime="20200110 18:37:06.579"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:06.579" endtime="20200110 18:37:06.579"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.579" endtime="20200110 18:37:06.579"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:06.579" endtime="20200110 18:37:06.594"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.579" endtime="20200110 18:37:06.594"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:06.594" endtime="20200110 18:37:06.594"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.594" endtime="20200110 18:37:06.594"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:06.594" endtime="20200110 18:37:06.594"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.594" endtime="20200110 18:37:06.594"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:06.594" endtime="20200110 18:37:06.594"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.594" endtime="20200110 18:37:06.594"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:06.594" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:06.594" endtime="20200110 18:37:06.594"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.594" endtime="20200110 18:37:06.594"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.594" endtime="20200110 18:37:06.594"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.563" endtime="20200110 18:37:06.594"></status>
</kw>
<msg timestamp="20200110 18:37:06.610" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:06.547" endtime="20200110 18:37:06.610"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:06.610" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:06.610" endtime="20200110 18:37:06.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:06.610" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 6</msg>
<status status="PASS" starttime="20200110 18:37:06.610" endtime="20200110 18:37:06.610"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:06.610" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 6</msg>
<status status="PASS" starttime="20200110 18:37:06.610" endtime="20200110 18:37:06.610"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:06.719" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 6</msg>
<status status="PASS" starttime="20200110 18:37:06.610" endtime="20200110 18:37:06.719"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:08.720" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:06.719" endtime="20200110 18:37:08.720"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:08.720" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:08.720" endtime="20200110 18:37:08.720"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.610" endtime="20200110 18:37:08.720"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.547" endtime="20200110 18:37:08.720"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:06.547" endtime="20200110 18:37:08.720"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.146" endtime="20200110 18:37:08.720"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:02.146" endtime="20200110 18:37:08.720"></status>
</kw>
<kw name="When Plugout 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; Port &quot;5&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:08.720" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:08.720" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:08.720" endtime="20200110 18:37:08.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:08.720" endtime="20200110 18:37:08.720"></status>
</kw>
<msg timestamp="20200110 18:37:08.736" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:08.720" endtime="20200110 18:37:08.736"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:08.736" endtime="20200110 18:37:08.736"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.736" endtime="20200110 18:37:08.736"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:08.736" endtime="20200110 18:37:08.736"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.736" endtime="20200110 18:37:08.736"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:08.736" endtime="20200110 18:37:08.752"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.736" endtime="20200110 18:37:08.752"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:08.752" endtime="20200110 18:37:08.752"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.752" endtime="20200110 18:37:08.752"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:08.752" endtime="20200110 18:37:08.752"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.752" endtime="20200110 18:37:08.752"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:08.752" endtime="20200110 18:37:08.752"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.752" endtime="20200110 18:37:08.752"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:08.752" endtime="20200110 18:37:08.752"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.752" endtime="20200110 18:37:08.752"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:08.752" endtime="20200110 18:37:08.767"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.752" endtime="20200110 18:37:08.767"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:08.767" endtime="20200110 18:37:08.767"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.767" endtime="20200110 18:37:08.767"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:08.767" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:08.767" endtime="20200110 18:37:08.767"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.767" endtime="20200110 18:37:08.767"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.767" endtime="20200110 18:37:08.767"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.736" endtime="20200110 18:37:08.767"></status>
</kw>
<msg timestamp="20200110 18:37:08.767" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:08.720" endtime="20200110 18:37:08.767"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:08.767" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:08.767" endtime="20200110 18:37:08.767"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:08.767" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 5</msg>
<status status="PASS" starttime="20200110 18:37:08.767" endtime="20200110 18:37:08.767"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:08.767" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 5</msg>
<status status="PASS" starttime="20200110 18:37:08.767" endtime="20200110 18:37:08.767"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:08.814" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 5</msg>
<status status="PASS" starttime="20200110 18:37:08.767" endtime="20200110 18:37:08.815"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:10.838" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:08.815" endtime="20200110 18:37:10.838"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:10.838" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:10.838" endtime="20200110 18:37:10.838"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.767" endtime="20200110 18:37:10.838"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:08.720" endtime="20200110 18:37:10.838"></status>
</kw>
<kw name="When Plugout 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; Port &quot;4&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:10.838" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:10.838" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:10.838" endtime="20200110 18:37:10.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:10.838" endtime="20200110 18:37:10.838"></status>
</kw>
<msg timestamp="20200110 18:37:10.838" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:10.838" endtime="20200110 18:37:10.838"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:10.853" endtime="20200110 18:37:10.853"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.853" endtime="20200110 18:37:10.853"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:10.853" endtime="20200110 18:37:10.853"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.853" endtime="20200110 18:37:10.853"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:10.853" endtime="20200110 18:37:10.853"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.853" endtime="20200110 18:37:10.853"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:10.853" endtime="20200110 18:37:10.853"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.853" endtime="20200110 18:37:10.853"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:10.853" endtime="20200110 18:37:10.869"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.853" endtime="20200110 18:37:10.869"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:10.869" endtime="20200110 18:37:10.869"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.869" endtime="20200110 18:37:10.869"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:10.869" endtime="20200110 18:37:10.869"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.869" endtime="20200110 18:37:10.869"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:10.869" endtime="20200110 18:37:10.869"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.869" endtime="20200110 18:37:10.869"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:10.869" endtime="20200110 18:37:10.869"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.869" endtime="20200110 18:37:10.869"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:10.885" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:10.885" endtime="20200110 18:37:10.885"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.885" endtime="20200110 18:37:10.885"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.869" endtime="20200110 18:37:10.885"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.838" endtime="20200110 18:37:10.885"></status>
</kw>
<msg timestamp="20200110 18:37:10.885" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:10.838" endtime="20200110 18:37:10.885"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:10.885" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:10.885" endtime="20200110 18:37:10.885"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:10.885" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 4</msg>
<status status="PASS" starttime="20200110 18:37:10.885" endtime="20200110 18:37:10.885"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:10.885" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 4</msg>
<status status="PASS" starttime="20200110 18:37:10.885" endtime="20200110 18:37:10.885"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:10.978" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 4</msg>
<status status="PASS" starttime="20200110 18:37:10.885" endtime="20200110 18:37:10.978"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:12.983" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:10.978" endtime="20200110 18:37:12.983"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:12.983" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:12.983" endtime="20200110 18:37:12.983"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.885" endtime="20200110 18:37:12.983"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:10.838" endtime="20200110 18:37:12.983"></status>
</kw>
<kw name="When Plugin 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; Port &quot;5&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:12.983" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:12.983" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:12.983" endtime="20200110 18:37:12.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:12.983" endtime="20200110 18:37:12.983"></status>
</kw>
<msg timestamp="20200110 18:37:12.983" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:12.983" endtime="20200110 18:37:12.983"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:12.999" endtime="20200110 18:37:12.999"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:12.983" endtime="20200110 18:37:12.999"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:12.999" endtime="20200110 18:37:12.999"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:12.999" endtime="20200110 18:37:12.999"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:12.999" endtime="20200110 18:37:13.014"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:12.999" endtime="20200110 18:37:13.014"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:13.014" endtime="20200110 18:37:13.014"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:13.014" endtime="20200110 18:37:13.014"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:13.014" endtime="20200110 18:37:13.014"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:13.014" endtime="20200110 18:37:13.014"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:13.014" endtime="20200110 18:37:13.014"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:13.014" endtime="20200110 18:37:13.014"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:13.014" endtime="20200110 18:37:13.014"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:13.014" endtime="20200110 18:37:13.014"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:13.014" endtime="20200110 18:37:13.014"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:13.014" endtime="20200110 18:37:13.014"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:13.030" endtime="20200110 18:37:13.030"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:13.030" endtime="20200110 18:37:13.030"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:13.030" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:13.030" endtime="20200110 18:37:13.030"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:13.030" endtime="20200110 18:37:13.030"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:13.030" endtime="20200110 18:37:13.030"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:12.983" endtime="20200110 18:37:13.030"></status>
</kw>
<msg timestamp="20200110 18:37:13.030" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:12.983" endtime="20200110 18:37:13.030"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:13.030" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:13.030" endtime="20200110 18:37:13.030"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:13.030" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 5</msg>
<status status="PASS" starttime="20200110 18:37:13.030" endtime="20200110 18:37:13.030"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:13.030" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 5</msg>
<status status="PASS" starttime="20200110 18:37:13.030" endtime="20200110 18:37:13.030"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:13.077" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 5</msg>
<status status="PASS" starttime="20200110 18:37:13.046" endtime="20200110 18:37:13.077"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:15.086" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:13.077" endtime="20200110 18:37:15.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:15.086" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:15.086" endtime="20200110 18:37:15.086"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:13.046" endtime="20200110 18:37:15.086"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:12.983" endtime="20200110 18:37:15.086"></status>
</kw>
<kw name="Then Check then see color if Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; Port &quot;5&quot; &quot;appeared&quot; in End &quot;B&quot; color &quot;black&quot;" library="BulkPatchingDefinitions">
<doc>This keyword is used to check the information of 24F panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>4</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.086" endtime="20200110 18:37:15.086"></status>
</kw>
<msg timestamp="20200110 18:37:15.086" level="INFO">${input end position} = 4</msg>
<status status="PASS" starttime="20200110 18:37:15.086" endtime="20200110 18:37:15.086"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20200110 18:37:15.086" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20200110 18:37:15.086" endtime="20200110 18:37:15.086"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20200110 18:37:15.086" level="INFO">${input panel} = -Panel 6</msg>
<status status="PASS" starttime="20200110 18:37:15.086" endtime="20200110 18:37:15.086"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Row</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${input row}</var>
</assign>
<msg timestamp="20200110 18:37:15.102" level="INFO">${input row} = -Row 1</msg>
<status status="PASS" starttime="20200110 18:37:15.086" endtime="20200110 18:37:15.102"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Module</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${input module}</var>
</assign>
<msg timestamp="20200110 18:37:15.102" level="INFO">${input module} = -Module A</msg>
<status status="PASS" starttime="20200110 18:37:15.102" endtime="20200110 18:37:15.102"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20200110 18:37:15.102" level="INFO">${input port} = -Port 5</msg>
<status status="PASS" starttime="20200110 18:37:15.102" endtime="20200110 18:37:15.102"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input row}</arg>
<arg>${input module}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20200110 18:37:15.102" level="INFO">${input port information} = Rack 1-Panel 6-Row 1-Module A-Port 5</msg>
<status status="PASS" starttime="20200110 18:37:15.102" endtime="20200110 18:37:15.102"></status>
</kw>
<kw name="Get Color Code of Port Information" library="BulkPatchingDefinitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20200110 18:37:15.102" level="INFO">${color} = black</msg>
<status status="PASS" starttime="20200110 18:37:15.102" endtime="20200110 18:37:15.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#000;</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.102" endtime="20200110 18:37:15.102"></status>
</kw>
<msg timestamp="20200110 18:37:15.102" level="INFO">${color code} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:37:15.102" endtime="20200110 18:37:15.102"></status>
</kw>
<msg timestamp="20200110 18:37:15.102" level="INFO">${input color} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:37:15.102" endtime="20200110 18:37:15.102"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20200110 18:37:15.102" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20200110 18:37:15.102" endtime="20200110 18:37:15.102"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20200110 18:37:15.102" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[4]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:37:15.102" endtime="20200110 18:37:15.102"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20200110 18:37:15.102" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:37:15.102" endtime="20200110 18:37:15.102"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="BulkPatchingDefinitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:37:15.133" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20200110 18:37:15.102" endtime="20200110 18:37:15.133"></status>
</kw>
<msg timestamp="20200110 18:37:15.133" level="INFO">${number of lines} = 3</msg>
<status status="PASS" starttime="20200110 18:37:15.102" endtime="20200110 18:37:15.133"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:37:15.133" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:37:15.133" endtime="20200110 18:37:15.133"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:37:15.133" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20200110 18:37:15.133" endtime="20200110 18:37:15.133"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:37:15.133" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20200110 18:37:15.133" endtime="20200110 18:37:15.133"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:37:15.133" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[4]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:37:15.133" endtime="20200110 18:37:15.133"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:37:15.133" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[4]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:37:15.133" endtime="20200110 18:37:15.133"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:37:15.149" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:37:15.133" endtime="20200110 18:37:15.149"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.149" endtime="20200110 18:37:15.149"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.133" endtime="20200110 18:37:15.149"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:37:15.149" level="INFO">${index temp} = 2</msg>
<status status="PASS" starttime="20200110 18:37:15.149" endtime="20200110 18:37:15.149"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:37:15.149" level="INFO">${index string} = 2</msg>
<status status="PASS" starttime="20200110 18:37:15.149" endtime="20200110 18:37:15.149"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:37:15.149" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[2]/div[4]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:37:15.149" endtime="20200110 18:37:15.149"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:37:15.149" level="INFO">//ul[@id='bulkPatchList']/li[2]/div[4]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 5')]</msg>
<status status="PASS" starttime="20200110 18:37:15.149" endtime="20200110 18:37:15.164"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:37:15.164" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20200110 18:37:15.164" endtime="20200110 18:37:15.180"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20200110 18:37:15.180" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:15.180" endtime="20200110 18:37:15.180"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.149" endtime="20200110 18:37:15.180"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.133" endtime="20200110 18:37:15.180"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20200110 18:37:15.180" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20200110 18:37:15.180" endtime="20200110 18:37:15.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.180" endtime="20200110 18:37:15.180"></status>
</kw>
<msg timestamp="20200110 18:37:15.180" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20200110 18:37:15.180" endtime="20200110 18:37:15.180"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.180" endtime="20200110 18:37:15.180"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.180" endtime="20200110 18:37:15.180"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.086" endtime="20200110 18:37:15.180"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtRestoreTheUnpluggedEndBPort}&quot;" library="BulkPatchingDefinitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20200110 18:37:15.211" level="INFO">${get helptext} = Restore the unplugged End B ports, or press Delete to reorder the entries.</msg>
<status status="PASS" starttime="20200110 18:37:15.180" endtime="20200110 18:37:15.211"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.211" endtime="20200110 18:37:15.211"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.211" endtime="20200110 18:37:15.211"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.180" endtime="20200110 18:37:15.211"></status>
</kw>
<kw name="When Plugin 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; Port &quot;4&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:15.211" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:15.211" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:15.211" endtime="20200110 18:37:15.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.227"></status>
</kw>
<msg timestamp="20200110 18:37:15.227" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.227"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.227"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.227"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.227"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.227"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.227"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.227"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.227"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.227"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.243"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.243"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.243" endtime="20200110 18:37:15.243"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.243" endtime="20200110 18:37:15.243"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.243" endtime="20200110 18:37:15.243"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.243" endtime="20200110 18:37:15.243"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.243" endtime="20200110 18:37:15.243"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.243" endtime="20200110 18:37:15.243"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:15.243" endtime="20200110 18:37:15.243"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.243" endtime="20200110 18:37:15.243"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:15.258" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:15.258" endtime="20200110 18:37:15.258"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.243" endtime="20200110 18:37:15.258"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.243" endtime="20200110 18:37:15.258"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.227" endtime="20200110 18:37:15.258"></status>
</kw>
<msg timestamp="20200110 18:37:15.258" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:15.211" endtime="20200110 18:37:15.258"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:15.258" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:15.258" endtime="20200110 18:37:15.258"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:15.258" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 4</msg>
<status status="PASS" starttime="20200110 18:37:15.258" endtime="20200110 18:37:15.258"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:15.258" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 4</msg>
<status status="PASS" starttime="20200110 18:37:15.258" endtime="20200110 18:37:15.258"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:15.321" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 10 --module A --port 4</msg>
<status status="PASS" starttime="20200110 18:37:15.258" endtime="20200110 18:37:15.321"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:17.333" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:15.321" endtime="20200110 18:37:17.333"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:17.333" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.333"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.258" endtime="20200110 18:37:17.333"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:15.211" endtime="20200110 18:37:17.333"></status>
</kw>
<kw name="Then Check then see color if Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; Port &quot;4&quot; &quot;appeared&quot; in End &quot;B&quot; color &quot;black&quot;" library="BulkPatchingDefinitions">
<doc>This keyword is used to check the information of 24F panel displaying in either End A or End B on Bulk Patching screen</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${end position}'=='a' or '${end position}'=='A'</arg>
<arg>Set Variable</arg>
<arg>2</arg>
<arg>ELSE IF</arg>
<arg>'${end position}'=='b' or '${end position}'=='B'</arg>
<arg>Set Variable</arg>
<arg>4</arg>
</arguments>
<assign>
<var>${input end position}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>4</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.333"></status>
</kw>
<msg timestamp="20200110 18:37:17.333" level="INFO">${input end position} = 4</msg>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Rack</arg>
<arg>${rackID}</arg>
</arguments>
<assign>
<var>${input rack}</var>
</assign>
<msg timestamp="20200110 18:37:17.333" level="INFO">${input rack} = Rack 1</msg>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Panel</arg>
<arg>${panelID}</arg>
</arguments>
<assign>
<var>${input panel}</var>
</assign>
<msg timestamp="20200110 18:37:17.333" level="INFO">${input panel} = -Panel 6</msg>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Row</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${input row}</var>
</assign>
<msg timestamp="20200110 18:37:17.333" level="INFO">${input row} = -Row 1</msg>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Module</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${input module}</var>
</assign>
<msg timestamp="20200110 18:37:17.333" level="INFO">${input module} = -Module A</msg>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>-Port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${input port}</var>
</assign>
<msg timestamp="20200110 18:37:17.333" level="INFO">${input port} = -Port 4</msg>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${input rack}</arg>
<arg>${input panel}</arg>
<arg>${input row}</arg>
<arg>${input module}</arg>
<arg>${input port}</arg>
</arguments>
<assign>
<var>${input port information}</var>
</assign>
<msg timestamp="20200110 18:37:17.333" level="INFO">${input port information} = Rack 1-Panel 6-Row 1-Module A-Port 4</msg>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.333"></status>
</kw>
<kw name="Get Color Code of Port Information" library="BulkPatchingDefinitions">
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${input color}</var>
</assign>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${color}</arg>
</arguments>
<assign>
<var>${color}</var>
</assign>
<msg timestamp="20200110 18:37:17.333" level="INFO">${color} = black</msg>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.333"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${color}' == 'red'</arg>
<arg>Set Variable</arg>
<arg>color:#F00;</arg>
<arg>ELSE IF</arg>
<arg>'${color}' == 'black'</arg>
<arg>Set Variable</arg>
<arg>color:#000;</arg>
</arguments>
<assign>
<var>${color code}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>color:#000;</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.349"></status>
</kw>
<msg timestamp="20200110 18:37:17.349" level="INFO">${color code} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.349"></status>
</kw>
<msg timestamp="20200110 18:37:17.349" level="INFO">${input color} = color:#000;</msg>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.349"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${dynamic port position}</arg>
<arg>End Position</arg>
<arg>${input end position}</arg>
</arguments>
<assign>
<var>${xPath syntax1}</var>
</assign>
<msg timestamp="20200110 18:37:17.349" level="INFO">${xPath syntax1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4]/p[contains(text(),'Port Information')]</msg>
<status status="PASS" starttime="20200110 18:37:17.349" endtime="20200110 18:37:17.349"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax1}</arg>
<arg>Port Information</arg>
<arg>${input port information}</arg>
</arguments>
<assign>
<var>${xPath syntax2}</var>
</assign>
<msg timestamp="20200110 18:37:17.349" level="INFO">${xPath syntax2} = //ul[@id='bulkPatchList']/li[Line Position]/div[4]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:37:17.349" endtime="20200110 18:37:17.349"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2}</arg>
<arg>Color</arg>
<arg>${input color}</arg>
</arguments>
<assign>
<var>${xPath syntax2.1}</var>
</assign>
<msg timestamp="20200110 18:37:17.349" level="INFO">${xPath syntax2.1} = //ul[@id='bulkPatchList']/li[Line Position]/div[4]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:37:17.349" endtime="20200110 18:37:17.349"></status>
</kw>
<kw name="Number of Lines in Bulk Patching Screen" library="BulkPatchingDefinitions">
<assign>
<var>${number of lines}</var>
</assign>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${number of lines}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:37:17.365" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20200110 18:37:17.349" endtime="20200110 18:37:17.365"></status>
</kw>
<msg timestamp="20200110 18:37:17.365" level="INFO">${number of lines} = 3</msg>
<status status="PASS" starttime="20200110 18:37:17.349" endtime="20200110 18:37:17.365"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:37:17.365" level="INFO">${count} = 0</msg>
<status status="PASS" starttime="20200110 18:37:17.365" endtime="20200110 18:37:17.365"></status>
</kw>
<kw name="${index} IN RANGE [ ${number of lines+1} ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index} + 1</arg>
</arguments>
<assign>
<var>${index temp}</var>
</assign>
<msg timestamp="20200110 18:37:17.365" level="INFO">${index temp} = 1</msg>
<status status="PASS" starttime="20200110 18:37:17.365" endtime="20200110 18:37:17.365"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index+1}</arg>
</arguments>
<assign>
<var>${index string}</var>
</assign>
<msg timestamp="20200110 18:37:17.365" level="INFO">${index string} = 1</msg>
<status status="PASS" starttime="20200110 18:37:17.365" endtime="20200110 18:37:17.365"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${xPath syntax2.1}</arg>
<arg>Line Position</arg>
<arg>${index string}</arg>
</arguments>
<assign>
<var>${xPath syntax3}</var>
</assign>
<msg timestamp="20200110 18:37:17.365" level="INFO">${xPath syntax3} = //ul[@id='bulkPatchList']/li[1]/div[4]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:37:17.365" endtime="20200110 18:37:17.365"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<msg timestamp="20200110 18:37:17.365" level="INFO">//ul[@id='bulkPatchList']/li[1]/div[4]/p[contains(text(),'Rack 1-Panel 6-Row 1-Module A-Port 4')]</msg>
<status status="PASS" starttime="20200110 18:37:17.365" endtime="20200110 18:37:17.365"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${xPath syntax3}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200110 18:37:17.380" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20200110 18:37:17.365" endtime="20200110 18:37:17.380"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${count} == 1</arg>
</arguments>
<msg timestamp="20200110 18:37:17.380" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:17.380" endtime="20200110 18:37:17.380"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.365" endtime="20200110 18:37:17.380"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.365" endtime="20200110 18:37:17.380"></status>
</kw>
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<assign>
<var>${temp status}</var>
</assign>
<msg timestamp="20200110 18:37:17.380" level="INFO">${temp status} = appeared</msg>
<status status="PASS" starttime="20200110 18:37:17.380" endtime="20200110 18:37:17.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp status}' == 'appeared'</arg>
<arg>Set Variable</arg>
<arg>1</arg>
<arg>ELSE IF</arg>
<arg>'${temp status}' == 'disappeared'</arg>
<arg>Set Variable</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${expected value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.380" endtime="20200110 18:37:17.396"></status>
</kw>
<msg timestamp="20200110 18:37:17.396" level="INFO">${expected value} = 1</msg>
<status status="PASS" starttime="20200110 18:37:17.380" endtime="20200110 18:37:17.396"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${count}'</arg>
<arg>'${expected value}'</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.396" endtime="20200110 18:37:17.396"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.396" endtime="20200110 18:37:17.396"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.333" endtime="20200110 18:37:17.396"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtPressExitToCompleteBulkPatching}&quot;" library="BulkPatchingDefinitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20200110 18:37:17.411" level="INFO">${get helptext} = Press Exit to complete bulk patching.</msg>
<status status="PASS" starttime="20200110 18:37:17.396" endtime="20200110 18:37:17.411"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.411" endtime="20200110 18:37:17.411"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.411" endtime="20200110 18:37:17.411"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.396" endtime="20200110 18:37:17.411"></status>
</kw>
<kw name="And Plugout Serial 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:37:17.427" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200110 18:37:17.411" endtime="20200110 18:37:17.427"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:37:17.427" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:17.427"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugout 24F Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Module &quot;${module}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:17.427" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:17.427" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:17.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:17.427"></status>
</kw>
<msg timestamp="20200110 18:37:17.427" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:17.427"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:17.427"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:17.427"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:17.427"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:17.427"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:17.443"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:17.443"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.443" endtime="20200110 18:37:17.443"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.443" endtime="20200110 18:37:17.443"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.443" endtime="20200110 18:37:17.443"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.443" endtime="20200110 18:37:17.443"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.443" endtime="20200110 18:37:17.443"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.443" endtime="20200110 18:37:17.443"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.443" endtime="20200110 18:37:17.443"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.443" endtime="20200110 18:37:17.443"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.443" endtime="20200110 18:37:17.458"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.443" endtime="20200110 18:37:17.458"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:17.458" endtime="20200110 18:37:17.458"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.458" endtime="20200110 18:37:17.458"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:17.458" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:17.458" endtime="20200110 18:37:17.458"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.458" endtime="20200110 18:37:17.458"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.458" endtime="20200110 18:37:17.458"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:17.458"></status>
</kw>
<msg timestamp="20200110 18:37:17.458" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:17.458"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:17.458" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:17.458" endtime="20200110 18:37:17.458"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:17.458" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 1</msg>
<status status="PASS" starttime="20200110 18:37:17.458" endtime="20200110 18:37:17.458"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:17.458" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 1</msg>
<status status="PASS" starttime="20200110 18:37:17.458" endtime="20200110 18:37:17.458"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:17.521" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 1</msg>
<status status="PASS" starttime="20200110 18:37:17.458" endtime="20200110 18:37:17.521"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:19.533" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:17.521" endtime="20200110 18:37:19.533"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:19.533" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:19.533" endtime="20200110 18:37:19.533"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.458" endtime="20200110 18:37:19.533"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:19.533"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:19.533"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugout 24F Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Module &quot;${module}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:19.533" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:19.533" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:19.533" endtime="20200110 18:37:19.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:19.549" endtime="20200110 18:37:19.549"></status>
</kw>
<msg timestamp="20200110 18:37:19.549" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:19.549" endtime="20200110 18:37:19.549"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:19.549" endtime="20200110 18:37:19.549"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.549" endtime="20200110 18:37:19.549"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:19.549" endtime="20200110 18:37:19.549"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.549" endtime="20200110 18:37:19.549"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:19.549" endtime="20200110 18:37:19.564"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.549" endtime="20200110 18:37:19.564"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:19.564" endtime="20200110 18:37:19.564"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.564" endtime="20200110 18:37:19.564"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:19.564" endtime="20200110 18:37:19.564"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.564" endtime="20200110 18:37:19.564"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:19.564" endtime="20200110 18:37:19.564"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.564" endtime="20200110 18:37:19.564"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:19.580" endtime="20200110 18:37:19.580"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.564" endtime="20200110 18:37:19.580"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:19.580" endtime="20200110 18:37:19.580"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.580" endtime="20200110 18:37:19.580"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:19.580" endtime="20200110 18:37:19.580"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.580" endtime="20200110 18:37:19.580"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:19.596" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:19.596" endtime="20200110 18:37:19.596"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.580" endtime="20200110 18:37:19.596"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.580" endtime="20200110 18:37:19.596"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.549" endtime="20200110 18:37:19.596"></status>
</kw>
<msg timestamp="20200110 18:37:19.596" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:19.533" endtime="20200110 18:37:19.596"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:19.596" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:19.596" endtime="20200110 18:37:19.596"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:19.596" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 2</msg>
<status status="PASS" starttime="20200110 18:37:19.596" endtime="20200110 18:37:19.596"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:19.596" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 2</msg>
<status status="PASS" starttime="20200110 18:37:19.596" endtime="20200110 18:37:19.596"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:19.706" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 2</msg>
<status status="PASS" starttime="20200110 18:37:19.596" endtime="20200110 18:37:19.707"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:21.712" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:19.708" endtime="20200110 18:37:21.712"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:21.712" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:21.712" endtime="20200110 18:37:21.712"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.596" endtime="20200110 18:37:21.712"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.533" endtime="20200110 18:37:21.712"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:19.533" endtime="20200110 18:37:21.712"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugout 24F Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Module &quot;${module}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:21.712" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:21.712" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:21.712" endtime="20200110 18:37:21.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:21.712" endtime="20200110 18:37:21.712"></status>
</kw>
<msg timestamp="20200110 18:37:21.728" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:21.712" endtime="20200110 18:37:21.728"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:21.728" endtime="20200110 18:37:21.728"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.728" endtime="20200110 18:37:21.728"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:21.728" endtime="20200110 18:37:21.728"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.728" endtime="20200110 18:37:21.728"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:21.728" endtime="20200110 18:37:21.744"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.728" endtime="20200110 18:37:21.744"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:21.744" endtime="20200110 18:37:21.744"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.744" endtime="20200110 18:37:21.744"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:21.744" endtime="20200110 18:37:21.744"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.744" endtime="20200110 18:37:21.744"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:21.744" endtime="20200110 18:37:21.744"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.744" endtime="20200110 18:37:21.744"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:21.744" endtime="20200110 18:37:21.744"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.744" endtime="20200110 18:37:21.744"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:21.744" endtime="20200110 18:37:21.759"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.744" endtime="20200110 18:37:21.759"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:21.759" endtime="20200110 18:37:21.759"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.759" endtime="20200110 18:37:21.759"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:21.759" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:21.759" endtime="20200110 18:37:21.759"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.759" endtime="20200110 18:37:21.759"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.759" endtime="20200110 18:37:21.759"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.728" endtime="20200110 18:37:21.759"></status>
</kw>
<msg timestamp="20200110 18:37:21.759" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:21.712" endtime="20200110 18:37:21.759"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:21.759" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:21.759" endtime="20200110 18:37:21.759"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:21.759" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 3</msg>
<status status="PASS" starttime="20200110 18:37:21.759" endtime="20200110 18:37:21.759"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:21.759" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 3</msg>
<status status="PASS" starttime="20200110 18:37:21.759" endtime="20200110 18:37:21.759"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:21.853" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 3</msg>
<status status="PASS" starttime="20200110 18:37:21.759" endtime="20200110 18:37:21.853"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:23.863" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:21.853" endtime="20200110 18:37:23.863"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:23.863" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:23.863" endtime="20200110 18:37:23.863"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.759" endtime="20200110 18:37:23.863"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.712" endtime="20200110 18:37:23.863"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:21.712" endtime="20200110 18:37:23.863"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.427" endtime="20200110 18:37:23.863"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:17.411" endtime="20200110 18:37:23.863"></status>
</kw>
<kw name="And Plugout Serial 24F Tip to Rack &quot;1&quot; Panel &quot;6&quot; Row &quot;1&quot; Module &quot;A&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200110 18:37:23.863" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20200110 18:37:23.863" endtime="20200110 18:37:23.863"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200110 18:37:23.863" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20200110 18:37:23.863" endtime="20200110 18:37:23.863"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugout 24F Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Module &quot;${module}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:23.879" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:23.879" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:23.879" endtime="20200110 18:37:23.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:23.879" endtime="20200110 18:37:23.879"></status>
</kw>
<msg timestamp="20200110 18:37:23.879" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:23.879" endtime="20200110 18:37:23.879"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:23.894" endtime="20200110 18:37:23.894"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.894" endtime="20200110 18:37:23.894"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:23.894" endtime="20200110 18:37:23.894"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.894" endtime="20200110 18:37:23.894"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:23.894" endtime="20200110 18:37:23.894"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.894" endtime="20200110 18:37:23.894"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:23.910" endtime="20200110 18:37:23.910"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.894" endtime="20200110 18:37:23.910"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:23.910" endtime="20200110 18:37:23.910"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.910" endtime="20200110 18:37:23.910"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:23.910" endtime="20200110 18:37:23.910"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.910" endtime="20200110 18:37:23.910"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:23.910" endtime="20200110 18:37:23.910"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.910" endtime="20200110 18:37:23.910"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:23.925" endtime="20200110 18:37:23.925"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.910" endtime="20200110 18:37:23.925"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:23.925" endtime="20200110 18:37:23.925"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.925" endtime="20200110 18:37:23.925"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:23.925" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:23.925" endtime="20200110 18:37:23.925"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.925" endtime="20200110 18:37:23.925"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.925" endtime="20200110 18:37:23.925"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.879" endtime="20200110 18:37:23.925"></status>
</kw>
<msg timestamp="20200110 18:37:23.925" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:23.879" endtime="20200110 18:37:23.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:23.925" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:23.925" endtime="20200110 18:37:23.925"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:23.925" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 4</msg>
<status status="PASS" starttime="20200110 18:37:23.925" endtime="20200110 18:37:23.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:23.925" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 4</msg>
<status status="PASS" starttime="20200110 18:37:23.925" endtime="20200110 18:37:23.925"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:24.019" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 4</msg>
<status status="PASS" starttime="20200110 18:37:23.941" endtime="20200110 18:37:24.019"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:26.030" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:24.019" endtime="20200110 18:37:26.030"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:26.030" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:26.030" endtime="20200110 18:37:26.030"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.941" endtime="20200110 18:37:26.030"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.879" endtime="20200110 18:37:26.030"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.879" endtime="20200110 18:37:26.030"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugout 24F Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Module &quot;${module}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:26.030" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:26.030" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:26.030" endtime="20200110 18:37:26.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:26.030" endtime="20200110 18:37:26.030"></status>
</kw>
<msg timestamp="20200110 18:37:26.030" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:26.030" endtime="20200110 18:37:26.046"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:26.046" endtime="20200110 18:37:26.046"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.046" endtime="20200110 18:37:26.046"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:26.046" endtime="20200110 18:37:26.046"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.046" endtime="20200110 18:37:26.046"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:26.046" endtime="20200110 18:37:26.061"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.046" endtime="20200110 18:37:26.061"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:26.061" endtime="20200110 18:37:26.061"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.061" endtime="20200110 18:37:26.061"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:26.061" endtime="20200110 18:37:26.061"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.061" endtime="20200110 18:37:26.061"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:26.061" endtime="20200110 18:37:26.061"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.061" endtime="20200110 18:37:26.061"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:26.061" endtime="20200110 18:37:26.061"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.061" endtime="20200110 18:37:26.061"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:26.061" endtime="20200110 18:37:26.077"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.061" endtime="20200110 18:37:26.077"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:26.077" endtime="20200110 18:37:26.077"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.077" endtime="20200110 18:37:26.077"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:26.077" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:26.077" endtime="20200110 18:37:26.077"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.077" endtime="20200110 18:37:26.077"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.077" endtime="20200110 18:37:26.077"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.046" endtime="20200110 18:37:26.077"></status>
</kw>
<msg timestamp="20200110 18:37:26.077" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:26.030" endtime="20200110 18:37:26.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:26.077" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:26.077" endtime="20200110 18:37:26.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:26.077" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 5</msg>
<status status="PASS" starttime="20200110 18:37:26.077" endtime="20200110 18:37:26.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:26.077" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 5</msg>
<status status="PASS" starttime="20200110 18:37:26.077" endtime="20200110 18:37:26.077"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:26.171" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 5</msg>
<status status="PASS" starttime="20200110 18:37:26.077" endtime="20200110 18:37:26.171"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:28.180" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:26.171" endtime="20200110 18:37:28.180"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:28.180" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:28.180" endtime="20200110 18:37:28.180"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.077" endtime="20200110 18:37:28.180"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.030" endtime="20200110 18:37:28.180"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:26.030" endtime="20200110 18:37:28.180"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugout 24F Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Module &quot;${module}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get 24F Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
<arg>${module}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200110 18:37:28.180" level="INFO">Length is 12</msg>
<msg timestamp="20200110 18:37:28.180" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200110 18:37:28.180" endtime="20200110 18:37:28.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${input module}' == 'A' or '${input module}' == 'a' or '${input module}' == 'B' or '${input module}' == 'b'</arg>
<arg>Set Variable</arg>
<arg>AB</arg>
<arg>ELSE IF</arg>
<arg>'${input module}' == 'C' or '${input module}' == 'c' or '${input module}' == 'D' or '${input module}' == 'd'</arg>
<arg>Set Variable</arg>
<arg>CD</arg>
</arguments>
<assign>
<var>${temp module}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>AB</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:28.180" endtime="20200110 18:37:28.180"></status>
</kw>
<msg timestamp="20200110 18:37:28.180" level="INFO">${temp module} = AB</msg>
<status status="PASS" starttime="20200110 18:37:28.180" endtime="20200110 18:37:28.180"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:28.195" endtime="20200110 18:37:28.195"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.195" endtime="20200110 18:37:28.195"></status>
</kw>
<kw name="${panel index} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:28.195" endtime="20200110 18:37:28.195"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.195" endtime="20200110 18:37:28.195"></status>
</kw>
<kw name="${panel index} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:28.195" endtime="20200110 18:37:28.195"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.195" endtime="20200110 18:37:28.195"></status>
</kw>
<kw name="${panel index} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:28.195" endtime="20200110 18:37:28.195"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.195" endtime="20200110 18:37:28.195"></status>
</kw>
<kw name="${panel index} = 4" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:28.211" endtime="20200110 18:37:28.211"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.195" endtime="20200110 18:37:28.211"></status>
</kw>
<kw name="${panel index} = 5" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:28.211" endtime="20200110 18:37:28.211"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.211" endtime="20200110 18:37:28.211"></status>
</kw>
<kw name="${panel index} = 6" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:28.211" endtime="20200110 18:37:28.211"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.211" endtime="20200110 18:37:28.211"></status>
</kw>
<kw name="${panel index} = 7" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:28.211" endtime="20200110 18:37:28.211"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.211" endtime="20200110 18:37:28.211"></status>
</kw>
<kw name="${panel index} = 8" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<status status="PASS" starttime="20200110 18:37:28.211" endtime="20200110 18:37:28.226"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.211" endtime="20200110 18:37:28.226"></status>
</kw>
<kw name="${panel index} = 9" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[24F]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[module]]}' == '${temp module}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200110 18:37:28.226" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200110 18:37:28.226" endtime="20200110 18:37:28.226"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.226" endtime="20200110 18:37:28.226"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.226" endtime="20200110 18:37:28.226"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.195" endtime="20200110 18:37:28.226"></status>
</kw>
<msg timestamp="20200110 18:37:28.226" level="INFO">${panel index} = 10</msg>
<status status="PASS" starttime="20200110 18:37:28.180" endtime="20200110 18:37:28.226"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200110 18:37:28.226" level="INFO">10</msg>
<status status="PASS" starttime="20200110 18:37:28.226" endtime="20200110 18:37:28.226"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--module</arg>
<arg>${module}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200110 18:37:28.226" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 6</msg>
<status status="PASS" starttime="20200110 18:37:28.226" endtime="20200110 18:37:28.226"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200110 18:37:28.226" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 6</msg>
<status status="PASS" starttime="20200110 18:37:28.226" endtime="20200110 18:37:28.226"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200110 18:37:28.305" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 10 --module A --port 6</msg>
<status status="PASS" starttime="20200110 18:37:28.226" endtime="20200110 18:37:28.305"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200110 18:37:30.312" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:28.305" endtime="20200110 18:37:30.312"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200110 18:37:30.312" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=10
type=96lc
panel_state=RUN
modulekit=AB
serial=36FFFF200001
count=11
# </msg>
<status status="PASS" starttime="20200110 18:37:30.312" endtime="20200110 18:37:30.312"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.226" endtime="20200110 18:37:30.312"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.180" endtime="20200110 18:37:30.312"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:28.180" endtime="20200110 18:37:30.312"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.863" endtime="20200110 18:37:30.312"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:23.863" endtime="20200110 18:37:30.312"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="GeneralPage" type="teardown">
<kw name="Wait For Page Update" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE UPDATE TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:37:30.421" level="INFO">Slept 100 milliseconds</msg>
<status status="PASS" starttime="20200110 18:37:30.312" endtime="20200110 18:37:30.421"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:30.312" endtime="20200110 18:37:30.421"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200110 18:37:30.453" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20200110 18:37:30.421" endtime="20200110 18:37:30.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:37:30.468" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:37:30.453" endtime="20200110 18:37:30.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:37:30.468" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20200110 18:37:30.468" endtime="20200110 18:37:30.542"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:37:31.544" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:37:30.544" endtime="20200110 18:37:31.544"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:30.543" endtime="20200110 18:37:31.545"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:30.468" endtime="20200110 18:37:31.546"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:30.468" endtime="20200110 18:37:31.546"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:30.468" endtime="20200110 18:37:31.547"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:30.453" endtime="20200110 18:37:31.547"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:37:32.551" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:37:31.549" endtime="20200110 18:37:32.551"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:31.548" endtime="20200110 18:37:32.552"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:30.453" endtime="20200110 18:37:32.552"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:30.453" endtime="20200110 18:37:32.553"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200110 18:37:32.566" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20200110 18:37:32.553" endtime="20200110 18:37:32.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200110 18:37:32.583" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200110 18:37:32.569" endtime="20200110 18:37:32.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200110 18:37:32.587" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200110 18:37:32.586" endtime="20200110 18:37:32.634"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:37:33.637" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:37:32.635" endtime="20200110 18:37:33.637"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:32.634" endtime="20200110 18:37:33.638"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:32.586" endtime="20200110 18:37:33.639"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:32.585" endtime="20200110 18:37:33.639"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:32.584" endtime="20200110 18:37:33.640"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:32.569" endtime="20200110 18:37:33.640"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200110 18:37:34.644" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200110 18:37:33.643" endtime="20200110 18:37:34.644"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:33.641" endtime="20200110 18:37:34.645"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:32.568" endtime="20200110 18:37:34.646"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:32.567" endtime="20200110 18:37:34.646"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200110 18:37:34.647" endtime="20200110 18:37:36.879"></status>
</kw>
<status status="PASS" starttime="20200110 18:37:30.312" endtime="20200110 18:37:36.879"></status>
</kw>
<status status="PASS" starttime="20200110 18:36:44.271" endtime="20200110 18:37:36.879" critical="yes"></status>
</test>
<status status="PASS" starttime="20200110 18:33:16.997" endtime="20200110 18:37:36.884"></status>
</suite>
<status status="PASS" starttime="20200110 18:33:16.997" endtime="20200110 18:37:36.885"></status>
</suite>
<status status="PASS" starttime="20200110 18:33:16.982" endtime="20200110 18:37:36.901"></status>
</suite>
<status status="PASS" starttime="20200110 18:33:16.982" endtime="20200110 18:37:36.901"></status>
</suite>
<status status="PASS" starttime="20200110 18:33:16.982" endtime="20200110 18:37:36.916"></status>
</suite>
<status status="PASS" starttime="20200110 18:33:16.950" endtime="20200110 18:37:36.916"></status>
</suite>
<statistics>
<total>
<stat pass="5" fail="0">Critical Tests</stat>
<stat pass="5" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="5" fail="0" id="s1-s1" name="BulkPatching Robot">BulkPatching Robot.BulkPatching Robot</stat>
<stat pass="5" fail="0" id="s1-s1-s1" name="Test Resources">BulkPatching Robot.BulkPatching Robot.Test Resources</stat>
<stat pass="5" fail="0" id="s1-s1-s1-s1" name="Test Suites">BulkPatching Robot.BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="5" fail="0" id="s1-s1-s1-s1-s1" name="3.Insert All End Bs">BulkPatching Robot.BulkPatching Robot.Test Resources.Test Suites.3.Insert All End Bs</stat>
<stat pass="5" fail="0" id="s1-s1-s1-s1-s1-s1" name="3.5.CheckEndBWhenPluggingCorrectTipInTheMiddleOfListOfEndBThenReplug">BulkPatching Robot.BulkPatching Robot.Test Resources.Test Suites.3.Insert All End Bs.3.5.CheckEndBWhenPluggingCorrectTipInTheMiddleOfListOfEndBThenReplug</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
