<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20200107 17:45:18.234" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="C:\Users\quocanh.ho\git\BulkPatching_Robot">
<suite id="s1-s1" name="BulkPatching Robot" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1-s1" name="Test Resources" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot\Test_Resources">
<suite id="s1-s1-s1-s1" name="Test Suites" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot\Test_Resources\Test_Suites">
<suite id="s1-s1-s1-s1-s1" name="3.Insert All End Bs" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot\Test_Resources\Test_Suites\3.Insert_All_End_Bs">
<suite id="s1-s1-s1-s1-s1-s1" name="3.1.CheckBulkPatchingScreenWhenSelectingTabEndB" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot\Test_Resources\Test_Suites\3.Insert_All_End_Bs\3.1.CheckBulkPatchingScreenWhenSelectingTabEndB.robot">
<test id="s1-s1-s1-s1-s1-s1-t1" name="INSERT_END_B_01_01_01_Verify that The bulking patching screen will move to the other end by selecting End B button in any imVision X in the zone and observing all ImVisionX Displays">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSHDefinitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST_A}</arg>
</arguments>
<status status="PASS" starttime="20200107 17:45:18.799" endtime="20200107 17:45:18.799"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20200107 17:45:18.799" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20200107 17:45:20.189" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20200107 17:45:18.799" endtime="20200107 17:45:20.189"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:18.799" endtime="20200107 17:45:20.189"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="GeneralPage">
<tags>
<tag>host_A</tag>
<tag>host_B</tag>
</tags>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST A}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20200107 17:45:20.189" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20200107 17:45:20.189" endtime="20200107 17:45:20.189"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200107 17:45:20.189" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20200107 17:45:20.189" endtime="20200107 17:45:23.690"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20200107 17:45:23.691" endtime="20200107 17:45:24.824"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:45:25.824" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:24.824" endtime="20200107 17:45:25.824"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="GeneralPage">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200107 17:45:25.856" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20200107 17:45:25.824" endtime="20200107 17:45:25.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200107 17:45:25.856" endtime="20200107 17:45:25.856"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20200107 17:45:25.887" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20200107 17:45:25.856" endtime="20200107 17:45:25.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200107 17:45:25.887" endtime="20200107 17:45:25.887"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200107 17:45:25.918" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20200107 17:45:25.887" endtime="20200107 17:45:25.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20200107 17:45:25.918" endtime="20200107 17:45:25.918"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:25.824" endtime="20200107 17:45:25.918"></status>
</kw>
<kw name="Go To Home Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200107 17:45:25.949" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200107 17:45:25.934" endtime="20200107 17:45:25.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200107 17:45:25.949" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200107 17:45:25.949" endtime="20200107 17:45:26.084"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:45:27.089" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:26.087" endtime="20200107 17:45:27.089"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:26.085" endtime="20200107 17:45:27.090"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:25.949" endtime="20200107 17:45:27.090"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:25.949" endtime="20200107 17:45:27.091"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:25.949" endtime="20200107 17:45:27.091"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:25.918" endtime="20200107 17:45:27.091"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:25.918" endtime="20200107 17:45:27.092"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:20.189" endtime="20200107 17:45:27.092"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:18.799" endtime="20200107 17:45:27.093"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="HomePage">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20200107 17:45:27.096" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20200107 17:45:27.095" endtime="20200107 17:45:27.170"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:45:28.181" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:27.171" endtime="20200107 17:45:28.181"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:27.170" endtime="20200107 17:45:28.181"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:27.094" endtime="20200107 17:45:28.181"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;2&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200107 17:45:28.181" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200107 17:45:28.181" endtime="20200107 17:45:28.181"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200107 17:45:28.181" level="INFO">${to port} = 2</msg>
<status status="PASS" starttime="20200107 17:45:28.181" endtime="20200107 17:45:28.181"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200107 17:45:28.181" level="INFO">Length is 12</msg>
<msg timestamp="20200107 17:45:28.181" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200107 17:45:28.181" endtime="20200107 17:45:28.181"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200107 17:45:28.197" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200107 17:45:28.197" endtime="20200107 17:45:28.197"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:28.197" endtime="20200107 17:45:28.197"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:28.197" endtime="20200107 17:45:28.197"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:28.181" endtime="20200107 17:45:28.197"></status>
</kw>
<msg timestamp="20200107 17:45:28.197" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200107 17:45:28.181" endtime="20200107 17:45:28.197"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200107 17:45:28.197" level="INFO">1</msg>
<status status="PASS" starttime="20200107 17:45:28.197" endtime="20200107 17:45:28.197"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200107 17:45:28.197" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:45:28.197" endtime="20200107 17:45:28.197"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200107 17:45:28.197" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:45:28.197" endtime="20200107 17:45:28.197"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200107 17:45:28.289" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:45:28.213" endtime="20200107 17:45:28.289"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200107 17:45:30.293" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:45:28.290" endtime="20200107 17:45:30.294"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200107 17:45:30.296" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:45:30.295" endtime="20200107 17:45:30.297"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:28.197" endtime="20200107 17:45:30.297"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:28.181" endtime="20200107 17:45:30.298"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:28.181" endtime="20200107 17:45:30.299"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200107 17:45:30.302" level="INFO">Length is 12</msg>
<msg timestamp="20200107 17:45:30.303" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200107 17:45:30.302" endtime="20200107 17:45:30.303"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200107 17:45:30.308" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200107 17:45:30.307" endtime="20200107 17:45:30.308"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:30.304" endtime="20200107 17:45:30.308"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:30.304" endtime="20200107 17:45:30.308"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:30.303" endtime="20200107 17:45:30.309"></status>
</kw>
<msg timestamp="20200107 17:45:30.310" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200107 17:45:30.301" endtime="20200107 17:45:30.310"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200107 17:45:30.311" level="INFO">1</msg>
<status status="PASS" starttime="20200107 17:45:30.311" endtime="20200107 17:45:30.311"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200107 17:45:30.313" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:45:30.312" endtime="20200107 17:45:30.314"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200107 17:45:30.316" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:45:30.315" endtime="20200107 17:45:30.316"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200107 17:45:30.397" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:45:30.319" endtime="20200107 17:45:30.398"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200107 17:45:32.406" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:45:30.398" endtime="20200107 17:45:32.406"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200107 17:45:32.406" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:45:32.406" endtime="20200107 17:45:32.406"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:30.317" endtime="20200107 17:45:32.406"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:30.300" endtime="20200107 17:45:32.406"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:30.299" endtime="20200107 17:45:32.406"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:28.181" endtime="20200107 17:45:32.406"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:28.181" endtime="20200107 17:45:32.406"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="BulkPatchingPage">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20200107 17:45:32.406" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20200107 17:45:32.406" endtime="20200107 17:45:32.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200107 17:45:32.422" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200107 17:45:32.406" endtime="20200107 17:45:32.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200107 17:45:32.438" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20200107 17:45:32.438" endtime="20200107 17:45:32.499"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:45:33.515" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:32.500" endtime="20200107 17:45:33.515"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:32.500" endtime="20200107 17:45:33.515"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:32.438" endtime="20200107 17:45:33.515"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:32.438" endtime="20200107 17:45:33.515"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:32.438" endtime="20200107 17:45:33.515"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:32.406" endtime="20200107 17:45:33.515"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:32.406" endtime="20200107 17:45:33.515"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:45:34.515" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:33.515" endtime="20200107 17:45:34.515"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:33.515" endtime="20200107 17:45:34.515"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:32.406" endtime="20200107 17:45:34.515"></status>
</kw>
<kw name="Then The Header of End B Is &quot;active&quot;" library="BulkPatchingDefinitions">
<kw name="Get Status of Tab End B" library="BulkPatchingDefinitions">
<assign>
<var>${get status}</var>
</assign>
<kw name="Get Element Attribute" library="SeleniumLibrary">
<doc>Returns the value of ``attribute`` from the element ``locator``.</doc>
<arguments>
<arg>${tabEndB}</arg>
<arg>style</arg>
</arguments>
<assign>
<var>${output status}</var>
</assign>
<msg timestamp="20200107 17:45:34.531" level="INFO">${output status} = background: black;</msg>
<status status="PASS" starttime="20200107 17:45:34.515" endtime="20200107 17:45:34.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${output status}' == '${attribute tab active}'</arg>
<arg>Set Variable</arg>
<arg>"active"</arg>
<arg>ELSE IF</arg>
<arg>'${output status}' == '${attribute tab inactive}'</arg>
<arg>Set Variable</arg>
<arg>"inactive"</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"active"</arg>
</arguments>
<status status="PASS" starttime="20200107 17:45:34.531" endtime="20200107 17:45:34.531"></status>
</kw>
<msg timestamp="20200107 17:45:34.531" level="INFO">${status} = "active"</msg>
<status status="PASS" starttime="20200107 17:45:34.531" endtime="20200107 17:45:34.531"></status>
</kw>
<msg timestamp="20200107 17:45:34.531" level="INFO">${get status} = "active"</msg>
<status status="PASS" starttime="20200107 17:45:34.515" endtime="20200107 17:45:34.531"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>"${status}"</arg>
<arg>${get status}</arg>
<arg>msg="Status of End B is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>"${status}"</arg>
<arg>${get status}</arg>
<arg>msg="Status of End B is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200107 17:45:34.531" endtime="20200107 17:45:34.531"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:34.531" endtime="20200107 17:45:34.547"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:34.515" endtime="20200107 17:45:34.547"></status>
</kw>
<kw name="And Plugout Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;2&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200107 17:45:34.547" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200107 17:45:34.547" endtime="20200107 17:45:34.547"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200107 17:45:34.547" level="INFO">${to port} = 2</msg>
<status status="PASS" starttime="20200107 17:45:34.547" endtime="20200107 17:45:34.547"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200107 17:45:34.547" level="INFO">Length is 12</msg>
<msg timestamp="20200107 17:45:34.547" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200107 17:45:34.547" endtime="20200107 17:45:34.547"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200107 17:45:34.547" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200107 17:45:34.547" endtime="20200107 17:45:34.547"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:34.547" endtime="20200107 17:45:34.547"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:34.547" endtime="20200107 17:45:34.547"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:34.547" endtime="20200107 17:45:34.547"></status>
</kw>
<msg timestamp="20200107 17:45:34.562" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200107 17:45:34.547" endtime="20200107 17:45:34.562"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200107 17:45:34.562" level="INFO">1</msg>
<status status="PASS" starttime="20200107 17:45:34.562" endtime="20200107 17:45:34.562"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200107 17:45:34.562" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:45:34.562" endtime="20200107 17:45:34.562"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200107 17:45:34.562" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:45:34.562" endtime="20200107 17:45:34.562"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200107 17:45:34.640" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:45:34.562" endtime="20200107 17:45:34.640"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200107 17:45:36.661" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:45:34.640" endtime="20200107 17:45:36.661"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200107 17:45:36.661" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:45:36.661" endtime="20200107 17:45:36.661"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:34.562" endtime="20200107 17:45:36.661"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:34.547" endtime="20200107 17:45:36.661"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:34.547" endtime="20200107 17:45:36.661"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200107 17:45:36.661" level="INFO">Length is 12</msg>
<msg timestamp="20200107 17:45:36.661" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200107 17:45:36.661" endtime="20200107 17:45:36.661"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200107 17:45:36.661" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200107 17:45:36.661" endtime="20200107 17:45:36.661"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:36.661" endtime="20200107 17:45:36.661"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:36.661" endtime="20200107 17:45:36.661"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:36.661" endtime="20200107 17:45:36.661"></status>
</kw>
<msg timestamp="20200107 17:45:36.661" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200107 17:45:36.661" endtime="20200107 17:45:36.661"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200107 17:45:36.677" level="INFO">1</msg>
<status status="PASS" starttime="20200107 17:45:36.677" endtime="20200107 17:45:36.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200107 17:45:36.677" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:45:36.677" endtime="20200107 17:45:36.677"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200107 17:45:36.677" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:45:36.677" endtime="20200107 17:45:36.677"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200107 17:45:36.767" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:45:36.677" endtime="20200107 17:45:36.768"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200107 17:45:38.770" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:45:36.768" endtime="20200107 17:45:38.770"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200107 17:45:38.772" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:45:38.771" endtime="20200107 17:45:38.772"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:36.677" endtime="20200107 17:45:38.773"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:36.661" endtime="20200107 17:45:38.773"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:36.661" endtime="20200107 17:45:38.774"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:34.547" endtime="20200107 17:45:38.774"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:34.547" endtime="20200107 17:45:38.774"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="GeneralPage" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200107 17:45:38.793" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20200107 17:45:38.776" endtime="20200107 17:45:38.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200107 17:45:38.808" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200107 17:45:38.796" endtime="20200107 17:45:38.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200107 17:45:38.812" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20200107 17:45:38.812" endtime="20200107 17:45:38.878"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:45:39.881" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:38.880" endtime="20200107 17:45:39.881"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:38.879" endtime="20200107 17:45:39.882"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:38.811" endtime="20200107 17:45:39.882"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:38.810" endtime="20200107 17:45:39.883"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:38.809" endtime="20200107 17:45:39.883"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:38.795" endtime="20200107 17:45:39.884"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:45:40.888" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:39.886" endtime="20200107 17:45:40.888"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:39.885" endtime="20200107 17:45:40.889"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:38.795" endtime="20200107 17:45:40.889"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:38.794" endtime="20200107 17:45:40.890"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200107 17:45:40.907" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20200107 17:45:40.890" endtime="20200107 17:45:40.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200107 17:45:40.926" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200107 17:45:40.910" endtime="20200107 17:45:40.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200107 17:45:40.930" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200107 17:45:40.930" endtime="20200107 17:45:40.992"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:45:41.995" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:40.994" endtime="20200107 17:45:41.995"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:40.993" endtime="20200107 17:45:41.996"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:40.929" endtime="20200107 17:45:41.997"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:40.928" endtime="20200107 17:45:41.997"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:40.927" endtime="20200107 17:45:41.998"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:40.909" endtime="20200107 17:45:41.998"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:45:43.002" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:42.000" endtime="20200107 17:45:43.002"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:41.999" endtime="20200107 17:45:43.003"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:40.909" endtime="20200107 17:45:43.004"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:40.908" endtime="20200107 17:45:43.004"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200107 17:45:43.005" endtime="20200107 17:45:45.251"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:38.775" endtime="20200107 17:45:45.251"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:18.798" endtime="20200107 17:45:45.251" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-s1-t2" name="INSERT_END_B_01_01_02_Verify that The bulking patching screen will move to the other end by selecting End B button in any imVision X in the zone and observing the header of End A">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSHDefinitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST_A}</arg>
</arguments>
<status status="PASS" starttime="20200107 17:45:45.256" endtime="20200107 17:45:45.256"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20200107 17:45:45.256" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20200107 17:45:47.068" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20200107 17:45:45.256" endtime="20200107 17:45:47.068"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:45.256" endtime="20200107 17:45:47.068"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="GeneralPage">
<tags>
<tag>host_A</tag>
<tag>host_B</tag>
</tags>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST A}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20200107 17:45:47.068" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20200107 17:45:47.068" endtime="20200107 17:45:47.068"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200107 17:45:47.068" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20200107 17:45:47.068" endtime="20200107 17:45:50.300"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20200107 17:45:50.301" endtime="20200107 17:45:51.467"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:45:52.469" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:51.467" endtime="20200107 17:45:52.469"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="GeneralPage">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200107 17:45:52.485" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20200107 17:45:52.469" endtime="20200107 17:45:52.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200107 17:45:52.485" endtime="20200107 17:45:52.485"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20200107 17:45:52.516" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20200107 17:45:52.485" endtime="20200107 17:45:52.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200107 17:45:52.516" endtime="20200107 17:45:52.516"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200107 17:45:52.532" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20200107 17:45:52.516" endtime="20200107 17:45:52.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20200107 17:45:52.532" endtime="20200107 17:45:52.532"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:52.469" endtime="20200107 17:45:52.532"></status>
</kw>
<kw name="Go To Home Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200107 17:45:52.563" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200107 17:45:52.532" endtime="20200107 17:45:52.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200107 17:45:52.563" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200107 17:45:52.563" endtime="20200107 17:45:52.694"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:45:53.712" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:52.697" endtime="20200107 17:45:53.712"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:52.695" endtime="20200107 17:45:53.712"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:52.563" endtime="20200107 17:45:53.712"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:52.563" endtime="20200107 17:45:53.712"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:52.563" endtime="20200107 17:45:53.712"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:52.532" endtime="20200107 17:45:53.712"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:52.532" endtime="20200107 17:45:53.712"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:47.068" endtime="20200107 17:45:53.712"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:45.256" endtime="20200107 17:45:53.712"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="HomePage">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20200107 17:45:53.712" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20200107 17:45:53.712" endtime="20200107 17:45:53.800"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:45:54.807" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:53.802" endtime="20200107 17:45:54.807"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:53.801" endtime="20200107 17:45:54.807"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:53.712" endtime="20200107 17:45:54.807"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;2&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200107 17:45:54.807" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200107 17:45:54.807" endtime="20200107 17:45:54.807"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200107 17:45:54.807" level="INFO">${to port} = 2</msg>
<status status="PASS" starttime="20200107 17:45:54.807" endtime="20200107 17:45:54.807"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200107 17:45:54.807" level="INFO">Length is 12</msg>
<msg timestamp="20200107 17:45:54.807" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200107 17:45:54.807" endtime="20200107 17:45:54.823"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200107 17:45:54.823" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200107 17:45:54.823" endtime="20200107 17:45:54.823"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:54.823" endtime="20200107 17:45:54.823"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:54.823" endtime="20200107 17:45:54.823"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:54.823" endtime="20200107 17:45:54.823"></status>
</kw>
<msg timestamp="20200107 17:45:54.823" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200107 17:45:54.807" endtime="20200107 17:45:54.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200107 17:45:54.823" level="INFO">1</msg>
<status status="PASS" starttime="20200107 17:45:54.823" endtime="20200107 17:45:54.823"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200107 17:45:54.823" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:45:54.823" endtime="20200107 17:45:54.838"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200107 17:45:54.838" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:45:54.838" endtime="20200107 17:45:54.838"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200107 17:45:54.948" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:45:54.838" endtime="20200107 17:45:54.948"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200107 17:45:56.962" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:45:54.948" endtime="20200107 17:45:56.962"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200107 17:45:56.962" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:45:56.962" endtime="20200107 17:45:56.962"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:54.838" endtime="20200107 17:45:56.962"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:54.807" endtime="20200107 17:45:56.962"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:54.807" endtime="20200107 17:45:56.962"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200107 17:45:56.962" level="INFO">Length is 12</msg>
<msg timestamp="20200107 17:45:56.962" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200107 17:45:56.962" endtime="20200107 17:45:56.962"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200107 17:45:56.977" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200107 17:45:56.977" endtime="20200107 17:45:56.977"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:56.962" endtime="20200107 17:45:56.977"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:56.962" endtime="20200107 17:45:56.977"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:56.962" endtime="20200107 17:45:56.977"></status>
</kw>
<msg timestamp="20200107 17:45:56.977" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200107 17:45:56.962" endtime="20200107 17:45:56.977"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200107 17:45:56.977" level="INFO">1</msg>
<status status="PASS" starttime="20200107 17:45:56.977" endtime="20200107 17:45:56.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200107 17:45:56.977" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:45:56.977" endtime="20200107 17:45:56.977"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200107 17:45:56.977" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:45:56.977" endtime="20200107 17:45:56.977"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200107 17:45:57.087" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:45:56.977" endtime="20200107 17:45:57.087"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200107 17:45:59.106" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:45:57.087" endtime="20200107 17:45:59.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200107 17:45:59.106" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:45:59.106" endtime="20200107 17:45:59.106"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:56.977" endtime="20200107 17:45:59.106"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:56.962" endtime="20200107 17:45:59.106"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:56.962" endtime="20200107 17:45:59.106"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:54.807" endtime="20200107 17:45:59.106"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:54.807" endtime="20200107 17:45:59.106"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="BulkPatchingPage">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20200107 17:45:59.106" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20200107 17:45:59.106" endtime="20200107 17:45:59.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200107 17:45:59.135" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200107 17:45:59.106" endtime="20200107 17:45:59.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200107 17:45:59.135" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20200107 17:45:59.135" endtime="20200107 17:45:59.199"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:00.212" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:45:59.200" endtime="20200107 17:46:00.212"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:59.199" endtime="20200107 17:46:00.212"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:59.135" endtime="20200107 17:46:00.212"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:59.135" endtime="20200107 17:46:00.212"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:59.135" endtime="20200107 17:46:00.212"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:59.106" endtime="20200107 17:46:00.212"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:59.106" endtime="20200107 17:46:00.212"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:01.212" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:00.212" endtime="20200107 17:46:01.212"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:00.212" endtime="20200107 17:46:01.212"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:59.106" endtime="20200107 17:46:01.212"></status>
</kw>
<kw name="Then The Header of End A Is &quot;inactive&quot;" library="BulkPatchingDefinitions">
<kw name="Get Status of Tab End A" library="BulkPatchingDefinitions">
<assign>
<var>${get status}</var>
</assign>
<kw name="Get Element Attribute" library="SeleniumLibrary">
<doc>Returns the value of ``attribute`` from the element ``locator``.</doc>
<arguments>
<arg>${tabEndA}</arg>
<arg>style</arg>
</arguments>
<assign>
<var>${output status}</var>
</assign>
<msg timestamp="20200107 17:46:01.243" level="INFO">${output status} = background: gray;</msg>
<status status="PASS" starttime="20200107 17:46:01.212" endtime="20200107 17:46:01.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${output status}' == '${attribute tab active}'</arg>
<arg>Set Variable</arg>
<arg>"active"</arg>
<arg>ELSE IF</arg>
<arg>'${output status}' == '${attribute tab inactive}'</arg>
<arg>Set Variable</arg>
<arg>"inactive"</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"inactive"</arg>
</arguments>
<status status="PASS" starttime="20200107 17:46:01.243" endtime="20200107 17:46:01.243"></status>
</kw>
<msg timestamp="20200107 17:46:01.243" level="INFO">${status} = "inactive"</msg>
<status status="PASS" starttime="20200107 17:46:01.243" endtime="20200107 17:46:01.243"></status>
</kw>
<msg timestamp="20200107 17:46:01.243" level="INFO">${get status} = "inactive"</msg>
<status status="PASS" starttime="20200107 17:46:01.212" endtime="20200107 17:46:01.243"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>"${status}"</arg>
<arg>${get status}</arg>
<arg>msg="Status of End A is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>"${status}"</arg>
<arg>${get status}</arg>
<arg>msg="Status of End A is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200107 17:46:01.243" endtime="20200107 17:46:01.243"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:01.243" endtime="20200107 17:46:01.243"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:01.212" endtime="20200107 17:46:01.243"></status>
</kw>
<kw name="And Plugout Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;2&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200107 17:46:01.259" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200107 17:46:01.243" endtime="20200107 17:46:01.259"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200107 17:46:01.259" level="INFO">${to port} = 2</msg>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:01.259"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200107 17:46:01.259" level="INFO">Length is 12</msg>
<msg timestamp="20200107 17:46:01.259" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:01.259"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200107 17:46:01.259" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:01.259"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:01.259"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:01.259"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:01.259"></status>
</kw>
<msg timestamp="20200107 17:46:01.259" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:01.259"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200107 17:46:01.259" level="INFO">1</msg>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:01.259"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200107 17:46:01.259" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:01.259"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200107 17:46:01.259" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:01.274"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200107 17:46:01.352" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:46:01.274" endtime="20200107 17:46:01.352"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200107 17:46:03.366" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:46:01.352" endtime="20200107 17:46:03.366"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200107 17:46:03.366" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:46:03.366" endtime="20200107 17:46:03.366"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:01.274" endtime="20200107 17:46:03.366"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:03.366"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:03.366"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200107 17:46:03.366" level="INFO">Length is 12</msg>
<msg timestamp="20200107 17:46:03.366" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200107 17:46:03.366" endtime="20200107 17:46:03.366"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200107 17:46:03.381" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200107 17:46:03.381" endtime="20200107 17:46:03.381"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:03.366" endtime="20200107 17:46:03.381"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:03.366" endtime="20200107 17:46:03.381"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:03.366" endtime="20200107 17:46:03.381"></status>
</kw>
<msg timestamp="20200107 17:46:03.381" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200107 17:46:03.366" endtime="20200107 17:46:03.381"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200107 17:46:03.381" level="INFO">1</msg>
<status status="PASS" starttime="20200107 17:46:03.381" endtime="20200107 17:46:03.381"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200107 17:46:03.381" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:46:03.381" endtime="20200107 17:46:03.381"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200107 17:46:03.381" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:46:03.381" endtime="20200107 17:46:03.381"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200107 17:46:03.491" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:46:03.381" endtime="20200107 17:46:03.491"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200107 17:46:05.506" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:46:03.491" endtime="20200107 17:46:05.506"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200107 17:46:05.506" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:46:05.506" endtime="20200107 17:46:05.506"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:03.381" endtime="20200107 17:46:05.506"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:03.366" endtime="20200107 17:46:05.506"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:03.366" endtime="20200107 17:46:05.506"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:01.259" endtime="20200107 17:46:05.506"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:01.243" endtime="20200107 17:46:05.506"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="GeneralPage" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200107 17:46:05.521" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20200107 17:46:05.506" endtime="20200107 17:46:05.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200107 17:46:05.537" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200107 17:46:05.537" endtime="20200107 17:46:05.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200107 17:46:05.553" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20200107 17:46:05.553" endtime="20200107 17:46:05.626"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:06.628" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:05.627" endtime="20200107 17:46:06.628"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:05.626" endtime="20200107 17:46:06.628"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:05.553" endtime="20200107 17:46:06.628"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:05.553" endtime="20200107 17:46:06.628"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:05.553" endtime="20200107 17:46:06.628"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:05.537" endtime="20200107 17:46:06.628"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:07.628" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:06.628" endtime="20200107 17:46:07.628"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:06.628" endtime="20200107 17:46:07.628"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:05.537" endtime="20200107 17:46:07.628"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:05.521" endtime="20200107 17:46:07.628"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200107 17:46:07.659" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20200107 17:46:07.628" endtime="20200107 17:46:07.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200107 17:46:07.691" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200107 17:46:07.659" endtime="20200107 17:46:07.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200107 17:46:07.691" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200107 17:46:07.691" endtime="20200107 17:46:07.761"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:08.772" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:07.763" endtime="20200107 17:46:08.772"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:07.762" endtime="20200107 17:46:08.772"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:07.691" endtime="20200107 17:46:08.772"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:07.691" endtime="20200107 17:46:08.772"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:07.691" endtime="20200107 17:46:08.772"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:07.659" endtime="20200107 17:46:08.772"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:09.772" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:08.772" endtime="20200107 17:46:09.772"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:08.772" endtime="20200107 17:46:09.772"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:07.659" endtime="20200107 17:46:09.772"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:07.659" endtime="20200107 17:46:09.772"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200107 17:46:09.772" endtime="20200107 17:46:12.007"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:05.506" endtime="20200107 17:46:12.007"></status>
</kw>
<status status="PASS" starttime="20200107 17:45:45.254" endtime="20200107 17:46:12.007" critical="yes"></status>
</test>
<test id="s1-s1-s1-s1-s1-s1-t3" name="INSERT_END_B_01_01_03_Verify that The bulking patching screen will move to the other end by selecting End B button in any imVision X in the zone and observing the help text on Display of ImVisionX">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSHDefinitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST_A}</arg>
</arguments>
<status status="PASS" starttime="20200107 17:46:12.012" endtime="20200107 17:46:12.012"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20200107 17:46:12.012" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20200107 17:46:13.856" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20200107 17:46:12.012" endtime="20200107 17:46:13.856"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:12.012" endtime="20200107 17:46:13.856"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="GeneralPage">
<tags>
<tag>host_A</tag>
<tag>host_B</tag>
</tags>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST A}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20200107 17:46:13.856" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20200107 17:46:13.856" endtime="20200107 17:46:13.856"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200107 17:46:13.856" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20200107 17:46:13.856" endtime="20200107 17:46:16.819"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20200107 17:46:16.820" endtime="20200107 17:46:17.976"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:18.976" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:17.976" endtime="20200107 17:46:18.976"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="GeneralPage">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200107 17:46:19.007" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20200107 17:46:18.976" endtime="20200107 17:46:19.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200107 17:46:19.007" endtime="20200107 17:46:19.007"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20200107 17:46:19.023" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20200107 17:46:19.007" endtime="20200107 17:46:19.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200107 17:46:19.023" endtime="20200107 17:46:19.023"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200107 17:46:19.038" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20200107 17:46:19.023" endtime="20200107 17:46:19.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20200107 17:46:19.038" endtime="20200107 17:46:19.038"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:18.976" endtime="20200107 17:46:19.038"></status>
</kw>
<kw name="Go To Home Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200107 17:46:19.070" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200107 17:46:19.038" endtime="20200107 17:46:19.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200107 17:46:19.070" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200107 17:46:19.070" endtime="20200107 17:46:19.221"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:20.227" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:19.222" endtime="20200107 17:46:20.227"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:19.222" endtime="20200107 17:46:20.227"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:19.070" endtime="20200107 17:46:20.227"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:19.070" endtime="20200107 17:46:20.227"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:19.070" endtime="20200107 17:46:20.227"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:19.038" endtime="20200107 17:46:20.227"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:19.038" endtime="20200107 17:46:20.227"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:13.856" endtime="20200107 17:46:20.227"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:12.012" endtime="20200107 17:46:20.227"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="HomePage">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20200107 17:46:20.227" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20200107 17:46:20.227" endtime="20200107 17:46:20.323"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:21.332" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:20.325" endtime="20200107 17:46:21.332"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:20.324" endtime="20200107 17:46:21.332"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:20.227" endtime="20200107 17:46:21.332"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;2&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200107 17:46:21.332" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200107 17:46:21.332" endtime="20200107 17:46:21.332"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200107 17:46:21.332" level="INFO">${to port} = 2</msg>
<status status="PASS" starttime="20200107 17:46:21.332" endtime="20200107 17:46:21.332"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200107 17:46:21.332" level="INFO">Length is 12</msg>
<msg timestamp="20200107 17:46:21.332" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200107 17:46:21.332" endtime="20200107 17:46:21.332"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200107 17:46:21.332" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200107 17:46:21.332" endtime="20200107 17:46:21.332"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:21.332" endtime="20200107 17:46:21.332"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:21.332" endtime="20200107 17:46:21.332"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:21.332" endtime="20200107 17:46:21.332"></status>
</kw>
<msg timestamp="20200107 17:46:21.332" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200107 17:46:21.332" endtime="20200107 17:46:21.347"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200107 17:46:21.347" level="INFO">1</msg>
<status status="PASS" starttime="20200107 17:46:21.347" endtime="20200107 17:46:21.347"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200107 17:46:21.347" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:46:21.347" endtime="20200107 17:46:21.347"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200107 17:46:21.347" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:46:21.347" endtime="20200107 17:46:21.347"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200107 17:46:21.425" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:46:21.347" endtime="20200107 17:46:21.425"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200107 17:46:23.427" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:46:21.425" endtime="20200107 17:46:23.427"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200107 17:46:23.427" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:46:23.427" endtime="20200107 17:46:23.427"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:21.347" endtime="20200107 17:46:23.427"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:21.332" endtime="20200107 17:46:23.427"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:21.332" endtime="20200107 17:46:23.427"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200107 17:46:23.427" level="INFO">Length is 12</msg>
<msg timestamp="20200107 17:46:23.427" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200107 17:46:23.427" endtime="20200107 17:46:23.427"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200107 17:46:23.427" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200107 17:46:23.427" endtime="20200107 17:46:23.427"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:23.427" endtime="20200107 17:46:23.443"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:23.427" endtime="20200107 17:46:23.443"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:23.427" endtime="20200107 17:46:23.443"></status>
</kw>
<msg timestamp="20200107 17:46:23.443" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200107 17:46:23.427" endtime="20200107 17:46:23.443"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200107 17:46:23.443" level="INFO">1</msg>
<status status="PASS" starttime="20200107 17:46:23.443" endtime="20200107 17:46:23.443"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200107 17:46:23.443" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:46:23.443" endtime="20200107 17:46:23.443"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200107 17:46:23.443" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:46:23.443" endtime="20200107 17:46:23.443"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200107 17:46:23.474" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:46:23.443" endtime="20200107 17:46:23.474"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200107 17:46:25.488" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:46:23.474" endtime="20200107 17:46:25.488"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200107 17:46:25.488" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:46:25.488" endtime="20200107 17:46:25.488"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:23.443" endtime="20200107 17:46:25.488"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:23.427" endtime="20200107 17:46:25.488"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:23.427" endtime="20200107 17:46:25.488"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:21.332" endtime="20200107 17:46:25.488"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:21.332" endtime="20200107 17:46:25.488"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="BulkPatchingPage">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20200107 17:46:25.488" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20200107 17:46:25.488" endtime="20200107 17:46:25.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200107 17:46:25.519" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200107 17:46:25.488" endtime="20200107 17:46:25.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200107 17:46:25.519" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20200107 17:46:25.519" endtime="20200107 17:46:25.580"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:26.587" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:25.581" endtime="20200107 17:46:26.587"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:25.581" endtime="20200107 17:46:26.587"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:25.519" endtime="20200107 17:46:26.587"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:25.519" endtime="20200107 17:46:26.587"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:25.519" endtime="20200107 17:46:26.587"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:25.488" endtime="20200107 17:46:26.587"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:25.488" endtime="20200107 17:46:26.587"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:27.587" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:26.587" endtime="20200107 17:46:27.587"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:26.587" endtime="20200107 17:46:27.587"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:25.488" endtime="20200107 17:46:27.587"></status>
</kw>
<kw name="Then The Help Text Is &quot;${txtInsertAllEndBPlugs}&quot;" library="BulkPatchingDefinitions">
<kw name="Get Text" library="SeleniumLibrary">
<doc>Returns the text value of the element identified by ``locator``.</doc>
<arguments>
<arg>${lblHelpText}</arg>
</arguments>
<assign>
<var>${get helptext}</var>
</assign>
<msg timestamp="20200107 17:46:27.634" level="INFO">${get helptext} = Insert all End B plugs, then press Exit.</msg>
<status status="PASS" starttime="20200107 17:46:27.587" endtime="20200107 17:46:27.634"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${helptext}</arg>
<arg>${get helptext}</arg>
<arg>msg="The helptext is not matched the checked value!!!"</arg>
</arguments>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:27.634"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:27.634"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:27.587" endtime="20200107 17:46:27.634"></status>
</kw>
<kw name="And Plugout Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;2&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200107 17:46:27.634" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:27.634"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200107 17:46:27.634" level="INFO">${to port} = 2</msg>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:27.634"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200107 17:46:27.634" level="INFO">Length is 12</msg>
<msg timestamp="20200107 17:46:27.634" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:27.634"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200107 17:46:27.634" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:27.634"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:27.634"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:27.634"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:27.634"></status>
</kw>
<msg timestamp="20200107 17:46:27.634" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:27.634"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200107 17:46:27.634" level="INFO">1</msg>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:27.649"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200107 17:46:27.649" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:46:27.649" endtime="20200107 17:46:27.649"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200107 17:46:27.649" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:46:27.649" endtime="20200107 17:46:27.649"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200107 17:46:27.696" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200107 17:46:27.649" endtime="20200107 17:46:27.696"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200107 17:46:29.702" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:46:27.696" endtime="20200107 17:46:29.702"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200107 17:46:29.702" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:46:29.702" endtime="20200107 17:46:29.702"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:27.649" endtime="20200107 17:46:29.702"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:29.702"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:29.702"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugout Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200107 17:46:29.702" level="INFO">Length is 12</msg>
<msg timestamp="20200107 17:46:29.702" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200107 17:46:29.702" endtime="20200107 17:46:29.702"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200107 17:46:29.717" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200107 17:46:29.717" endtime="20200107 17:46:29.717"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:29.702" endtime="20200107 17:46:29.717"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:29.702" endtime="20200107 17:46:29.717"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:29.702" endtime="20200107 17:46:29.717"></status>
</kw>
<msg timestamp="20200107 17:46:29.717" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200107 17:46:29.702" endtime="20200107 17:46:29.717"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200107 17:46:29.717" level="INFO">1</msg>
<status status="PASS" starttime="20200107 17:46:29.717" endtime="20200107 17:46:29.717"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200107 17:46:29.717" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:46:29.717" endtime="20200107 17:46:29.717"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200107 17:46:29.717" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:46:29.717" endtime="20200107 17:46:29.717"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200107 17:46:29.842" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200107 17:46:29.717" endtime="20200107 17:46:29.842"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200107 17:46:31.845" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:46:29.842" endtime="20200107 17:46:31.845"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200107 17:46:31.845" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200107 17:46:31.845" endtime="20200107 17:46:31.845"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:29.717" endtime="20200107 17:46:31.845"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:29.702" endtime="20200107 17:46:31.845"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:29.702" endtime="20200107 17:46:31.845"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:31.845"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:27.634" endtime="20200107 17:46:31.845"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="GeneralPage" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200107 17:46:31.876" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20200107 17:46:31.845" endtime="20200107 17:46:31.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200107 17:46:31.892" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200107 17:46:31.876" endtime="20200107 17:46:31.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200107 17:46:31.908" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20200107 17:46:31.908" endtime="20200107 17:46:31.978"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:32.988" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:31.979" endtime="20200107 17:46:32.988"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:31.978" endtime="20200107 17:46:32.988"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:31.908" endtime="20200107 17:46:32.988"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:31.908" endtime="20200107 17:46:32.988"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:31.908" endtime="20200107 17:46:32.988"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:31.876" endtime="20200107 17:46:32.988"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:33.989" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:32.988" endtime="20200107 17:46:33.989"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:32.988" endtime="20200107 17:46:33.989"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:31.876" endtime="20200107 17:46:33.989"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:31.876" endtime="20200107 17:46:33.989"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200107 17:46:34.021" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20200107 17:46:33.989" endtime="20200107 17:46:34.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200107 17:46:34.036" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200107 17:46:34.021" endtime="20200107 17:46:34.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200107 17:46:34.036" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200107 17:46:34.036" endtime="20200107 17:46:34.113"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:35.130" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:34.116" endtime="20200107 17:46:35.130"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:34.114" endtime="20200107 17:46:35.130"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:34.036" endtime="20200107 17:46:35.130"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:34.036" endtime="20200107 17:46:35.130"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:34.036" endtime="20200107 17:46:35.130"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:34.021" endtime="20200107 17:46:35.130"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200107 17:46:36.130" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200107 17:46:35.130" endtime="20200107 17:46:36.130"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:35.130" endtime="20200107 17:46:36.130"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:34.021" endtime="20200107 17:46:36.130"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:34.021" endtime="20200107 17:46:36.130"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200107 17:46:36.130" endtime="20200107 17:46:38.365"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:31.845" endtime="20200107 17:46:38.365"></status>
</kw>
<status status="PASS" starttime="20200107 17:46:12.007" endtime="20200107 17:46:38.365" critical="yes"></status>
</test>
<status status="PASS" starttime="20200107 17:45:18.328" endtime="20200107 17:46:38.369"></status>
</suite>
<status status="PASS" starttime="20200107 17:45:18.328" endtime="20200107 17:46:38.370"></status>
</suite>
<status status="PASS" starttime="20200107 17:45:18.312" endtime="20200107 17:46:38.370"></status>
</suite>
<status status="PASS" starttime="20200107 17:45:18.312" endtime="20200107 17:46:38.385"></status>
</suite>
<status status="PASS" starttime="20200107 17:45:18.312" endtime="20200107 17:46:38.385"></status>
</suite>
<status status="PASS" starttime="20200107 17:45:18.281" endtime="20200107 17:46:38.401"></status>
</suite>
<statistics>
<total>
<stat pass="3" fail="0">Critical Tests</stat>
<stat pass="3" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="3" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="3" fail="0" id="s1-s1" name="BulkPatching Robot">BulkPatching Robot.BulkPatching Robot</stat>
<stat pass="3" fail="0" id="s1-s1-s1" name="Test Resources">BulkPatching Robot.BulkPatching Robot.Test Resources</stat>
<stat pass="3" fail="0" id="s1-s1-s1-s1" name="Test Suites">BulkPatching Robot.BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="3" fail="0" id="s1-s1-s1-s1-s1" name="3.Insert All End Bs">BulkPatching Robot.BulkPatching Robot.Test Resources.Test Suites.3.Insert All End Bs</stat>
<stat pass="3" fail="0" id="s1-s1-s1-s1-s1-s1" name="3.1.CheckBulkPatchingScreenWhenSelectingTabEndB">BulkPatching Robot.BulkPatching Robot.Test Resources.Test Suites.3.Insert All End Bs.3.1.CheckBulkPatchingScreenWhenSelectingTabEndB</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
