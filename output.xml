<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.0 on win32)" generated="20200108 13:44:57.875" rpa="false">
<suite id="s1" name="BulkPatching Robot" source="C:\Users\quocanh.ho\git\BulkPatching_Robot">
<suite id="s1-s1" name="BulkPatching Robot" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot">
<suite id="s1-s1-s1" name="Test Resources" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot\Test_Resources">
<suite id="s1-s1-s1-s1" name="Test Suites" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot\Test_Resources\Test_Suites">
<suite id="s1-s1-s1-s1-s1" name="3.Insert All End Bs" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot\Test_Resources\Test_Suites\3.Insert_All_End_Bs">
<suite id="s1-s1-s1-s1-s1-s1" name="3.7.CheckNumberOfConfirmationWhenConnectingExcessPlugs" source="C:\Users\quocanh.ho\git\BulkPatching_Robot\BulkPatching_Robot\Test_Resources\Test_Suites\3.Insert_All_End_Bs\3.7.CheckNumberOfConfirmationWhenConnectingExcessPlugs.robot">
<test id="s1-s1-s1-s1-s1-s1-t1" name="INSERT_END_B_07_01_02_Verify that imVision X shall show correctly when plugging more ports than the ports in the End A list and generating confirm ports for the new port.">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Open SSH Connection and Login</arg>
<arg>Open WebUI And Go To Home Screen</arg>
</arguments>
<kw name="Open SSH Connection and Login" library="SSHDefinitions">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST_A}</arg>
</arguments>
<status status="PASS" starttime="20200108 13:44:58.407" endtime="20200108 13:44:58.407"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20200108 13:44:58.407" level="INFO">Logging into '192.168.171.201:22' as 'root'.</msg>
<msg timestamp="20200108 13:44:59.813" level="INFO">Read output: #</msg>
<status status="PASS" starttime="20200108 13:44:58.407" endtime="20200108 13:44:59.813"></status>
</kw>
<status status="PASS" starttime="20200108 13:44:58.407" endtime="20200108 13:44:59.813"></status>
</kw>
<kw name="Open WebUI And Go To Home Screen" library="GeneralPage">
<tags>
<tag>host_A</tag>
<tag>host_B</tag>
</tags>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>http://</arg>
<arg>${HOST A}</arg>
<arg>:8888</arg>
</arguments>
<assign>
<var>${WebUI url}</var>
</assign>
<msg timestamp="20200108 13:44:59.813" level="INFO">${WebUI url} = http://192.168.171.201:8888</msg>
<status status="PASS" starttime="20200108 13:44:59.813" endtime="20200108 13:44:59.813"></status>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${WebUI url}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200108 13:44:59.813" level="INFO">Opening browser 'Chrome' to base url 'http://192.168.171.201:8888'.</msg>
<status status="PASS" starttime="20200108 13:44:59.813" endtime="20200108 13:45:02.732"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20200108 13:45:02.734" endtime="20200108 13:45:03.891"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200108 13:45:04.891" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200108 13:45:03.891" endtime="20200108 13:45:04.891"></status>
</kw>
<kw name="Set Web UI to Stand By State" library="GeneralPage">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200108 13:45:04.922" level="INFO">${count Exit button} = 0</msg>
<status status="PASS" starttime="20200108 13:45:04.891" endtime="20200108 13:45:04.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200108 13:45:04.922" endtime="20200108 13:45:04.922"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnCancel}</arg>
</arguments>
<assign>
<var>${count Cancel button}</var>
</assign>
<msg timestamp="20200108 13:45:04.938" level="INFO">${count Cancel button} = 0</msg>
<status status="PASS" starttime="20200108 13:45:04.922" endtime="20200108 13:45:04.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Cancel button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<status status="PASS" starttime="20200108 13:45:04.938" endtime="20200108 13:45:04.938"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200108 13:45:04.953" level="INFO">${count Home screen} = 0</msg>
<status status="PASS" starttime="20200108 13:45:04.938" endtime="20200108 13:45:04.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<status status="PASS" starttime="20200108 13:45:04.953" endtime="20200108 13:45:04.953"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:04.891" endtime="20200108 13:45:04.953"></status>
</kw>
<kw name="Go To Home Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200108 13:45:04.984" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200108 13:45:04.969" endtime="20200108 13:45:04.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200108 13:45:04.984" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200108 13:45:04.984" endtime="20200108 13:45:05.086"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200108 13:45:06.098" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200108 13:45:05.089" endtime="20200108 13:45:06.099"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:05.087" endtime="20200108 13:45:06.099"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:04.984" endtime="20200108 13:45:06.100"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:04.984" endtime="20200108 13:45:06.101"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:04.984" endtime="20200108 13:45:06.101"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:04.969" endtime="20200108 13:45:06.102"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:04.953" endtime="20200108 13:45:06.102"></status>
</kw>
<status status="PASS" starttime="20200108 13:44:59.813" endtime="20200108 13:45:06.103"></status>
</kw>
<status status="PASS" starttime="20200108 13:44:58.407" endtime="20200108 13:45:06.103"></status>
</kw>
<kw name="Given Go To Bulk Patching Screen" library="HomePage">
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnBulk Patching}</arg>
</arguments>
<msg timestamp="20200108 13:45:06.104" level="INFO">Clicking element '//input[@id='bulk-patch-btn']'.</msg>
<status status="PASS" starttime="20200108 13:45:06.104" endtime="20200108 13:45:06.199"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200108 13:45:07.209" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200108 13:45:06.200" endtime="20200108 13:45:07.209"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:06.199" endtime="20200108 13:45:07.209"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:06.104" endtime="20200108 13:45:07.209"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;1&quot; to Port &quot;3&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200108 13:45:07.209" level="INFO">${from port} = 1</msg>
<status status="PASS" starttime="20200108 13:45:07.209" endtime="20200108 13:45:07.209"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200108 13:45:07.209" level="INFO">${to port} = 3</msg>
<status status="PASS" starttime="20200108 13:45:07.209" endtime="20200108 13:45:07.209"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:07.209" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:07.209" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:07.209" endtime="20200108 13:45:07.209"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:07.209" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:07.209" endtime="20200108 13:45:07.209"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:07.209" endtime="20200108 13:45:07.209"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:07.209" endtime="20200108 13:45:07.209"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:07.209" endtime="20200108 13:45:07.209"></status>
</kw>
<msg timestamp="20200108 13:45:07.209" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:07.209" endtime="20200108 13:45:07.209"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:07.225" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:07.225" endtime="20200108 13:45:07.225"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:07.225" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200108 13:45:07.225" endtime="20200108 13:45:07.225"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:07.225" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200108 13:45:07.225" endtime="20200108 13:45:07.225"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:07.319" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200108 13:45:07.225" endtime="20200108 13:45:07.320"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:09.341" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:07.320" endtime="20200108 13:45:09.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:09.344" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:09.342" endtime="20200108 13:45:09.344"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:07.225" endtime="20200108 13:45:09.344"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:07.209" endtime="20200108 13:45:09.345"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:07.209" endtime="20200108 13:45:09.345"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:09.349" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:09.349" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:09.348" endtime="20200108 13:45:09.349"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:09.355" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:09.354" endtime="20200108 13:45:09.356"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:09.351" endtime="20200108 13:45:09.356"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:09.350" endtime="20200108 13:45:09.357"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:09.350" endtime="20200108 13:45:09.358"></status>
</kw>
<msg timestamp="20200108 13:45:09.358" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:09.347" endtime="20200108 13:45:09.358"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:09.358" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:09.358" endtime="20200108 13:45:09.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:09.358" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200108 13:45:09.358" endtime="20200108 13:45:09.358"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:09.358" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200108 13:45:09.358" endtime="20200108 13:45:09.358"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:09.451" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200108 13:45:09.358" endtime="20200108 13:45:09.451"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:11.472" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:09.452" endtime="20200108 13:45:11.472"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:11.472" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:11.472" endtime="20200108 13:45:11.472"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:09.358" endtime="20200108 13:45:11.472"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:09.346" endtime="20200108 13:45:11.472"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:09.345" endtime="20200108 13:45:11.472"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:11.472" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:11.472" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:11.472" endtime="20200108 13:45:11.472"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:11.472" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:11.472" endtime="20200108 13:45:11.472"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:11.472" endtime="20200108 13:45:11.472"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:11.472" endtime="20200108 13:45:11.472"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:11.472" endtime="20200108 13:45:11.472"></status>
</kw>
<msg timestamp="20200108 13:45:11.472" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:11.472" endtime="20200108 13:45:11.472"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:11.472" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:11.472" endtime="20200108 13:45:11.472"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:11.472" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20200108 13:45:11.472" endtime="20200108 13:45:11.472"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:11.488" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20200108 13:45:11.472" endtime="20200108 13:45:11.488"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:11.535" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20200108 13:45:11.488" endtime="20200108 13:45:11.535"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:13.547" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:11.535" endtime="20200108 13:45:13.547"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:13.547" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:13.547" endtime="20200108 13:45:13.547"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:11.488" endtime="20200108 13:45:13.547"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:11.472" endtime="20200108 13:45:13.547"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:11.472" endtime="20200108 13:45:13.547"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:07.209" endtime="20200108 13:45:13.547"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:07.209" endtime="20200108 13:45:13.547"></status>
</kw>
<kw name="When Select Tab End &quot;B&quot;" library="BulkPatchingPage">
<kw name="Convert To Lowercase" library="String">
<doc>Converts string to lowercase.</doc>
<arguments>
<arg>${end position}</arg>
</arguments>
<assign>
<var>${temp end position}</var>
</assign>
<msg timestamp="20200108 13:45:13.547" level="INFO">${temp end position} = b</msg>
<status status="PASS" starttime="20200108 13:45:13.547" endtime="20200108 13:45:13.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${temp end position}' == 'a'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndA}</arg>
<arg>ELSE IF</arg>
<arg>'${temp end position}' == 'b'</arg>
<arg>Click Web Button</arg>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${tabEndB}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200108 13:45:13.578" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200108 13:45:13.547" endtime="20200108 13:45:13.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200108 13:45:13.578" level="INFO">Clicking element '//div[@id='btn-end-b']'.</msg>
<status status="PASS" starttime="20200108 13:45:13.578" endtime="20200108 13:45:13.650"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200108 13:45:14.664" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200108 13:45:13.651" endtime="20200108 13:45:14.664"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:13.650" endtime="20200108 13:45:14.664"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:13.578" endtime="20200108 13:45:14.664"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:13.578" endtime="20200108 13:45:14.664"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:13.578" endtime="20200108 13:45:14.664"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:13.547" endtime="20200108 13:45:14.664"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:13.547" endtime="20200108 13:45:14.664"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200108 13:45:15.664" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200108 13:45:14.664" endtime="20200108 13:45:15.664"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:14.664" endtime="20200108 13:45:15.664"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:13.547" endtime="20200108 13:45:15.664"></status>
</kw>
<kw name="When Plugin Serial Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; from Port &quot;4&quot; to Port &quot;6&quot;" library="VirtualPanelDefinitions">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port1ID}</arg>
</arguments>
<assign>
<var>${from port}</var>
</assign>
<msg timestamp="20200108 13:45:15.664" level="INFO">${from port} = 4</msg>
<status status="PASS" starttime="20200108 13:45:15.664" endtime="20200108 13:45:15.664"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${port2ID}</arg>
</arguments>
<assign>
<var>${to port}</var>
</assign>
<msg timestamp="20200108 13:45:15.664" level="INFO">${to port} = 6</msg>
<status status="PASS" starttime="20200108 13:45:15.664" endtime="20200108 13:45:15.664"></status>
</kw>
<kw name="${i} IN RANGE [ ${from port} | ${to port+1} ]" type="for">
<kw name="${i} = 4" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:15.664" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:15.664" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:15.664" endtime="20200108 13:45:15.664"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:15.680" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:15.680" endtime="20200108 13:45:15.680"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:15.680" endtime="20200108 13:45:15.680"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:15.680" endtime="20200108 13:45:15.680"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:15.664" endtime="20200108 13:45:15.680"></status>
</kw>
<msg timestamp="20200108 13:45:15.680" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:15.664" endtime="20200108 13:45:15.680"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:15.680" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:15.680" endtime="20200108 13:45:15.680"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:15.680" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200108 13:45:15.680" endtime="20200108 13:45:15.680"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:15.680" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200108 13:45:15.680" endtime="20200108 13:45:15.680"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:15.781" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200108 13:45:15.695" endtime="20200108 13:45:15.782"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:17.791" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:15.782" endtime="20200108 13:45:17.791"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:17.791" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:17.791" endtime="20200108 13:45:17.791"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:15.680" endtime="20200108 13:45:17.791"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:15.664" endtime="20200108 13:45:17.791"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:15.664" endtime="20200108 13:45:17.791"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:17.791" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:17.791" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:17.791" endtime="20200108 13:45:17.791"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:17.807" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:17.807" endtime="20200108 13:45:17.807"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:17.791" endtime="20200108 13:45:17.807"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:17.791" endtime="20200108 13:45:17.807"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:17.791" endtime="20200108 13:45:17.807"></status>
</kw>
<msg timestamp="20200108 13:45:17.807" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:17.791" endtime="20200108 13:45:17.807"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:17.807" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:17.807" endtime="20200108 13:45:17.807"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:17.807" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200108 13:45:17.807" endtime="20200108 13:45:17.807"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:17.807" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200108 13:45:17.807" endtime="20200108 13:45:17.807"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:17.885" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200108 13:45:17.807" endtime="20200108 13:45:17.885"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:19.895" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:17.885" endtime="20200108 13:45:19.895"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:19.895" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:19.895" endtime="20200108 13:45:19.895"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:17.807" endtime="20200108 13:45:19.895"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:17.791" endtime="20200108 13:45:19.895"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:17.791" endtime="20200108 13:45:19.895"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Plugin Copper Tip to Rack &quot;${rackID}&quot; Panel &quot;${panelID}&quot; Row &quot;${row}&quot; Port &quot;${i}&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:19.895" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:19.895" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:19.895" endtime="20200108 13:45:19.895"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:19.910" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:19.910" endtime="20200108 13:45:19.910"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:19.895" endtime="20200108 13:45:19.910"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:19.895" endtime="20200108 13:45:19.910"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:19.895" endtime="20200108 13:45:19.910"></status>
</kw>
<msg timestamp="20200108 13:45:19.910" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:19.895" endtime="20200108 13:45:19.910"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:19.910" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:19.910" endtime="20200108 13:45:19.910"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:19.910" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20200108 13:45:19.910" endtime="20200108 13:45:19.910"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:19.910" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20200108 13:45:19.910" endtime="20200108 13:45:19.910"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:19.988" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20200108 13:45:19.910" endtime="20200108 13:45:19.988"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:21.994" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:19.988" endtime="20200108 13:45:21.994"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:21.994" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:21.994" endtime="20200108 13:45:21.994"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:19.910" endtime="20200108 13:45:21.994"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:19.895" endtime="20200108 13:45:21.994"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:19.895" endtime="20200108 13:45:21.994"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:15.664" endtime="20200108 13:45:21.994"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:15.664" endtime="20200108 13:45:21.994"></status>
</kw>
<kw name="When Plugin Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;7&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:21.994" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:21.994" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:21.994" endtime="20200108 13:45:21.994"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:22.010" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:22.010" endtime="20200108 13:45:22.010"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:21.994" endtime="20200108 13:45:22.010"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:21.994" endtime="20200108 13:45:22.010"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:21.994" endtime="20200108 13:45:22.010"></status>
</kw>
<msg timestamp="20200108 13:45:22.010" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:21.994" endtime="20200108 13:45:22.010"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:22.010" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:22.010" endtime="20200108 13:45:22.010"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugin --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:22.010" level="INFO">${completed command} = vp_cmd_helper --plugin --rack 1 --panel 1 --port 7</msg>
<status status="PASS" starttime="20200108 13:45:22.010" endtime="20200108 13:45:22.010"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:22.010" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 7</msg>
<status status="PASS" starttime="20200108 13:45:22.010" endtime="20200108 13:45:22.010"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:22.088" level="INFO">vp_cmd_helper --plugin --rack 1 --panel 1 --port 7</msg>
<status status="PASS" starttime="20200108 13:45:22.010" endtime="20200108 13:45:22.088"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:24.093" level="INFO">${stdout} = result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:22.088" endtime="20200108 13:45:24.093"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:24.093" level="INFO">result=success
command=plugin
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:24.093" endtime="20200108 13:45:24.093"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:22.010" endtime="20200108 13:45:24.093"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:21.994" endtime="20200108 13:45:24.093"></status>
</kw>
<kw name="And Exit Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200108 13:45:24.109" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200108 13:45:24.093" endtime="20200108 13:45:24.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200108 13:45:24.109" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20200108 13:45:24.109" endtime="20200108 13:45:24.176"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200108 13:45:25.182" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200108 13:45:24.178" endtime="20200108 13:45:25.182"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:24.177" endtime="20200108 13:45:25.182"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:24.109" endtime="20200108 13:45:25.182"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:24.109" endtime="20200108 13:45:25.182"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:24.109" endtime="20200108 13:45:25.182"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:24.093" endtime="20200108 13:45:25.182"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200108 13:45:26.184" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200108 13:45:25.182" endtime="20200108 13:45:26.184"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:25.182" endtime="20200108 13:45:26.184"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:24.093" endtime="20200108 13:45:26.184"></status>
</kw>
<kw name="Then Check The Number of Confirm is &quot;1&quot;" library="GeneralDefinitions">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Value Should Be</arg>
<arg>${btnConfirm}</arg>
<arg>value</arg>
<arg>${confirm number}</arg>
</arguments>
<kw name="Element Attribute Value Should Be" library="SeleniumLibrary">
<doc>Verifies element identified by ``locator`` contains expected attribute value.</doc>
<arguments>
<arg>${btnConfirm}</arg>
<arg>value</arg>
<arg>${confirm number}</arg>
</arguments>
<msg timestamp="20200108 13:45:26.199" level="INFO">Element '//div[@id='confirms' and @style='visibility: visible;']//input[@type='submit']' attribute 'value' contains value '1'.</msg>
<status status="PASS" starttime="20200108 13:45:26.184" endtime="20200108 13:45:26.199"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:26.184" endtime="20200108 13:45:26.199"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:26.184" endtime="20200108 13:45:26.199"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;1&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:26.215" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:26.215" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:26.215" endtime="20200108 13:45:26.215"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:26.215" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:26.215" endtime="20200108 13:45:26.215"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:26.215" endtime="20200108 13:45:26.215"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:26.215" endtime="20200108 13:45:26.215"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:26.215" endtime="20200108 13:45:26.215"></status>
</kw>
<msg timestamp="20200108 13:45:26.215" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:26.215" endtime="20200108 13:45:26.215"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:26.215" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:26.215" endtime="20200108 13:45:26.215"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:26.215" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200108 13:45:26.215" endtime="20200108 13:45:26.215"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:26.215" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200108 13:45:26.215" endtime="20200108 13:45:26.215"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:26.324" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 1</msg>
<status status="PASS" starttime="20200108 13:45:26.215" endtime="20200108 13:45:26.324"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:28.325" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:26.324" endtime="20200108 13:45:28.325"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:28.327" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:28.326" endtime="20200108 13:45:28.327"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:26.215" endtime="20200108 13:45:28.328"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:26.215" endtime="20200108 13:45:28.328"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;4&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:28.331" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:28.331" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:28.330" endtime="20200108 13:45:28.331"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:28.336" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:28.335" endtime="20200108 13:45:28.336"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:28.332" endtime="20200108 13:45:28.336"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:28.332" endtime="20200108 13:45:28.337"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:28.331" endtime="20200108 13:45:28.337"></status>
</kw>
<msg timestamp="20200108 13:45:28.338" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:28.329" endtime="20200108 13:45:28.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:28.339" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:28.338" endtime="20200108 13:45:28.339"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:28.340" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200108 13:45:28.339" endtime="20200108 13:45:28.340"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:28.341" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200108 13:45:28.341" endtime="20200108 13:45:28.341"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:28.376" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 4</msg>
<status status="PASS" starttime="20200108 13:45:28.342" endtime="20200108 13:45:28.377"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:30.379" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:28.377" endtime="20200108 13:45:30.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:30.382" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:30.380" endtime="20200108 13:45:30.382"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:28.342" endtime="20200108 13:45:30.383"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:28.329" endtime="20200108 13:45:30.384"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;2&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:30.389" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:30.390" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:30.388" endtime="20200108 13:45:30.390"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:30.397" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:30.396" endtime="20200108 13:45:30.397"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:30.392" endtime="20200108 13:45:30.398"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:30.391" endtime="20200108 13:45:30.398"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:30.391" endtime="20200108 13:45:30.399"></status>
</kw>
<msg timestamp="20200108 13:45:30.400" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:30.386" endtime="20200108 13:45:30.400"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:30.402" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:30.401" endtime="20200108 13:45:30.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:30.404" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200108 13:45:30.403" endtime="20200108 13:45:30.404"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:30.406" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200108 13:45:30.405" endtime="20200108 13:45:30.406"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:30.433" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 2</msg>
<status status="PASS" starttime="20200108 13:45:30.408" endtime="20200108 13:45:30.433"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:32.437" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:30.434" endtime="20200108 13:45:32.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:32.439" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:32.438" endtime="20200108 13:45:32.439"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:30.407" endtime="20200108 13:45:32.440"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:30.385" endtime="20200108 13:45:32.440"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;5&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:32.443" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:32.444" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:32.443" endtime="20200108 13:45:32.444"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:32.452" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:32.451" endtime="20200108 13:45:32.452"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:32.446" endtime="20200108 13:45:32.453"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:32.446" endtime="20200108 13:45:32.453"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:32.445" endtime="20200108 13:45:32.454"></status>
</kw>
<msg timestamp="20200108 13:45:32.455" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:32.442" endtime="20200108 13:45:32.455"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:32.456" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:32.456" endtime="20200108 13:45:32.456"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:32.458" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200108 13:45:32.457" endtime="20200108 13:45:32.458"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:32.459" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200108 13:45:32.458" endtime="20200108 13:45:32.459"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:33.102" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 5</msg>
<status status="PASS" starttime="20200108 13:45:32.461" endtime="20200108 13:45:33.103"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:35.105" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:33.104" endtime="20200108 13:45:35.105"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:35.107" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:35.106" endtime="20200108 13:45:35.107"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:32.460" endtime="20200108 13:45:35.108"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:32.441" endtime="20200108 13:45:35.108"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;3&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:35.111" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:35.112" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:35.111" endtime="20200108 13:45:35.112"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:35.117" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:35.116" endtime="20200108 13:45:35.118"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:35.113" endtime="20200108 13:45:35.118"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:35.113" endtime="20200108 13:45:35.119"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:35.112" endtime="20200108 13:45:35.119"></status>
</kw>
<msg timestamp="20200108 13:45:35.120" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:35.110" endtime="20200108 13:45:35.120"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:35.122" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:35.121" endtime="20200108 13:45:35.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:35.124" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20200108 13:45:35.123" endtime="20200108 13:45:35.124"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:35.125" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20200108 13:45:35.125" endtime="20200108 13:45:35.125"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:35.506" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 3</msg>
<status status="PASS" starttime="20200108 13:45:35.127" endtime="20200108 13:45:35.507"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:37.510" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:35.507" endtime="20200108 13:45:37.510"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:37.512" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:37.511" endtime="20200108 13:45:37.513"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:35.126" endtime="20200108 13:45:37.513"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:35.109" endtime="20200108 13:45:37.514"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;6&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:37.518" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:37.518" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:37.517" endtime="20200108 13:45:37.519"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:37.525" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:37.524" endtime="20200108 13:45:37.525"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:37.521" endtime="20200108 13:45:37.526"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:37.520" endtime="20200108 13:45:37.526"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:37.519" endtime="20200108 13:45:37.526"></status>
</kw>
<msg timestamp="20200108 13:45:37.528" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:37.515" endtime="20200108 13:45:37.528"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:37.529" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:37.528" endtime="20200108 13:45:37.529"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:37.531" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20200108 13:45:37.530" endtime="20200108 13:45:37.531"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:37.532" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20200108 13:45:37.531" endtime="20200108 13:45:37.533"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:38.154" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 6</msg>
<status status="PASS" starttime="20200108 13:45:37.535" endtime="20200108 13:45:38.154"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:40.157" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:38.155" endtime="20200108 13:45:40.157"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:40.159" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:40.158" endtime="20200108 13:45:40.160"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:37.534" endtime="20200108 13:45:40.160"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:37.514" endtime="20200108 13:45:40.161"></status>
</kw>
<kw name="And Plugout Copper Tip to Rack &quot;1&quot; Panel &quot;1&quot; Row &quot;1&quot; Port &quot;7&quot;" library="VirtualPanelDefinitions">
<kw name="Get Copper Panel Index" library="VirtualPanelDefinitions">
<arguments>
<arg>${rackID}</arg>
<arg>${panelID}</arg>
<arg>${row}</arg>
</arguments>
<assign>
<var>${panel index}</var>
</assign>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${VPpanels}</arg>
</arguments>
<assign>
<var>${panels number}</var>
</assign>
<msg timestamp="20200108 13:45:40.164" level="INFO">Length is 12</msg>
<msg timestamp="20200108 13:45:40.165" level="INFO">${panels number} = 12</msg>
<status status="PASS" starttime="20200108 13:45:40.163" endtime="20200108 13:45:40.165"></status>
</kw>
<kw name="${panel index} IN RANGE [ ${panels number-1} ]" type="for">
<kw name="${panel index} = 0" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${VPpanels[${panel index+1}][&amp;{dic panels table}[panel type]]}' == '${VIRTUAL PANELS TYPE}[COPPER]' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[rackID]]}' == '${input rackID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[panelID]]}' == '${input panelID}' and '${VPpanels[${panel index+1}][&amp;{dic panels table}[row]]}' == '${input row}'</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200108 13:45:40.171" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200108 13:45:40.170" endtime="20200108 13:45:40.171"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:40.167" endtime="20200108 13:45:40.172"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:40.167" endtime="20200108 13:45:40.172"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:40.166" endtime="20200108 13:45:40.173"></status>
</kw>
<msg timestamp="20200108 13:45:40.174" level="INFO">${panel index} = 1</msg>
<status status="PASS" starttime="20200108 13:45:40.162" endtime="20200108 13:45:40.174"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${panel index}</arg>
</arguments>
<msg timestamp="20200108 13:45:40.176" level="INFO">1</msg>
<status status="PASS" starttime="20200108 13:45:40.175" endtime="20200108 13:45:40.176"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>vp_cmd_helper --plugout --rack</arg>
<arg>${rackID}</arg>
<arg>--panel</arg>
<arg>${panel index}</arg>
<arg>--port</arg>
<arg>${portID}</arg>
</arguments>
<assign>
<var>${completed command}</var>
</assign>
<msg timestamp="20200108 13:45:40.178" level="INFO">${completed command} = vp_cmd_helper --plugout --rack 1 --panel 1 --port 7</msg>
<status status="PASS" starttime="20200108 13:45:40.177" endtime="20200108 13:45:40.178"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${completed command}</arg>
</arguments>
<msg timestamp="20200108 13:45:40.179" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 7</msg>
<status status="PASS" starttime="20200108 13:45:40.178" endtime="20200108 13:45:40.179"></status>
</kw>
<kw name="Enter Virtual Command ${completed command}" library="SSHDefinitions">
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20200108 13:45:40.288" level="INFO">vp_cmd_helper --plugout --rack 1 --panel 1 --port 7</msg>
<status status="PASS" starttime="20200108 13:45:40.181" endtime="20200108 13:45:40.289"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>loglevel=Trace</arg>
<arg>delay=1s</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20200108 13:45:42.292" level="INFO">${stdout} = result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:40.290" endtime="20200108 13:45:42.292"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stdout}</arg>
</arguments>
<msg timestamp="20200108 13:45:42.294" level="INFO">result=success
command=plugout
test_setup=on
bus_connect=on
bus_power=on
rack=1
panel=1
type=1100ps
panel_state=RUN
row=1
serial=28FFFF600001
count=11
# </msg>
<status status="PASS" starttime="20200108 13:45:42.293" endtime="20200108 13:45:42.294"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:40.180" endtime="20200108 13:45:42.295"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:40.161" endtime="20200108 13:45:42.295"></status>
</kw>
<kw name="Set Web UI to Stand By State and Close Current Browser" library="GeneralPage" type="teardown">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnExit}</arg>
</arguments>
<assign>
<var>${count Exit button}</var>
</assign>
<msg timestamp="20200108 13:45:42.337" level="INFO">${count Exit button} = 1</msg>
<status status="PASS" starttime="20200108 13:45:42.296" endtime="20200108 13:45:42.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Exit button} &gt; 0</arg>
<arg>Exit Screen</arg>
</arguments>
<kw name="Exit Screen" library="GeneralPage">
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnExit}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200108 13:45:42.353" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200108 13:45:42.341" endtime="20200108 13:45:42.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200108 13:45:42.357" level="INFO">Clicking element '//div[@id='exit-footer' and @style='display: block;']/div[@id='exit-button']'.</msg>
<status status="PASS" starttime="20200108 13:45:42.356" endtime="20200108 13:45:42.403"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200108 13:45:43.406" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200108 13:45:42.404" endtime="20200108 13:45:43.406"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:42.403" endtime="20200108 13:45:43.407"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:42.356" endtime="20200108 13:45:43.407"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:42.355" endtime="20200108 13:45:43.407"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:42.354" endtime="20200108 13:45:43.408"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:42.340" endtime="20200108 13:45:43.408"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200108 13:45:44.410" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200108 13:45:43.409" endtime="20200108 13:45:44.410"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:43.409" endtime="20200108 13:45:44.411"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:42.339" endtime="20200108 13:45:44.411"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:42.338" endtime="20200108 13:45:44.412"></status>
</kw>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${lblimVisionX}</arg>
</arguments>
<assign>
<var>${count Home screen}</var>
</assign>
<msg timestamp="20200108 13:45:44.433" level="INFO">${count Home screen} = 1</msg>
<status status="PASS" starttime="20200108 13:45:44.413" endtime="20200108 13:45:44.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${count Home screen} &gt; 0</arg>
<arg>Run Keywords</arg>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Web Button</arg>
<arg>${btnHome}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Web Button" library="GeneralPage">
<arguments>
<arg>${btnHome}</arg>
</arguments>
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<assign>
<var>${button exist}</var>
</assign>
<msg timestamp="20200108 13:45:44.454" level="INFO">${button exist} = 1</msg>
<status status="PASS" starttime="20200108 13:45:44.437" endtime="20200108 13:45:44.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${button exist} == 1</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keywords</arg>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Click Element</arg>
<arg>${btnName}</arg>
<arg>AND</arg>
<arg>Wait For Page Load</arg>
</arguments>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${btnName}</arg>
</arguments>
<msg timestamp="20200108 13:45:44.457" level="INFO">Clicking element '//div[@id='home-lang']'.</msg>
<status status="PASS" starttime="20200108 13:45:44.457" endtime="20200108 13:45:44.521"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200108 13:45:45.526" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200108 13:45:44.524" endtime="20200108 13:45:45.526"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:44.523" endtime="20200108 13:45:45.527"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:44.456" endtime="20200108 13:45:45.527"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:44.455" endtime="20200108 13:45:45.528"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:44.454" endtime="20200108 13:45:45.528"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:44.436" endtime="20200108 13:45:45.528"></status>
</kw>
<kw name="Wait For Page Load" library="GeneralPage">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${PAGE LOAD TIMEOUT}</arg>
</arguments>
<msg timestamp="20200108 13:45:46.532" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20200108 13:45:45.530" endtime="20200108 13:45:46.532"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:45.529" endtime="20200108 13:45:46.533"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:44.435" endtime="20200108 13:45:46.533"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:44.434" endtime="20200108 13:45:46.534"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20200108 13:45:46.535" endtime="20200108 13:45:48.800"></status>
</kw>
<status status="PASS" starttime="20200108 13:45:42.296" endtime="20200108 13:45:48.800"></status>
</kw>
<status status="PASS" starttime="20200108 13:44:58.407" endtime="20200108 13:45:48.800" critical="yes"></status>
</test>
<status status="PASS" starttime="20200108 13:44:57.953" endtime="20200108 13:45:48.804"></status>
</suite>
<status status="PASS" starttime="20200108 13:44:57.953" endtime="20200108 13:45:48.806"></status>
</suite>
<status status="PASS" starttime="20200108 13:44:57.953" endtime="20200108 13:45:48.806"></status>
</suite>
<status status="PASS" starttime="20200108 13:44:57.938" endtime="20200108 13:45:48.806"></status>
</suite>
<status status="PASS" starttime="20200108 13:44:57.938" endtime="20200108 13:45:48.806"></status>
</suite>
<status status="PASS" starttime="20200108 13:44:57.907" endtime="20200108 13:45:48.821"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="BulkPatching Robot">BulkPatching Robot</stat>
<stat pass="1" fail="0" id="s1-s1" name="BulkPatching Robot">BulkPatching Robot.BulkPatching Robot</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Test Resources">BulkPatching Robot.BulkPatching Robot.Test Resources</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1" name="Test Suites">BulkPatching Robot.BulkPatching Robot.Test Resources.Test Suites</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1-s1" name="3.Insert All End Bs">BulkPatching Robot.BulkPatching Robot.Test Resources.Test Suites.3.Insert All End Bs</stat>
<stat pass="1" fail="0" id="s1-s1-s1-s1-s1-s1" name="3.7.CheckNumberOfConfirmationWhenConnectingExcessPlugs">BulkPatching Robot.BulkPatching Robot.Test Resources.Test Suites.3.Insert All End Bs.3.7.CheckNumberOfConfirmationWhenConnectingExcessPlugs</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
